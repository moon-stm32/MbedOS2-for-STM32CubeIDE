
F401mbedBase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eb4  08008eb4  00020370  2**0
                  CONTENTS
  4 .ARM          00000008  08008eb4  08008eb4  00018eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ebc  08008ebc  00020370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008ebc  08008ebc  00018ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008ec4  08008ec4  00018ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000200  08008ecc  00020200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000370  0800903c  00020370  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  0800903c  00020748  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a283  00000000  00000000  000203a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009c46  00000000  00000000  0006a623  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024c8  00000000  00000000  00074270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022a8  00000000  00000000  00076738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f397  00000000  00000000  000789e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003531e  00000000  00000000  000a7d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2f73  00000000  00000000  000dd095  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a0008  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a198  00000000  00000000  001a0084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000370 	.word	0x20000370
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008674 	.word	0x08008674

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000374 	.word	0x20000374
 80001dc:	08008674 	.word	0x08008674

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b972 	b.w	80005a0 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9e08      	ldr	r6, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	4688      	mov	r8, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e2:	428a      	cmp	r2, r1
 80002e4:	4615      	mov	r5, r2
 80002e6:	d967      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	b14a      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002ee:	f1c2 0720 	rsb	r7, r2, #32
 80002f2:	fa01 f302 	lsl.w	r3, r1, r2
 80002f6:	fa20 f707 	lsr.w	r7, r0, r7
 80002fa:	4095      	lsls	r5, r2
 80002fc:	ea47 0803 	orr.w	r8, r7, r3
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbb8 f7fe 	udiv	r7, r8, lr
 800030c:	fa1f fc85 	uxth.w	ip, r5
 8000310:	fb0e 8817 	mls	r8, lr, r7, r8
 8000314:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000318:	fb07 f10c 	mul.w	r1, r7, ip
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18eb      	adds	r3, r5, r3
 8000322:	f107 30ff 	add.w	r0, r7, #4294967295
 8000326:	f080 811b 	bcs.w	8000560 <__udivmoddi4+0x28c>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8118 	bls.w	8000560 <__udivmoddi4+0x28c>
 8000330:	3f02      	subs	r7, #2
 8000332:	442b      	add	r3, r5
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0fe 	udiv	r0, r3, lr
 800033c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fc0c 	mul.w	ip, r0, ip
 8000348:	45a4      	cmp	ip, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x290>
 8000356:	45a4      	cmp	ip, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x290>
 800035c:	3802      	subs	r0, #2
 800035e:	442c      	add	r4, r5
 8000360:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	2700      	movs	r7, #0
 800036a:	b11e      	cbz	r6, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c6 4300 	strd	r4, r3, [r6]
 8000374:	4639      	mov	r1, r7
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xbe>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80eb 	beq.w	800055a <__udivmoddi4+0x286>
 8000384:	2700      	movs	r7, #0
 8000386:	e9c6 0100 	strd	r0, r1, [r6]
 800038a:	4638      	mov	r0, r7
 800038c:	4639      	mov	r1, r7
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f783 	clz	r7, r3
 8000396:	2f00      	cmp	r7, #0
 8000398:	d147      	bne.n	800042a <__udivmoddi4+0x156>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd0>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80fa 	bhi.w	8000598 <__udivmoddi4+0x2c4>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	4698      	mov	r8, r3
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa0>
 80003b2:	e9c6 4800 	strd	r4, r8, [r6]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa0>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xe8>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 808f 	bne.w	80004e4 <__udivmoddi4+0x210>
 80003c6:	1b49      	subs	r1, r1, r5
 80003c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003cc:	fa1f f885 	uxth.w	r8, r5
 80003d0:	2701      	movs	r7, #1
 80003d2:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d6:	0c23      	lsrs	r3, r4, #16
 80003d8:	fb0e 111c 	mls	r1, lr, ip, r1
 80003dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e0:	fb08 f10c 	mul.w	r1, r8, ip
 80003e4:	4299      	cmp	r1, r3
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003e8:	18eb      	adds	r3, r5, r3
 80003ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x122>
 80003f0:	4299      	cmp	r1, r3
 80003f2:	f200 80cd 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003f6:	4684      	mov	ip, r0
 80003f8:	1a59      	subs	r1, r3, r1
 80003fa:	b2a3      	uxth	r3, r4
 80003fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000400:	fb0e 1410 	mls	r4, lr, r0, r1
 8000404:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000408:	fb08 f800 	mul.w	r8, r8, r0
 800040c:	45a0      	cmp	r8, r4
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0x14c>
 8000410:	192c      	adds	r4, r5, r4
 8000412:	f100 33ff 	add.w	r3, r0, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x14a>
 8000418:	45a0      	cmp	r8, r4
 800041a:	f200 80b6 	bhi.w	800058a <__udivmoddi4+0x2b6>
 800041e:	4618      	mov	r0, r3
 8000420:	eba4 0408 	sub.w	r4, r4, r8
 8000424:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000428:	e79f      	b.n	800036a <__udivmoddi4+0x96>
 800042a:	f1c7 0c20 	rsb	ip, r7, #32
 800042e:	40bb      	lsls	r3, r7
 8000430:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000434:	ea4e 0e03 	orr.w	lr, lr, r3
 8000438:	fa01 f407 	lsl.w	r4, r1, r7
 800043c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000440:	fa21 f30c 	lsr.w	r3, r1, ip
 8000444:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000448:	4325      	orrs	r5, r4
 800044a:	fbb3 f9f8 	udiv	r9, r3, r8
 800044e:	0c2c      	lsrs	r4, r5, #16
 8000450:	fb08 3319 	mls	r3, r8, r9, r3
 8000454:	fa1f fa8e 	uxth.w	sl, lr
 8000458:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800045c:	fb09 f40a 	mul.w	r4, r9, sl
 8000460:	429c      	cmp	r4, r3
 8000462:	fa02 f207 	lsl.w	r2, r2, r7
 8000466:	fa00 f107 	lsl.w	r1, r0, r7
 800046a:	d90b      	bls.n	8000484 <__udivmoddi4+0x1b0>
 800046c:	eb1e 0303 	adds.w	r3, lr, r3
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295
 8000474:	f080 8087 	bcs.w	8000586 <__udivmoddi4+0x2b2>
 8000478:	429c      	cmp	r4, r3
 800047a:	f240 8084 	bls.w	8000586 <__udivmoddi4+0x2b2>
 800047e:	f1a9 0902 	sub.w	r9, r9, #2
 8000482:	4473      	add	r3, lr
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	b2ad      	uxth	r5, r5
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3310 	mls	r3, r8, r0, r3
 8000490:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000494:	fb00 fa0a 	mul.w	sl, r0, sl
 8000498:	45a2      	cmp	sl, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1da>
 800049c:	eb1e 0404 	adds.w	r4, lr, r4
 80004a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a4:	d26b      	bcs.n	800057e <__udivmoddi4+0x2aa>
 80004a6:	45a2      	cmp	sl, r4
 80004a8:	d969      	bls.n	800057e <__udivmoddi4+0x2aa>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4474      	add	r4, lr
 80004ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	eba4 040a 	sub.w	r4, r4, sl
 80004ba:	454c      	cmp	r4, r9
 80004bc:	46c2      	mov	sl, r8
 80004be:	464b      	mov	r3, r9
 80004c0:	d354      	bcc.n	800056c <__udivmoddi4+0x298>
 80004c2:	d051      	beq.n	8000568 <__udivmoddi4+0x294>
 80004c4:	2e00      	cmp	r6, #0
 80004c6:	d069      	beq.n	800059c <__udivmoddi4+0x2c8>
 80004c8:	ebb1 050a 	subs.w	r5, r1, sl
 80004cc:	eb64 0403 	sbc.w	r4, r4, r3
 80004d0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d4:	40fd      	lsrs	r5, r7
 80004d6:	40fc      	lsrs	r4, r7
 80004d8:	ea4c 0505 	orr.w	r5, ip, r5
 80004dc:	e9c6 5400 	strd	r5, r4, [r6]
 80004e0:	2700      	movs	r7, #0
 80004e2:	e747      	b.n	8000374 <__udivmoddi4+0xa0>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f703 	lsr.w	r7, r0, r3
 80004ec:	4095      	lsls	r5, r2
 80004ee:	fa01 f002 	lsl.w	r0, r1, r2
 80004f2:	fa21 f303 	lsr.w	r3, r1, r3
 80004f6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004fa:	4338      	orrs	r0, r7
 80004fc:	0c01      	lsrs	r1, r0, #16
 80004fe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000502:	fa1f f885 	uxth.w	r8, r5
 8000506:	fb0e 3317 	mls	r3, lr, r7, r3
 800050a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050e:	fb07 f308 	mul.w	r3, r7, r8
 8000512:	428b      	cmp	r3, r1
 8000514:	fa04 f402 	lsl.w	r4, r4, r2
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x256>
 800051a:	1869      	adds	r1, r5, r1
 800051c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000520:	d22f      	bcs.n	8000582 <__udivmoddi4+0x2ae>
 8000522:	428b      	cmp	r3, r1
 8000524:	d92d      	bls.n	8000582 <__udivmoddi4+0x2ae>
 8000526:	3f02      	subs	r7, #2
 8000528:	4429      	add	r1, r5
 800052a:	1acb      	subs	r3, r1, r3
 800052c:	b281      	uxth	r1, r0
 800052e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000532:	fb0e 3310 	mls	r3, lr, r0, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb00 f308 	mul.w	r3, r0, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x27e>
 8000542:	1869      	adds	r1, r5, r1
 8000544:	f100 3cff 	add.w	ip, r0, #4294967295
 8000548:	d217      	bcs.n	800057a <__udivmoddi4+0x2a6>
 800054a:	428b      	cmp	r3, r1
 800054c:	d915      	bls.n	800057a <__udivmoddi4+0x2a6>
 800054e:	3802      	subs	r0, #2
 8000550:	4429      	add	r1, r5
 8000552:	1ac9      	subs	r1, r1, r3
 8000554:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000558:	e73b      	b.n	80003d2 <__udivmoddi4+0xfe>
 800055a:	4637      	mov	r7, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e709      	b.n	8000374 <__udivmoddi4+0xa0>
 8000560:	4607      	mov	r7, r0
 8000562:	e6e7      	b.n	8000334 <__udivmoddi4+0x60>
 8000564:	4618      	mov	r0, r3
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x8c>
 8000568:	4541      	cmp	r1, r8
 800056a:	d2ab      	bcs.n	80004c4 <__udivmoddi4+0x1f0>
 800056c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000570:	eb69 020e 	sbc.w	r2, r9, lr
 8000574:	3801      	subs	r0, #1
 8000576:	4613      	mov	r3, r2
 8000578:	e7a4      	b.n	80004c4 <__udivmoddi4+0x1f0>
 800057a:	4660      	mov	r0, ip
 800057c:	e7e9      	b.n	8000552 <__udivmoddi4+0x27e>
 800057e:	4618      	mov	r0, r3
 8000580:	e795      	b.n	80004ae <__udivmoddi4+0x1da>
 8000582:	4667      	mov	r7, ip
 8000584:	e7d1      	b.n	800052a <__udivmoddi4+0x256>
 8000586:	4681      	mov	r9, r0
 8000588:	e77c      	b.n	8000484 <__udivmoddi4+0x1b0>
 800058a:	3802      	subs	r0, #2
 800058c:	442c      	add	r4, r5
 800058e:	e747      	b.n	8000420 <__udivmoddi4+0x14c>
 8000590:	f1ac 0c02 	sub.w	ip, ip, #2
 8000594:	442b      	add	r3, r5
 8000596:	e72f      	b.n	80003f8 <__udivmoddi4+0x124>
 8000598:	4638      	mov	r0, r7
 800059a:	e708      	b.n	80003ae <__udivmoddi4+0xda>
 800059c:	4637      	mov	r7, r6
 800059e:	e6e9      	b.n	8000374 <__udivmoddi4+0xa0>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <gpio_write>:
    GPIO_TypeDef *gpio;
    uint32_t ll_pin;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
    if (value) {
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d005      	beq.n	80005c0 <gpio_write+0x1c>
        *obj->reg_set = obj->mask;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	6812      	ldr	r2, [r2, #0]
 80005bc:	601a      	str	r2, [r3, #0]
        *obj->reg_clr = obj->mask << 16;
#else
        *obj->reg_clr = obj->mask;
#endif
    }
}
 80005be:	e005      	b.n	80005cc <gpio_write+0x28>
        *obj->reg_clr = obj->mask << 16;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	0412      	lsls	r2, r2, #16
 80005ca:	601a      	str	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <_ZN4mbed10DigitalOutC1E7PinName>:
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio()
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	807b      	strh	r3, [r7, #2]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	461a      	mov	r2, r3
 80005e8:	2300      	movs	r3, #0
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	6053      	str	r3, [r2, #4]
 80005ee:	6093      	str	r3, [r2, #8]
 80005f0:	60d3      	str	r3, [r2, #12]
 80005f2:	6113      	str	r3, [r2, #16]
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	6193      	str	r3, [r2, #24]
    {
        // No lock needed in the constructor
        gpio_init_out(&gpio, pin);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80005fe:	4611      	mov	r1, r2
 8000600:	4618      	mov	r0, r3
 8000602:	f002 fbee 	bl	8002de2 <gpio_init_out>
    }
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <_ZN4mbed10DigitalOut5writeEi>:
    /** Set the output, specified as 0 or 1 (int)
     *
     *  @param value An integer specifying the pin output value,
     *      0 for logical 0, 1 (or any other non-zero value) for logical 1
     */
    void write(int value)
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
    {
        // Thread safe / atomic HAL call
        gpio_write(&gpio, value);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6839      	ldr	r1, [r7, #0]
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ffc0 	bl	80005a4 <gpio_write>
    }
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <_ZN4mbed10DigitalOutaSEi>:
    }

    /** A shorthand for write()
     * \sa DigitalOut::write()
     */
    DigitalOut &operator= (int value)
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
    {
        // Underlying write is thread safe
        write(value);
 8000636:	6839      	ldr	r1, [r7, #0]
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff ffe9 	bl	8000610 <_ZN4mbed10DigitalOut5writeEi>
        return *this;
 800063e:	687b      	ldr	r3, [r7, #4]
    }
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <_ZN4mbed10FileHandle5lseekEli>:
     *    -1 on failure or unsupported
     *  @deprecated Replaced by `off_t FileHandle::seek(off_t offset, int whence = SEEK_SET)'
     *
     */
    MBED_DEPRECATED_SINCE("mbed-os-5.4", "Replaced by FileHandle::seek")
    virtual off_t lseek(off_t offset, int whence)
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
    {
        return seek(offset, whence);
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3310      	adds	r3, #16
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	68b9      	ldr	r1, [r7, #8]
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	4798      	blx	r3
 8000664:	4603      	mov	r3, r0
    }
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <_ZN4mbed10FileHandle5fsyncEv>:
     *    0 on success or un-needed,
     *   -1 on error
     *  @deprecated Replaced by `int FileHandle::sync()'
     */
    MBED_DEPRECATED_SINCE("mbed-os-5.4", "Replaced by FileHandle::sync")
    virtual int fsync()
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
    {
        return sync();
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	3318      	adds	r3, #24
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	4798      	blx	r3
 8000682:	4603      	mov	r3, r0
    }
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <_ZN4mbed10FileHandle4flenEv>:
     *  @returns
     *   Length of the file
     *  @deprecated Replaced by `off_t FileHandle::size()'
     */
    MBED_DEPRECATED_SINCE("mbed-os-5.4", "Replaced by FileHandle::size")
    virtual off_t flen()
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
    {
        return size();
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	3328      	adds	r3, #40	; 0x28
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	4798      	blx	r3
 80006a0:	4603      	mov	r3, r0
    }
 80006a2:	4618      	mov	r0, r3
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <_ZN4mbed10FileHandle12set_blockingEb>:
     *  @param blocking     true for blocking mode, false for non-blocking mode.
     *
     *  @return             0 on success
     *  @return             Negative error code on failure
     */
    virtual int set_blocking(bool blocking)
 80006aa:	b480      	push	{r7}
 80006ac:	b083      	sub	sp, #12
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	460b      	mov	r3, r1
 80006b4:	70fb      	strb	r3, [r7, #3]
    {
        return blocking ? 0 : -ENOTTY;
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <_ZN4mbed10FileHandle12set_blockingEb+0x16>
 80006bc:	2300      	movs	r3, #0
 80006be:	e001      	b.n	80006c4 <_ZN4mbed10FileHandle12set_blockingEb+0x1a>
 80006c0:	f06f 0318 	mvn.w	r3, #24
    }
 80006c4:	4618      	mov	r0, r3
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <_ZNK4mbed10FileHandle11is_blockingEv>:

    /** Check current blocking or non-blocking mode for file operations.
     *
     *  @return             true for blocking mode, false for non-blocking mode.
     */
    virtual bool is_blocking() const
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
    {
        return true;
 80006d8:	2301      	movs	r3, #1
    }
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <_ZNK4mbed10FileHandle4pollEs>:
     *
     * @param events        bitmask of poll events we're interested in - POLLIN/POLLOUT etc.
     *
     * @returns             bitmask of poll events that have occurred.
     */
    virtual short poll(short events) const
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
 80006ee:	460b      	mov	r3, r1
 80006f0:	807b      	strh	r3, [r7, #2]
    {
        // Possible default for real files
        return POLLIN | POLLOUT;
 80006f2:	2311      	movs	r3, #17
    }
 80006f4:	4618      	mov	r0, r3
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <_ZN4mbed10FileHandle5sigioENS_8CallbackIFvvEEE>:
     *  is called is not guaranteed and susceptible to change. It should be used
     *  as a cue to make read/write/poll calls to find the current state.
     *
     *  @param func     Function to call on state change
     */
    virtual void sigio(Callback<void()> func)
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
    {
        //Default for real files. Do nothing for real files.
    }
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <_ZN4mbed6Stream4lockEv>:

    std::FILE *_file;

    /** Acquire exclusive access to this object.
     */
    virtual void lock()
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
    {
        // Stub
    }
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <_ZN4mbed6Stream6unlockEv>:

    /** Release exclusive access to this object.
     */
    virtual void unlock()
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
    {
        // Stub
    }
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <_ZN12TextLCD_BaseC1ENS_7LCDTypeENS_7LCDCtrlE>:
/** Create a TextLCD_Base interface
  *
  * @param type  Sets the panel size/addressing mode (default = LCD16x2)
  * @param ctrl  LCD controller (default = HD44780)           
  */
TextLCD_Base::TextLCD_Base(LCDType type, LCDCtrl ctrl) : _type(type), _ctrl(ctrl) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f003 fa89 	bl	8003c68 <_ZN4mbed6StreamC1EPKc>
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <_ZN12TextLCD_BaseC1ENS_7LCDTypeENS_7LCDCtrlE+0x68>)
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	4a13      	ldr	r2, [pc, #76]	; (80007ac <_ZN12TextLCD_BaseC1ENS_7LCDTypeENS_7LCDCtrlE+0x6c>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	619a      	str	r2, [r3, #24]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
    
  // Extract LCDType data  

  // Columns encoded in b15..b8
  _nr_cols = (_type & LCD_T_COL_MSK) >> LCD_T_COL_SHFT;   
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	121b      	asrs	r3, r3, #8
 8000774:	b2da      	uxtb	r2, r3
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	61da      	str	r2, [r3, #28]
  
  // Rows encoded in b23..b16  
  _nr_rows = (_type & LCD_T_ROW_MSK) >> LCD_T_ROW_SHFT;   
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	141b      	asrs	r3, r3, #16
 8000780:	b2da      	uxtb	r2, r3
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	621a      	str	r2, [r3, #32]

  // Addressing mode encoded in b27..b24  
  _addr_mode = _type & LCD_T_ADR_MSK;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  
  // Font table, encoded in LCDCtrl  
  _font = _ctrl & LCD_C_FNT_MSK;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000796:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	4618      	mov	r0, r3
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	08008ad0 	.word	0x08008ad0
 80007ac:	08008b44 	.word	0x08008b44

080007b0 <_ZN12TextLCD_Base5_initENS_14_LCDDatalengthE>:
/**  Init the LCD Controller(s)
  *  Clear display 
  *  @param _LCDDatalength dl sets the datalength of data/commands
  *  @return none 
  */
void TextLCD_Base::_init(_LCDDatalength dl) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]

  wait_ms(100);                  // Wait 100ms to ensure powered up
 80007bc:	2064      	movs	r0, #100	; 0x64
 80007be:	f004 fb71 	bl	8004ea4 <wait_ms>
  
#if (LCD_TWO_CTRL == 1)
  // Select and configure second LCD controller when needed
  if(_type==LCD40x4) {
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <_ZN12TextLCD_Base5_initENS_14_LCDDatalengthE+0x50>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d108      	bne.n	80007de <_ZN12TextLCD_Base5_initENS_14_LCDDatalengthE+0x2e>
    _ctrl_idx=_LCDCtrl_1;        // Select 2nd controller   
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2201      	movs	r2, #1
 80007d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    _initCtrl(dl);               // Init 2nd controller   
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	4619      	mov	r1, r3
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 f813 	bl	8000804 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE>
  }
#endif
    
  // Select and configure primary LCD controller
  _ctrl_idx=_LCDCtrl_0;          // Select primary controller  
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  _initCtrl(dl);                 // Init primary controller
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	4619      	mov	r1, r3
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 f80a 	bl	8000804 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE>

  // Clear whole display and Reset Cursor location
  // Note: This will make sure that some 3-line displays that skip topline of a 4-line configuration 
  //       are cleared and init cursor correctly.
  cls();   
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f001 f821 	bl	8001838 <_ZN12TextLCD_Base3clsEv>
} 
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	05042800 	.word	0x05042800

08000804 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE>:
  *  @param _LCDDatalength dl sets the 4 or 8 bit datalength of data/commands. Required for some native serial modes that dont work when DL=0.
  *  @return none  
  *
  *  Note: some configurations are commented out because they have not yet been tested due to lack of hardware
  */
void TextLCD_Base::_initCtrl(_LCDDatalength dl) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
  int _bias_lines=0; // Set Bias and lines (Instr Set 1), temporary variable.
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
  int _lines=0;      // Set lines (Ext Instr Set), temporary variable.
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]

    this->_setRS(false); // command mode
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	335c      	adds	r3, #92	; 0x5c
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2100      	movs	r1, #0
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	4798      	blx	r3

    if (dl == _LCD_DL_4) {
 8000826:	78fb      	ldrb	r3, [r7, #3]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d11c      	bne.n	8000866 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x62>
      // between the uP and the LCD can only write the 4 most significant bits (Most Significant Nibble, MSN).
      // In 4 bit mode the LCD expects the MSN first, followed by the LSN.
      //
      //    Current state:               8 bit mode                |      4 bit mode, MSN is next        | 4 bit mode, LSN is next          
                           //-------------------------------------------------------------------------------------------------                          
      _writeNibble(0x3);   //  set 8 bit mode (MSN) and dummy LSN, |   set 8 bit mode (MSN),             |    set dummy LSN, 
 800082c:	2103      	movs	r1, #3
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f001 f8c3 	bl	80019ba <_ZN12TextLCD_Base12_writeNibbleEi>
                           //  remains in 8 bit mode               |    remains in 4 bit mode            |  remains in 4 bit mode
      wait_ms(15);         //                           
 8000834:	200f      	movs	r0, #15
 8000836:	f004 fb35 	bl	8004ea4 <wait_ms>
     
      _writeNibble(0x3);   //  set 8 bit mode (MSN) and dummy LSN, |      set dummy LSN,                 |    set 8bit mode (MSN), 
 800083a:	2103      	movs	r1, #3
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f001 f8bc 	bl	80019ba <_ZN12TextLCD_Base12_writeNibbleEi>
                           //  remains in 8 bit mode               |   change to 8 bit mode              |  remains in 4 bit mode
      wait_ms(15);         // 
 8000842:	200f      	movs	r0, #15
 8000844:	f004 fb2e 	bl	8004ea4 <wait_ms>
    
      _writeNibble(0x3);   //  set 8 bit mode (MSN) and dummy LSN, | set 8 bit mode (MSN) and dummy LSN, |    set dummy LSN, 
 8000848:	2103      	movs	r1, #3
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f001 f8b5 	bl	80019ba <_ZN12TextLCD_Base12_writeNibbleEi>
                           //  remains in 8 bit mode               |   remains in 8 bit mode             |  change to 8 bit mode
      wait_ms(15);         // 
 8000850:	200f      	movs	r0, #15
 8000852:	f004 fb27 	bl	8004ea4 <wait_ms>

      // Controller is now in 8 bit mode

      _writeNibble(0x2);   // Change to 4-bit mode (MSN), the LSN is undefined dummy
 8000856:	2102      	movs	r1, #2
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f001 f8ae 	bl	80019ba <_ZN12TextLCD_Base12_writeNibbleEi>
      wait_us(40);         // most instructions take 40us
 800085e:	2028      	movs	r0, #40	; 0x28
 8000860:	f004 fb30 	bl	8004ec4 <wait_us>
 8000864:	e006      	b.n	8000874 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x70>
      // Note: 4/8 bit mode is ignored for most native SPI and I2C devices. They dont use the parallel bus.
      //       However, _writeNibble() method is void anyway for native SPI and I2C devices.
    }
    else {
      // Reset in 8 bit mode, final Function set will follow 
      _writeCommand(0x30); // Function set 0 0 1 DL=1 N F x x       
 8000866:	2130      	movs	r1, #48	; 0x30
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f001 f90b 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
      wait_ms(1);          // most instructions take 40us      
 800086e:	2001      	movs	r0, #1
 8000870:	f004 fb18 	bl	8004ea4 <wait_ms>
    }      
   
    // Device specific initialisations: DC/DC converter to generate VLCD or VLED, number of lines etc
    switch (_ctrl) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000878:	4ab0      	ldr	r2, [pc, #704]	; (8000b3c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x338>)
 800087a:	4293      	cmp	r3, r2
 800087c:	f000 83ef 	beq.w	800105e <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x85a>
 8000880:	4aae      	ldr	r2, [pc, #696]	; (8000b3c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x338>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d833      	bhi.n	80008ee <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xea>
 8000886:	4aae      	ldr	r2, [pc, #696]	; (8000b40 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x33c>)
 8000888:	4293      	cmp	r3, r2
 800088a:	f000 8680 	beq.w	800158e <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd8a>
 800088e:	4aac      	ldr	r2, [pc, #688]	; (8000b40 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x33c>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d815      	bhi.n	80008c0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbc>
 8000894:	4aab      	ldr	r2, [pc, #684]	; (8000b44 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x340>)
 8000896:	4293      	cmp	r3, r2
 8000898:	f000 8633 	beq.w	8001502 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xcfe>
 800089c:	4aa9      	ldr	r2, [pc, #676]	; (8000b44 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x340>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d805      	bhi.n	80008ae <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xaa>
 80008a2:	4aa9      	ldr	r2, [pc, #676]	; (8000b48 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x344>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	f000 84f3 	beq.w	8001290 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xa8c>
 80008aa:	f000 bf5b 	b.w	8001764 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xf60>
 80008ae:	4aa7      	ldr	r2, [pc, #668]	; (8000b4c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x348>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d04d      	beq.n	8000950 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x14c>
 80008b4:	4aa6      	ldr	r2, [pc, #664]	; (8000b50 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x34c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	f000 80d9 	beq.w	8000a6e <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x26a>
 80008bc:	f000 bf52 	b.w	8001764 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xf60>
 80008c0:	4aa4      	ldr	r2, [pc, #656]	; (8000b54 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x350>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	f000 8396 	beq.w	8000ff4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x7f0>
 80008c8:	4aa2      	ldr	r2, [pc, #648]	; (8000b54 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x350>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d805      	bhi.n	80008da <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd6>
 80008ce:	4aa2      	ldr	r2, [pc, #648]	; (8000b58 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x354>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	f000 8282 	beq.w	8000dda <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x5d6>
 80008d6:	f000 bf45 	b.w	8001764 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xf60>
 80008da:	4aa0      	ldr	r2, [pc, #640]	; (8000b5c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x358>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	f000 8458 	beq.w	8001192 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x98e>
 80008e2:	4a9f      	ldr	r2, [pc, #636]	; (8000b60 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x35c>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	f000 840d 	beq.w	8001104 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x900>
 80008ea:	f000 bf3b 	b.w	8001764 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xf60>
 80008ee:	4a9d      	ldr	r2, [pc, #628]	; (8000b64 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x360>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	f000 8179 	beq.w	8000be8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x3e4>
 80008f6:	4a9b      	ldr	r2, [pc, #620]	; (8000b64 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x360>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d816      	bhi.n	800092a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x126>
 80008fc:	4a9a      	ldr	r2, [pc, #616]	; (8000b68 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x364>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	f000 845f 	beq.w	80011c2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x9be>
 8000904:	4a98      	ldr	r2, [pc, #608]	; (8000b68 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x364>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d805      	bhi.n	8000916 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x112>
 800090a:	4a98      	ldr	r2, [pc, #608]	; (8000b6c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x368>)
 800090c:	4293      	cmp	r3, r2
 800090e:	f000 8458 	beq.w	80011c2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x9be>
 8000912:	f000 bf27 	b.w	8001764 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xf60>
 8000916:	4a96      	ldr	r2, [pc, #600]	; (8000b70 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x36c>)
 8000918:	4293      	cmp	r3, r2
 800091a:	f000 84f9 	beq.w	8001310 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb0c>
 800091e:	4a95      	ldr	r2, [pc, #596]	; (8000b74 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x370>)
 8000920:	4293      	cmp	r3, r2
 8000922:	f000 82b3 	beq.w	8000e8c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x688>
 8000926:	f000 bf1d 	b.w	8001764 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xf60>
 800092a:	4a93      	ldr	r2, [pc, #588]	; (8000b78 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x374>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d809      	bhi.n	8000944 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x140>
 8000930:	4a92      	ldr	r2, [pc, #584]	; (8000b7c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x378>)
 8000932:	4293      	cmp	r3, r2
 8000934:	f080 81d5 	bcs.w	8000ce2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x4de>
 8000938:	4a91      	ldr	r2, [pc, #580]	; (8000b80 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x37c>)
 800093a:	4293      	cmp	r3, r2
 800093c:	f000 8154 	beq.w	8000be8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x3e4>
 8000940:	f000 bf10 	b.w	8001764 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xf60>
 8000944:	4a8f      	ldr	r2, [pc, #572]	; (8000b84 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x380>)
 8000946:	4293      	cmp	r3, r2
 8000948:	f000 868e 	beq.w	8001668 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xe64>
 800094c:	f000 bf0a 	b.w	8001764 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xf60>

      case KS0073:
          // Initialise Display configuration
          switch (_type) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f5b3 3f02 	cmp.w	r3, #133120	; 0x20800
 8000958:	d051      	beq.n	80009fe <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1fa>
 800095a:	f5b3 3f02 	cmp.w	r3, #133120	; 0x20800
 800095e:	dc13      	bgt.n	8000988 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x184>
 8000960:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 8000964:	d027      	beq.n	80009b6 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1b2>
 8000966:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 800096a:	dc06      	bgt.n	800097a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x176>
 800096c:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
 8000970:	d021      	beq.n	80009b6 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1b2>
 8000972:	f5b3 3f86 	cmp.w	r3, #68608	; 0x10c00
 8000976:	d01e      	beq.n	80009b6 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1b2>
 8000978:	e053      	b.n	8000a22 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x21e>
 800097a:	f5b3 3f8a 	cmp.w	r3, #70656	; 0x11400
 800097e:	d01a      	beq.n	80009b6 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1b2>
 8000980:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 8000984:	d017      	beq.n	80009b6 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1b2>
 8000986:	e04c      	b.n	8000a22 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x21e>
 8000988:	f5b3 3f06 	cmp.w	r3, #137216	; 0x21800
 800098c:	d037      	beq.n	80009fe <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1fa>
 800098e:	f5b3 3f06 	cmp.w	r3, #137216	; 0x21800
 8000992:	dc06      	bgt.n	80009a2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x19e>
 8000994:	f5b3 3f04 	cmp.w	r3, #135168	; 0x21000
 8000998:	d031      	beq.n	80009fe <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1fa>
 800099a:	f5b3 3f05 	cmp.w	r3, #136192	; 0x21400
 800099e:	d02e      	beq.n	80009fe <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1fa>
 80009a0:	e03f      	b.n	8000a22 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x21e>
 80009a2:	4a79      	ldr	r2, [pc, #484]	; (8000b88 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x384>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d018      	beq.n	80009da <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1d6>
 80009a8:	4a78      	ldr	r2, [pc, #480]	; (8000b8c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x388>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d015      	beq.n	80009da <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1d6>
 80009ae:	f5b3 3f08 	cmp.w	r3, #139264	; 0x22000
 80009b2:	d024      	beq.n	80009fe <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1fa>
 80009b4:	e035      	b.n	8000a22 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x21e>
            case LCD20x1:
            case LCD24x1:
//            case LCD32x1:        // EXT pin is High, extension driver needed
//            case LCD40x1:        // EXT pin is High, extension driver needed 
//            case LCD52x1:        // EXT pin is High, extension driver needed 
              _function = dl | 0x02; // Set function, 0 0 1 DL, N, RE(0), DH, REV                                                                 
 80009b6:	78fb      	ldrb	r3, [r7, #3]
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	461a      	mov	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	645a      	str	r2, [r3, #68]	; 0x44
                                     //    N=0 (1-line mode), N=1 (2-line mode), dont care for 4 line mode                                     
                                     //   RE=0 (Dis. Extended Regs, special mode for KS0073)
                                     //   DH=1 (Disp shift enable, special mode for KS0073)                                
                                     //   REV=0 (Reverse normal, special mode for KS0073)
                                                 
              _function_1 = dl | 0x04; // Set function, 0 0 1 DL, N, RE(1), BE, LP  (Ext Regs)
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	649a      	str	r2, [r3, #72]	; 0x48
                                     //    N=0 (1-line mode), N=1 (2-line mode), dont care for 4 line mode                                     
                                     //   RE=1 (Ena Extended Regs, special mode for KS0073)
                                     //   BE=0 (Blink Enable, CG/SEG RAM, special mode for KS0073)                                
                                     //   LP=0 (LP=1 Low power mode, LP=0 Normal)

              _function_x = 0x00;   // Ext Function set 0000 1 FW BW NW (Ext Regs)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	64da      	str	r2, [r3, #76]	; 0x4c
                                    //    NW=0 (1,2 line), NW=1 (4 Line, special mode for KS0073)                                
              break;                                
 80009d8:	e027      	b.n	8000a2a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x226>
            case LCD12x4D:         // Special mode for KS0073, KS0078 and PCF21XX            
//            case LCD16x3D:         // Special mode for KS0073, KS0078             
//            case LCD16x3D1:        // Special mode for KS0073, KS0078             
//            case LCD16x4D:         // Special mode for KS0073, KS0078            
            case LCD20x4D:         // Special mode for KS0073, KS0078            
              _function = dl | 0x02; // Set function, 0 0 1 DL, N, RE(0), DH, REV                                                                 
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	461a      	mov	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	645a      	str	r2, [r3, #68]	; 0x44
                                     //    N=0 (1-line mode), N=1 (2-line mode), dont care for 4 line mode                                      
                                     //   RE=0  (Dis. Extended Regs, special mode for KS0073)
                                     //   DH=1  (Disp shift enable, special mode for KS0073)                                
                                     //   REV=0 (Reverse normal, special mode for KS0073)
                                    
              _function_1 = dl | 0x04; // Set function, 0 0 1 DL, N, RE(1), BE, LP  (Ext Regs)
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	461a      	mov	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	649a      	str	r2, [r3, #72]	; 0x48
                                     //    N=0 (1-line mode), N=1 (2-line mode), dont care for 4 line mode              
                                     //   RE=1 (Ena Extended Regs, special mode for KS0073)
                                     //   BE=0 (Blink Enable, CG/SEG RAM, special mode for KS0073)                                
                                     //   LP=0 (LP=1 Low power mode, LP=0 Normal)                                    

              _function_x = 0x01;   // Ext Function set 0000 1 FW BW NW (Ext Regs)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2201      	movs	r2, #1
 80009fa:	64da      	str	r2, [r3, #76]	; 0x4c
                                    //    NW=0 (1,2 line), NW=1 (4 Line, special mode for KS0073)                                
              break;                                
 80009fc:	e015      	b.n	8000a2a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x226>
//            case LCD16x1C:            
            case LCD20x2:
            case LCD24x2:
            case LCD32x2:            
              // All other LCD types are initialised as 2 Line displays
              _function = dl | 0x0A; // Set function, 0 0 1 DL, N, RE(0), DH, REV                                                                 
 80009fe:	78fb      	ldrb	r3, [r7, #3]
 8000a00:	f043 030a 	orr.w	r3, r3, #10
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	461a      	mov	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	645a      	str	r2, [r3, #68]	; 0x44
                                     //    N=1  (2-line mode), N=0 (1-line mode)
                                     //   RE=0  (Dis. Extended Regs, special mode for KS0073)
                                     //   DH=1  (Disp shift enable, special mode for KS0073)                                
                                     //   REV=0 (Reverse normal, special mode for KS0073)
                                    
              _function_1 = dl | 0x0C; // Set function, 0 0 1 DL, N, RE(1), BE, LP  (Ext Regs)
 8000a0c:	78fb      	ldrb	r3, [r7, #3]
 8000a0e:	f043 030c 	orr.w	r3, r3, #12
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	461a      	mov	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	649a      	str	r2, [r3, #72]	; 0x48
                                     //    N=1  (2 line mode), N=0 (1-line mode)
                                     //   RE=1  (Ena Extended Regs, special mode for KS0073)
                                     //   BE=0  (Blink Enable, CG/SEG RAM, special mode for KS0073)                   
                                     //   LP=0  (LP=1 Low power mode, LP=0 Normal)                                                                                     

              _function_x = 0x00;   // Ext Function set 0000 1 FW BW NW (Ext Regs)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	64da      	str	r2, [r3, #76]	; 0x4c
                                    //   NW=0  (1,2 line), NW=1 (4 Line, special mode for KS0073)                                
              break;
 8000a20:	e003      	b.n	8000a2a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x226>

            default:
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 8000a22:	485b      	ldr	r0, [pc, #364]	; (8000b90 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x38c>)
 8000a24:	f003 fb4a 	bl	80040bc <error>
              break;                            
 8000a28:	bf00      	nop
          } // switch type

          // init special features
          _writeCommand(0x20 | _function_1);// Function set 001 DL N RE(1) BE LP (Ext Regs)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a2e:	f043 0320 	orr.w	r3, r3, #32
 8000a32:	4619      	mov	r1, r3
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f001 f825 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                           //    N=0 (1 line mode), N=1 (2 line mode)
                                           //   RE=1 (Ena Extended Regs, special mode for KS0073)
                                           //   BE=0 (Blink Enable/Disable, CG/SEG RAM, special mode for KS0073)                                
                                           //   LP=0  (LP=1 Low power mode, LP=0 Normal)                                                                                                                                

          _writeCommand(0x08 | _function_x); // Ext Function set 0000 1 FW BW NW (Ext Regs)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	4619      	mov	r1, r3
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f001 f81d 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                           //   FW=0  (5-dot font, special mode for KS0073)
                                           //   BW=0  (Cur BW invert disable, special mode for KS0073)
                                           //   NW=0  (1,2 Line), NW=1 (4 line, special mode for KS0073)                                

          _writeCommand(0x10);             // Scroll/Shift set 0001 DS/HS4 DS/HS3 DS/HS2 DS/HS1 (Ext Regs)
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f001 f819 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                           //   Dotscroll/Display shift enable (Special mode for KS0073)

          _writeCommand(0x80);             // Scroll Quantity set 1 0 SQ5 SQ4 SQ3 SQ2 SQ1 SQ0 (Ext Regs)
 8000a52:	2180      	movs	r1, #128	; 0x80
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f001 f815 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                           //   Scroll quantity (Special mode for KS0073)

          _writeCommand(0x20 | _function); // Function set 001 DL N RE(0) DH REV (Std Regs)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f043 0320 	orr.w	r3, r3, #32
 8000a62:	4619      	mov	r1, r3
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f001 f80d 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                           //   DL=0  (4 bits bus), DL=1 (8 bits mode)             
                                           //    N=0  (1 line mode), N=1 (2 line mode)
                                           //   RE=0  (Dis. Extended Regs, special mode for KS0073)
                                           //   DH=1  (Disp shift enable/disable, special mode for KS0073)                                
                                           //   REV=0 (Reverse/Normal, special mode for KS0073)
          break; // case KS0073 Controller
 8000a6a:	f000 beba 	b.w	80017e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfde>


      case KS0078:
          // Initialise Display configuration
          switch (_type) {
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	f5b3 3f05 	cmp.w	r3, #136192	; 0x21400
 8000a76:	d04e      	beq.n	8000b16 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x312>
 8000a78:	f5b3 3f05 	cmp.w	r3, #136192	; 0x21400
 8000a7c:	dc13      	bgt.n	8000aa6 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x2a2>
 8000a7e:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 8000a82:	d024      	beq.n	8000ace <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x2ca>
 8000a84:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 8000a88:	dc06      	bgt.n	8000a98 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x294>
 8000a8a:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
 8000a8e:	d01e      	beq.n	8000ace <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x2ca>
 8000a90:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 8000a94:	d01b      	beq.n	8000ace <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x2ca>
 8000a96:	e081      	b.n	8000b9c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x398>
 8000a98:	f5b3 3f02 	cmp.w	r3, #133120	; 0x20800
 8000a9c:	d03b      	beq.n	8000b16 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x312>
 8000a9e:	f5b3 3f04 	cmp.w	r3, #135168	; 0x21000
 8000aa2:	d038      	beq.n	8000b16 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x312>
 8000aa4:	e07a      	b.n	8000b9c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x398>
 8000aa6:	f5b3 3f0a 	cmp.w	r3, #141312	; 0x22800
 8000aaa:	d034      	beq.n	8000b16 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x312>
 8000aac:	f5b3 3f0a 	cmp.w	r3, #141312	; 0x22800
 8000ab0:	dc06      	bgt.n	8000ac0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x2bc>
 8000ab2:	f5b3 3f06 	cmp.w	r3, #137216	; 0x21800
 8000ab6:	d02e      	beq.n	8000b16 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x312>
 8000ab8:	f5b3 3f08 	cmp.w	r3, #139264	; 0x22000
 8000abc:	d02b      	beq.n	8000b16 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x312>
 8000abe:	e06d      	b.n	8000b9c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x398>
 8000ac0:	4a34      	ldr	r2, [pc, #208]	; (8000b94 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x390>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d003      	beq.n	8000ace <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x2ca>
 8000ac6:	4a34      	ldr	r2, [pc, #208]	; (8000b98 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x394>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d012      	beq.n	8000af2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x2ee>
 8000acc:	e066      	b.n	8000b9c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x398>
            case LCD8x2B:        //8x2B is a special case of 16x1
//            case LCD12x1:                                
            case LCD16x1:                                            
//            case LCD20x1:
            case LCD24x1:
              _function = dl | 0x02;    // Function set 001 DL N RE(0) DH REV (Std Regs)
 8000ace:	78fb      	ldrb	r3, [r7, #3]
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	645a      	str	r2, [r3, #68]	; 0x44
                                    //    N=0  (1 line mode), N=1 (2 line mode)
                                    //   RE=0  (Dis. Extended Regs, special mode for KS0078)
                                    //   DH=1  (Disp shift enable, special mode for KS0078)                                
                                    //   REV=0 (Reverse normal, special mode for KS0078)
                                    
              _function_1 = dl | 0x04;   // Function set 001 DL N RE(1) BE 0 (Ext Regs)
 8000adc:	78fb      	ldrb	r3, [r7, #3]
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	649a      	str	r2, [r3, #72]	; 0x48
                                    //    N=0  (1 line mode), N=1 (2 line mode)
                                    //   RE=1  (Ena Extended Regs, special mode for KS0078)
                                    //   BE=0  (Blink Enable, CG/SEG RAM, special mode for KS0078)                                
                                    //      0 

              _function_x = 0x00;   // Ext Function set 0000 1 FW BW NW (Ext Regs)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	64da      	str	r2, [r3, #76]	; 0x4c
                                    //    NW=0  (1,2 line), NW=1 (4 Line, special mode for KS0078)                                
              break;                                
 8000af0:	e058      	b.n	8000ba4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x3a0>
//            case LCD16x4D:         // Special mode for KS0073, KS0078            
//            case LCD20x4D:         // Special mode for KS0073, KS0078            
//            case LCD24x3D:         // Special mode for KS0078
//            case LCD24x3D1:        // Special mode for KS0078
            case LCD24x4D:         // Special mode for KS0078
              _function  = dl | 0x02;    // Function set 001 DL N RE(0) DH REV (Std Regs)
 8000af2:	78fb      	ldrb	r3, [r7, #3]
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	645a      	str	r2, [r3, #68]	; 0x44
                                    //    N=0  (dont care for 4 line mode)              
                                    //   RE=0  (Dis. Extended Regs, special mode for KS0078)
                                    //   DH=1  (Disp shift enable, special mode for KS0078)                                
                                    //   REV=0 (Reverse normal, special mode for KS0078)
                                    
              _function_1 = dl | 0x04;   // Function set 001 DL N RE(1) BE 0 (Ext Regs)
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	461a      	mov	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	649a      	str	r2, [r3, #72]	; 0x48
                                    //    N=0  (1 line mode), N=1 (2 line mode)
                                    //   RE=1  (Ena Extended Regs, special mode for KS0078)
                                    //   BE=0  (Blink Enable, CG/SEG RAM, special mode for KS0078)                                
                                    //      0 

              _function_x = 0x01;   // Ext Function set 0000 1 FW BW NW (Ext Regs)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2201      	movs	r2, #1
 8000b12:	64da      	str	r2, [r3, #76]	; 0x4c
                                    //    NW=0  (1,2 line), NW=1 (4 Line, special mode for KS0078)                                
              break;                                
 8000b14:	e046      	b.n	8000ba4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x3a0>
            case LCD20x2:
            case LCD24x2:
            case LCD32x2:           
            case LCD40x2:                       
              // All other LCD types are initialised as 2 Line displays (including LCD16x1C and LCD40x4)            
              _function  = dl | 0x0A;    // Function set 001 DL N RE(0) DH REV (Std Regs)
 8000b16:	78fb      	ldrb	r3, [r7, #3]
 8000b18:	f043 030a 	orr.w	r3, r3, #10
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	645a      	str	r2, [r3, #68]	; 0x44
                                    //    N=1  (1 line mode), N=1 (2 line mode)
                                    //   RE=0  (Dis. Extended Regs, special mode for KS0078)
                                    //   DH=1  (Disp shift enable, special mode for KS0078)                                
                                    //   REV=0 (Reverse normal, special mode for KS0078)
                                    
              _function_1 = dl | 0x0C;   // Function set 001 DL N RE(1) BE 0 (Ext Regs)
 8000b24:	78fb      	ldrb	r3, [r7, #3]
 8000b26:	f043 030c 	orr.w	r3, r3, #12
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	649a      	str	r2, [r3, #72]	; 0x48
                                    //    N=1  (1 line mode), N=1 (2 line mode)
                                    //   RE=1  (Ena Extended Regs, special mode for KS0078)
                                    //   BE=0  (Blink Enable, CG/SEG RAM, special mode for KS0078)                                
                                    //      0 

              _function_x = 0x00;   // Ext Function set 0000 1 FW BW NW (Ext Regs)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	64da      	str	r2, [r3, #76]	; 0x4c
                                    //   NW=0  (1,2 line), NW=1 (4 Line, special mode for KS0078)                                
              break;
 8000b38:	e034      	b.n	8000ba4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x3a0>
 8000b3a:	bf00      	nop
 8000b3c:	81030006 	.word	0x81030006
 8000b40:	21090019 	.word	0x21090019
 8000b44:	1102000d 	.word	0x1102000d
 8000b48:	09080017 	.word	0x09080017
 8000b4c:	21080003 	.word	0x21080003
 8000b50:	21080004 	.word	0x21080004
 8000b54:	81000005 	.word	0x81000005
 8000b58:	43000015 	.word	0x43000015
 8000b5c:	81000008 	.word	0x81000008
 8000b60:	81010007 	.word	0x81010007
 8000b64:	c1020011 	.word	0xc1020011
 8000b68:	8103200c 	.word	0x8103200c
 8000b6c:	8103000a 	.word	0x8103000a
 8000b70:	a10a0016 	.word	0xa10a0016
 8000b74:	a10b000e 	.word	0xa10b000e
 8000b78:	c1030013 	.word	0xc1030013
 8000b7c:	c1030012 	.word	0xc1030012
 8000b80:	c1030010 	.word	0xc1030010
 8000b84:	c503001a 	.word	0xc503001a
 8000b88:	03040c00 	.word	0x03040c00
 8000b8c:	03041400 	.word	0x03041400
 8000b90:	0800868c 	.word	0x0800868c
 8000b94:	01020800 	.word	0x01020800
 8000b98:	03041800 	.word	0x03041800

            default:
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 8000b9c:	48a1      	ldr	r0, [pc, #644]	; (8000e24 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x620>)
 8000b9e:	f003 fa8d 	bl	80040bc <error>
              break;                
 8000ba2:	bf00      	nop
          } // switch type

          // init special features
          _writeCommand(0x20 | _function_1);// Function set 001 DL N RE(1) BE 0 (Ext Regs)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ba8:	f043 0320 	orr.w	r3, r3, #32
 8000bac:	4619      	mov	r1, r3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 ff68 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                           //    N=0 (1 line mode), N=1 (2 line mode)
                                           //   RE=1 (Ena Extended Regs, special mode for KS0078)
                                           //   BE=0 (Blink Enable/Disable, CG/SEG RAM, special mode for KS0078)                                
                                           //      0 

          _writeCommand(0x08 | _function_x); // Ext Function set 0000 1 FW BW NW (Ext Regs)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f000 ff60 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                           //   FW=0  (5-dot font, special mode for KS0078)
                                           //   BW=0  (Cur BW invert disable, special mode for KS0078)
                                           //   NW=0  (1,2 Line), NW=1 (4 line, special mode for KS0078)                                

          _writeCommand(0x10);             // Scroll/Shift set 0001 DS/HS4 DS/HS3 DS/HS2 DS/HS1 (Ext Regs)
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 ff5c 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                           //   Dotscroll/Display shift enable (Special mode for KS0078)

          _writeCommand(0x80);             // Scroll Quantity set 1 0 SQ5 SQ4 SQ3 SQ2 SQ1 SQ0 (Ext Regs)
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 ff58 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                           //   Scroll quantity (Special mode for KS0078)

          _writeCommand(0x20 | _function); // Function set 001 DL N RE(0) DH REV (Std Regs)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd8:	f043 0320 	orr.w	r3, r3, #32
 8000bdc:	4619      	mov	r1, r3
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f000 ff50 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                           //   DL=0  (4 bits bus), DL=1 (8 bits mode)             
                                           //    N=0  (1 line mode), N=1 (2 line mode)
                                           //   RE=0  (Dis. Extended Regs, special mode for KS0078)
                                           //   DH=1  (Disp shift enable/disable, special mode for KS0078)                                
                                           //   REV=0 (Reverse/Normal, special mode for KS0078)
          break; // case KS0078 Controller
 8000be4:	f000 bdfd 	b.w	80017e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfde>
          // Note: very similar to SPLC792A
      case ST7032_5V:
          // ST7032 controller: Disable Voltage booster for VLCD. VDD=5V
      
          // Initialise Display configuration
          switch (_type) {
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a8e      	ldr	r2, [pc, #568]	; (8000e28 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x624>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d028      	beq.n	8000c44 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x440>
 8000bf2:	4a8d      	ldr	r2, [pc, #564]	; (8000e28 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x624>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	dc10      	bgt.n	8000c1a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x416>
 8000bf8:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 8000bfc:	d01e      	beq.n	8000c3c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x438>
 8000bfe:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 8000c02:	dc03      	bgt.n	8000c0c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x408>
 8000c04:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
 8000c08:	d018      	beq.n	8000c3c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x438>
 8000c0a:	e01f      	b.n	8000c4c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x448>
 8000c0c:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 8000c10:	d014      	beq.n	8000c3c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x438>
 8000c12:	4a86      	ldr	r2, [pc, #536]	; (8000e2c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x628>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d011      	beq.n	8000c3c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x438>
 8000c18:	e018      	b.n	8000c4c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x448>
 8000c1a:	4a85      	ldr	r2, [pc, #532]	; (8000e30 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x62c>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d011      	beq.n	8000c44 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x440>
 8000c20:	4a83      	ldr	r2, [pc, #524]	; (8000e30 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x62c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	dc03      	bgt.n	8000c2e <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x42a>
 8000c26:	4a83      	ldr	r2, [pc, #524]	; (8000e34 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x630>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d00b      	beq.n	8000c44 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x440>
 8000c2c:	e00e      	b.n	8000c4c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x448>
 8000c2e:	4a82      	ldr	r2, [pc, #520]	; (8000e38 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x634>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d007      	beq.n	8000c44 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x440>
 8000c34:	4a81      	ldr	r2, [pc, #516]	; (8000e3c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x638>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d004      	beq.n	8000c44 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x440>
 8000c3a:	e007      	b.n	8000c4c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x448>
            case LCD8x2B:        //8x2B is a special case of 16x1
//            case LCD12x1:                                
            case LCD16x1:                                            
//            case LCD20x1:                    
            case LCD24x1:
              _function = 0x00;       // FUNCTION SET 0 0 1 DL=0 (4 bit), N=0 (1-line display mode), F=0 (5*7dot), 0, IS
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	645a      	str	r2, [r3, #68]	; 0x44
                                      // Note: 4 bit mode is ignored for native SPI and I2C devices
                                      // Saved to allow switch between Instruction sets at later time
              break;  
 8000c42:	e007      	b.n	8000c54 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x450>
            case LCD12x3D:            // Special mode for KS0078 and PCF21XX
            case LCD12x3D1:           // Special mode for KS0078 and PCF21XX
            case LCD12x4D:            // Special mode for KS0078 and PCF21XX
            case LCD16x3G:            // Special mode for ST7036                        
            case LCD24x4D:            // Special mode for KS0078
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 8000c44:	4877      	ldr	r0, [pc, #476]	; (8000e24 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x620>)
 8000c46:	f003 fa39 	bl	80040bc <error>
              break;  
 8000c4a:	e003      	b.n	8000c54 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x450>

            default:
              // All other LCD types are initialised as 2 Line displays        
              _function = 0x08;       // FUNCTION SET 0 0 1 DL=0 (4 bit), N=1 (2-line display mode), F=0 (5*7dot), 0, IS              
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2208      	movs	r2, #8
 8000c50:	645a      	str	r2, [r3, #68]	; 0x44
                                      // Note: 4 bit mode is ignored for native SPI and I2C devices
                                      // Saved to allow switch between Instruction sets at later time
              break;                                                                        
 8000c52:	bf00      	nop
          } // switch type    
                                     
          // init special features 
          _writeCommand(0x20 | _function | 0x01);           // Set function,  0 0 1 DL N F 0 IS=1 Select Instr Set = 1              
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c58:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 ff10 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _writeCommand(0x1C);                              // Internal OSC frequency adjustment Framefreq=183HZ, Bias will be 1/4 (Instr Set=1)
 8000c64:	211c      	movs	r1, #28
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f000 ff0c 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                                            // Note: Bias and Osc register not available on SPLC792A 

          _contrast = LCD_ST7032_CONTRAST;              
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2228      	movs	r2, #40	; 0x28
 8000c70:	655a      	str	r2, [r3, #84]	; 0x54
          _writeCommand(0x70 | (_contrast & 0x0F));         // Set Contrast Low bits, 0 1 1 1 C3 C2 C1 C0 (IS=1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f000 feff 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>


          if (_ctrl == ST7032_3V3) {
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8a:	4a6d      	ldr	r2, [pc, #436]	; (8000e40 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x63c>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d103      	bne.n	8000c98 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x494>
//            _icon_power = 0x04;                             // Icon display off (Bit3=0), Booster circuit is turned on (Bit2=1) (IS=1)
            _icon_power = 0x0C;                             // Icon display on (Bit3=1), Booster circuit is turned on (Bit2=1)  (IS=1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	220c      	movs	r2, #12
 8000c94:	651a      	str	r2, [r3, #80]	; 0x50
 8000c96:	e002      	b.n	8000c9e <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x49a>
                                                            // Note: Booster circuit always on for SPLC792A, Bit2 is dont care
                                                            // Saved to allow contrast change at later time
          }
          else { 
//            _icon_power = 0x00;                             // Icon display off, Booster circuit is turned off  (IS=1)
            _icon_power = 0x08;                             // Icon display on, Booster circuit is turned off  (IS=1)            
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	651a      	str	r2, [r3, #80]	; 0x50
                                                            // Saved to allow contrast change at later time
          }
          _writeCommand(0x50 | _icon_power | ((_contrast >> 4) & 0x03));  // Set Icon, Booster and Contrast High bits, 0 1 0 1 Ion Bon C5 C4 (IS=1)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ca2:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000caa:	111b      	asrs	r3, r3, #4
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f000 fee5 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          wait_ms(10);            // Wait 10ms to ensure powered up
 8000cba:	200a      	movs	r0, #10
 8000cbc:	f004 f8f2 	bl	8004ea4 <wait_ms>
          
          _writeCommand(0x68 | (LCD_ST7032_RAB & 0x07));      // Voltage follower, 0 1 1 0 FOn=1, Ampl ratio Rab2=1, Rab1=0, Rab0=0  (IS=1)
 8000cc0:	216c      	movs	r1, #108	; 0x6c
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 fede 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          wait_ms(10);            // Wait 10ms to ensure powered up
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f004 f8eb 	bl	8004ea4 <wait_ms>
          
          _writeCommand(0x20 | _function);                  // Select Instruction Set = 0
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	f043 0320 	orr.w	r3, r3, #32
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f000 fed3 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          break; // case ST7032_3V3 Controller
 8000cde:	f000 bd80 	b.w	80017e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfde>
      case ST7036_5V:
          // ST7036 controller: Disable Voltage booster for VLCD. VDD=5V
          // Note: supports 1,2 (LCD_T_A) or 3 lines (LCD_T_G)
                    
          // Initialise Display configuration
          switch (_type) {
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	4a51      	ldr	r2, [pc, #324]	; (8000e2c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x628>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d016      	beq.n	8000d1a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x516>
 8000cec:	4a4f      	ldr	r2, [pc, #316]	; (8000e2c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x628>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	dc09      	bgt.n	8000d06 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x502>
 8000cf2:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 8000cf6:	d010      	beq.n	8000d1a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x516>
 8000cf8:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 8000cfc:	d00d      	beq.n	8000d1a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x516>
 8000cfe:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
 8000d02:	d00a      	beq.n	8000d1a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x516>
 8000d04:	e019      	b.n	8000d3a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x536>
 8000d06:	4a4a      	ldr	r2, [pc, #296]	; (8000e30 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x62c>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d012      	beq.n	8000d32 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x52e>
 8000d0c:	4a4b      	ldr	r2, [pc, #300]	; (8000e3c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x638>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d009      	beq.n	8000d26 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x522>
 8000d12:	4a48      	ldr	r2, [pc, #288]	; (8000e34 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x630>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d00c      	beq.n	8000d32 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x52e>
 8000d18:	e00f      	b.n	8000d3a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x536>
            case LCD8x1:         //8x1 is a regular 1 line display
            case LCD8x2B:        //8x2D is a special case of 16x1
//            case LCD12x1:                                
            case LCD16x1:   
            case LCD24x1:                                                                         
              _function = 0x00;     // Set function, 0 0 1 DL=0 (4-bit Databus), N=0 (1 Line), DH=0 (5x7font), IS2, IS1 (Select Instruction Set)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	645a      	str	r2, [r3, #68]	; 0x44
                                    // Note: 4 bit mode is ignored for native SPI and I2C devices
                                    // Saved to allow switch between Instruction sets at later time
              
              _bias_lines = 0x04;   // Bias: 1/5, 1 or 2-Lines LCD 
 8000d20:	2304      	movs	r3, #4
 8000d22:	60fb      	str	r3, [r7, #12]
              break;  
 8000d24:	e00f      	b.n	8000d46 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x542>

//            case LCD12x3G:          // Special mode for ST7036
            case LCD16x3G:          // Special mode for ST7036
              _function = 0x08;     // Set function, 0 0 1 DL=0 (4-bit Databus), N=1 (2 Line), DH=0 (5x7font), IS2,IS1 (Select Instruction Set)              
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2208      	movs	r2, #8
 8000d2a:	645a      	str	r2, [r3, #68]	; 0x44
                                    // Note: 4 bit mode is ignored for native SPI and I2C devices
                                    // Saved to allow switch between Instruction sets at later time
              
              _bias_lines = 0x05;   // Bias: 1/5, 3-Lines LCD           
 8000d2c:	2305      	movs	r3, #5
 8000d2e:	60fb      	str	r3, [r7, #12]
              break;  
 8000d30:	e009      	b.n	8000d46 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x542>

//            case LCD12x3D1:           // Special mode for KS0078 and PCF21XX
//            case LCD16x3D1:           // Special mode for SSD1803
            case LCD12x4D:            // Special mode for PCF2116
            case LCD24x4D:            // Special mode for KS0078
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 8000d32:	483c      	ldr	r0, [pc, #240]	; (8000e24 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x620>)
 8000d34:	f003 f9c2 	bl	80040bc <error>
              break;  
 8000d38:	e005      	b.n	8000d46 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x542>

            default:
              // All other LCD types are initialised as 2 Line displays (including LCD16x1C and LCD40x4)       
              _function = 0x08;     // Set function, 0 0 1 DL=0 (4-bit Databus), N=1 (2 Line), DH=0 (5x7font), IS2,IS1 (Select Instruction Set)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2208      	movs	r2, #8
 8000d3e:	645a      	str	r2, [r3, #68]	; 0x44
                                    // Note: 4 bit mode is ignored for native SPI and I2C devices
                                    // Saved to allow switch between Instruction sets at later time
              
              _bias_lines = 0x04;   // Bias: 1/5, 1 or 2-Lines LCD 
 8000d40:	2304      	movs	r3, #4
 8000d42:	60fb      	str	r3, [r7, #12]
              break;                
 8000d44:	bf00      	nop
          } // switch type


          // init special features 
          _writeCommand(0x20 | _function | 0x01);   // Set function, IS2,IS1 = 01 (Select Instr Set = 1)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8000d4e:	4619      	mov	r1, r3
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f000 fe97 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          _writeCommand(0x10 | _bias_lines);        // Set Bias and 1,2 or 3 lines (Instr Set 1)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 fe90 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _contrast = LCD_ST7036_CONTRAST;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2228      	movs	r2, #40	; 0x28
 8000d68:	655a      	str	r2, [r3, #84]	; 0x54
          _writeCommand(0x70 | (_contrast & 0x0F)); // Set Contrast, 0 1 1 1 C3 C2 C1 C0 (Instr Set 1)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000d76:	4619      	mov	r1, r3
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f000 fe83 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                           
          if (_ctrl == ST7036_3V3) {
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d82:	4a30      	ldr	r2, [pc, #192]	; (8000e44 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x640>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d103      	bne.n	8000d90 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x58c>
            _icon_power = 0x0C;                       // Set Icon, Booster, Contrast High bits, 0 1 0 1 Ion=1 Bon=1 C5 C4 (Instr Set 1)            
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	651a      	str	r2, [r3, #80]	; 0x50
 8000d8e:	e002      	b.n	8000d96 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x592>
//            _icon_power = 0x04;                       // Set Icon, Booster, Contrast High bits, 0 1 0 1 Ion=0 Bon=1 C5 C4 (Instr Set 1)
                                                      // Saved to allow contrast change at later time
          } 
          else {
            _icon_power = 0x08;                       // Set Icon, Booster, Contrast High bits, 0 1 0 1 Ion=1 Bon=0 C5 C4 (Instr Set 1)             
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2208      	movs	r2, #8
 8000d94:	651a      	str	r2, [r3, #80]	; 0x50
//            _icon_power = 0x00;                       // Set Icon, Booster, Contrast High bits, 0 1 0 1 Ion=0 Bon=0 C5 C4 (Instr Set 1)                         
          }
          
          _writeCommand(0x50 | _icon_power | ((_contrast >> 4) & 0x03));   // Set Contrast C5, C4 (Instr Set 1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d9a:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000da2:	111b      	asrs	r3, r3, #4
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	4313      	orrs	r3, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 fe69 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          wait_ms(10);            // Wait 10ms to ensure powered up
 8000db2:	200a      	movs	r0, #10
 8000db4:	f004 f876 	bl	8004ea4 <wait_ms>

          _writeCommand(0x68 | (LCD_ST7036_RAB & 0x07));  // Voltagefollower On = 1, Ampl ratio Rab2, Rab1, Rab0 = 1 0 1 (Instr Set 1)
 8000db8:	216c      	movs	r1, #108	; 0x6c
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 fe62 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          wait_ms(10);            // Wait 10ms to ensure powered up
 8000dc0:	200a      	movs	r0, #10
 8000dc2:	f004 f86f 	bl	8004ea4 <wait_ms>

          _writeCommand(0x20 | _function);          // Set function, IS2,IS1 = 00 (Select Instruction Set = 0)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f043 0320 	orr.w	r3, r3, #32
 8000dce:	4619      	mov	r1, r3
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 fe57 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
         
          break; // case ST7036_3V3 Controller
 8000dd6:	f000 bd04 	b.w	80017e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfde>
                 // case ST7036_5V Controller

      case ST7070:                   
          // Initialise Display configuration
          switch (_type) {
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x628>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d016      	beq.n	8000e12 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x60e>
 8000de4:	4a11      	ldr	r2, [pc, #68]	; (8000e2c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x628>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	dc09      	bgt.n	8000dfe <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x5fa>
 8000dea:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 8000dee:	d010      	beq.n	8000e12 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x60e>
 8000df0:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 8000df4:	d00d      	beq.n	8000e12 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x60e>
 8000df6:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
 8000dfa:	d00a      	beq.n	8000e12 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x60e>
 8000dfc:	e024      	b.n	8000e48 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x644>
 8000dfe:	4a0c      	ldr	r2, [pc, #48]	; (8000e30 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x62c>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d00a      	beq.n	8000e1a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x616>
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x638>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d007      	beq.n	8000e1a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x616>
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x630>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d004      	beq.n	8000e1a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x616>
 8000e10:	e01a      	b.n	8000e48 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x644>
            case LCD8x1:         //8x1 is a regular 1 line display
            case LCD8x2B:        //8x2D is a special case of 16x1
//            case LCD12x1:                                
            case LCD16x1:   
            case LCD24x1:                                                                         
              _function = dl | 0x00;      // Set function, 0 0 1 DL=0 (4-bit Databus), N=0 (1 Line), EXT=0, x, x 
 8000e12:	78fa      	ldrb	r2, [r7, #3]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	645a      	str	r2, [r3, #68]	; 0x44
                                          // Note: 4 bit mode is NOT ignored for native SPI !
                                          // Saved to allow switch between Instruction sets at later time
              break;  
 8000e18:	e01e      	b.n	8000e58 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x654>
//            case LCD16x3D1:           // Special mode for SSD1803
            case LCD12x4D:            // Special mode for PCF2116
            case LCD24x4D:            // Special mode for KS0078
//            case LCD12x3G:          // Special mode for ST7036
            case LCD16x3G:          // Special mode for ST7036           
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 8000e1a:	4802      	ldr	r0, [pc, #8]	; (8000e24 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x620>)
 8000e1c:	f003 f94e 	bl	80040bc <error>
              break;  
 8000e20:	e01a      	b.n	8000e58 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x654>
 8000e22:	bf00      	nop
 8000e24:	0800868c 	.word	0x0800868c
 8000e28:	03030c00 	.word	0x03030c00
 8000e2c:	01020800 	.word	0x01020800
 8000e30:	03041800 	.word	0x03041800
 8000e34:	03040c00 	.word	0x03040c00
 8000e38:	04030c00 	.word	0x04030c00
 8000e3c:	07031000 	.word	0x07031000
 8000e40:	c1030010 	.word	0xc1030010
 8000e44:	c1030012 	.word	0xc1030012

            default:
              // All other LCD types are initialised as 2 Line displays (including LCD16x1C and LCD40x4)       
              _function = dl | 0x08;   // Set function, 0 0 1 DL, N=1 (2 Line), EXT=0, x, x                                                                 
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	645a      	str	r2, [r3, #68]	; 0x44
                                       // Note: 4 bit mode is NOT ignored for native SPI !
                                       // Saved to allow switch between Instruction sets at later time
              break;                
 8000e56:	bf00      	nop
          } // switch type

//          _writeCommand(0x00);                      // NOP, make sure to sync SPI
          
          // init special features                                                    
          _writeCommand(0x20 | _function | 0x04);   // Set function, 0 0 1 DL N EXT=1 x x (Select Instr Set = 1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5c:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 fe0e 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _writeCommand(0x04 | 0x00);               // Set Bias resistors  0 0 0 0 0 1 Rb1,Rb0= 0 0 (Extern Res) (Instr Set 1)
 8000e68:	2104      	movs	r1, #4
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 fe0a 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _writeCommand(0x40 | 0x00);               // COM/SEG directions 0 1 0 0 C1, C2, S1, S2  (Instr Set 1)
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 fe06 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                                    // C1=1: Com1-8 -> Com8-1;   C2=1: Com9-16 -> Com16-9
                                                    // S1=1: Seg1-40 -> Seg40-1; S2=1: Seg41-80 -> Seg80-41                                                    
          
          _writeCommand(0x20 | _function);          // Set function, EXT=0 (Select Instr Set = 0)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7c:	f043 0320 	orr.w	r3, r3, #32
 8000e80:	4619      	mov	r1, r3
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 fdfe 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
         
          break; // case ST7070 Controller
 8000e88:	f000 bcab 	b.w	80017e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfde>
          // Note: supports 1,2, 3 or 4 lines
//      case SSD1803_5V:
          // SSD1803 controller: No Voltage booster for VLCD. VDD=5V
                    
          // Initialise Display configuration
          switch (_type) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4aaf      	ldr	r2, [pc, #700]	; (8001150 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x94c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d030      	beq.n	8000ef8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x6f4>
 8000e96:	4aae      	ldr	r2, [pc, #696]	; (8001150 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x94c>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	dc10      	bgt.n	8000ebe <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x6ba>
 8000e9c:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 8000ea0:	d021      	beq.n	8000ee6 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x6e2>
 8000ea2:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 8000ea6:	dc03      	bgt.n	8000eb0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x6ac>
 8000ea8:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
 8000eac:	d01b      	beq.n	8000ee6 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x6e2>
 8000eae:	e039      	b.n	8000f24 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x720>
 8000eb0:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 8000eb4:	d017      	beq.n	8000ee6 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x6e2>
 8000eb6:	4aa7      	ldr	r2, [pc, #668]	; (8001154 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x950>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d014      	beq.n	8000ee6 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x6e2>
 8000ebc:	e032      	b.n	8000f24 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x720>
 8000ebe:	4aa6      	ldr	r2, [pc, #664]	; (8001158 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x954>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d022      	beq.n	8000f0a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x706>
 8000ec4:	4aa4      	ldr	r2, [pc, #656]	; (8001158 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x954>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	dc06      	bgt.n	8000ed8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x6d4>
 8000eca:	4aa4      	ldr	r2, [pc, #656]	; (800115c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x958>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d013      	beq.n	8000ef8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x6f4>
 8000ed0:	4aa3      	ldr	r2, [pc, #652]	; (8001160 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x95c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d019      	beq.n	8000f0a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x706>
 8000ed6:	e025      	b.n	8000f24 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x720>
 8000ed8:	4aa2      	ldr	r2, [pc, #648]	; (8001164 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x960>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d01e      	beq.n	8000f1c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x718>
 8000ede:	4aa2      	ldr	r2, [pc, #648]	; (8001168 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x964>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d01b      	beq.n	8000f1c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x718>
 8000ee4:	e01e      	b.n	8000f24 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x720>
            case LCD8x1:         //8x1 is a regular 1 line display
            case LCD8x2B:        //8x2D is a special case of 16x1
//            case LCD12x1:                                
            case LCD16x1:   
            case LCD24x1:                                                                         
              _function = 0x00;     //  Set function 0 0 1 DL N DH RE(0) IS 
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	645a      	str	r2, [r3, #68]	; 0x44
                                    //         Note: 4 bit mode is ignored for native SPI and I2C devices
                                    //     N=0 1 Line / 3 Line
                                    //    DH=0 Double Height disable 
                                    //    IS=0
          
              _function_1 = 0x02;   // Set function, 0 0 1 DL N BE RE(1) REV
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2202      	movs	r2, #2
 8000ef0:	649a      	str	r2, [r3, #72]	; 0x48
                                    //         Note: 4 bit mode is ignored for native SPI and I2C devices
                                    //     N=0 1 Line / 3 Line
                                    //    BE=0 Blink Enable off, special feature of SSD1803
                                    //   REV=0 Reverse off, special feature of SSD1803            
                        
              _lines = 0x00;        // Ext function set 0 0 0 0 1 FW BW NW 
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
                                    //    NW=0 1-Line LCD (N=0)
              break;  
 8000ef6:	e01e      	b.n	8000f36 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x732>
            case LCD12x3D:          // Special mode for KS0078 and PCF21XX                                  
//            case LCD12x3D1:           // Special mode for KS0078 and PCF21XX            
            case LCD16x3D:          // Special mode for KS0078
//            case LCD16x3D1:           // Special mode for SSD1803
//            case LCD20x3D:            // Special mode for SSD1803
              _function = 0x00;     //  Set function 0 0 1 DL N DH RE(0) IS 
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	645a      	str	r2, [r3, #68]	; 0x44
                                    //         Note: 4 bit mode is ignored for native SPI and I2C devices
                                    //     N=0 1 Line / 3 Line
                                    //    DH=0 Double Height disable 
                                    //    IS=0
          
              _function_1 = 0x02;   // Set function, 0 0 1 DL N BE RE(1) REV
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2202      	movs	r2, #2
 8000f02:	649a      	str	r2, [r3, #72]	; 0x48
                                    //         Note: 4 bit mode is ignored for native SPI and I2C devices
                                    //     N=0 1 Line / 3 Line
                                    //    BE=0 Blink Enable off, special feature of SSD1803
                                    //   REV=0 Reverse off, special feature of SSD1803            
                        
              _lines = 0x00;        // Ext function set 0 0 0 0 1 FW BW NW 
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
                                    //    NW=1 3-Line LCD (N=0)
              break;  
 8000f08:	e015      	b.n	8000f36 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x732>

//            case LCD10x2D:          // Special mode for SSD1803, 4-line mode but switch to double height font
            case LCD10x4D:          // Special mode for SSD1803
            case LCD20x4D:          // Special mode for SSD1803
              _function = 0x08;     //  Set function 0 0 1 DL N DH RE(0) IS 
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	645a      	str	r2, [r3, #68]	; 0x44
                                    //         Note: 4 bit mode is ignored for native SPI and I2C devices
                                    //     N=1 4 Line
                                    //    DH=0 Double Height disable 
                                    //    IS=0
          
              _function_1 = 0x0A;   // Set function, 0 0 1 DL N BE RE(1) REV
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	220a      	movs	r2, #10
 8000f14:	649a      	str	r2, [r3, #72]	; 0x48
                                    //         Note: 4 bit mode is ignored for native SPI and I2C devices
                                    //     N=1 4 Line
                                    //    BE=0 Blink Enable off, special feature of SSD1803
                                    //   REV=0 Reverse off, special feature of SSD1803            
                        
              _lines = 0x01;        // Ext function set 0 0 0 0 1 FW BW NW 
 8000f16:	2301      	movs	r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
                                    //    NW=1 4-Line LCD (N=1)
              break;  
 8000f1a:	e00c      	b.n	8000f36 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x732>

            case LCD16x3G:          // Special mode for ST7036            
            case LCD24x4D:          // Special mode for KS0078
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 8000f1c:	4893      	ldr	r0, [pc, #588]	; (800116c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x968>)
 8000f1e:	f003 f8cd 	bl	80040bc <error>
              break;  
 8000f22:	e008      	b.n	8000f36 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x732>

            default:
              // All other LCD types are initialised as 2 Line displays (including LCD16x1C and LCD40x4)       
              _function = 0x08;     //  Set function 0 0 1 DL N DH RE(0) IS 
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2208      	movs	r2, #8
 8000f28:	645a      	str	r2, [r3, #68]	; 0x44
                                    //     N=1 2 line / 4 Line
                                    //    DH=0 Double Height disable 
                                    //    RE=0
                                    //    IS=0
          
              _function_1 = 0x0A;   // Set function, 0 0 1 DL N BE RE(1) REV
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	220a      	movs	r2, #10
 8000f2e:	649a      	str	r2, [r3, #72]	; 0x48
                                    //     N=1 2 line / 4 Line
                                    //    BE=0 Blink Enable off, special feature of SSD1803
                                    //    RE=1
                                    //   REV=0 Reverse off, special feature of SSD1803            
                        
              _lines = 0x00;        // Ext function set 0 0 0 0 1 FW BW NW 
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
                                    //    NW=0 2-Line LCD (N=1)
              break;                
 8000f34:	bf00      	nop
          } // switch type


          // init special features 
          _writeCommand(0x20 | _function_1);        // Set function, 0 0 1 DL N BE RE(1) REV 
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f3a:	f043 0320 	orr.w	r3, r3, #32
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 fd9f 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                                    // Select Extended Instruction Set
          
          _writeCommand(0x06);                      // Set ext entry mode, 0 0 0 0 0 1 BDC=1 COM1-32, BDS=0 SEG100-1    "Bottom View" (Ext Instr Set)
 8000f46:	2106      	movs	r1, #6
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 fd9b 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
//          _writeCommand(0x05);                      // Set ext entry mode, 0 0 0 0 0 1 BDC=0 COM32-1, BDS=1 SEG1-100    "Top View" (Ext Instr Set)          
          wait_ms(5);                               // Wait to ensure completion or SSD1803 fails to set Top/Bottom after reset..
 8000f4e:	2005      	movs	r0, #5
 8000f50:	f003 ffa8 	bl	8004ea4 <wait_ms>
         
          _writeCommand(0x08 | _lines);             // Set ext function 0 0 0 0 1 FW BW NW 1,2,3 or 4 lines (Ext Instr Set)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	f043 0308 	orr.w	r3, r3, #8
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 fd91 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _writeCommand(0x10);                      // Double Height and Bias, 0 0 0 1 UD2=0, UD1=0, BS1=0 Bias 1/5, DH=0 (Ext Instr Set)
 8000f62:	2110      	movs	r1, #16
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 fd8d 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

//          _writeCommand(0x76);                      // Set TC Control, 0 1 1 1 0 1 1 0 (Ext Instr Set)
//          _writeData(0x02);                         // Set TC data,    0 0 0 0 0 TC2,TC1,TC0 = 0 1 0 (Ext Instr Set)

          _writeCommand(0x20 | _function | 0x01);   // Set function, 0 0 1 DL N DH RE(0) IS=1 Select Instruction Set 1
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8000f72:	4619      	mov	r1, r3
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 fd85 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                                    // Select Std Instr set, Select IS=1  

          _contrast = LCD_SSD1_CONTRAST;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2228      	movs	r2, #40	; 0x28
 8000f7e:	655a      	str	r2, [r3, #84]	; 0x54
          _writeCommand(0x70 | (_contrast & 0x0F)); // Set Contrast 0 1 1 1 C3, C2, C1, C0 (Instr Set 1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 fd78 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                           
//          _icon_power = 0x04;                       // Icon off, Booster on (Instr Set 1)
          _icon_power = 0x0C;                       // Icon on, Booster on (Instr Set 1)          
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	220c      	movs	r2, #12
 8000f98:	651a      	str	r2, [r3, #80]	; 0x50
                                                    // Saved to allow contrast change at later time
          _writeCommand(0x50 | _icon_power | ((_contrast >> 4) & 0x03));   // Set Power, Icon and Contrast, 0 1 0 1 Ion Bon C5 C4 (Instr Set 1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f9e:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa6:	111b      	asrs	r3, r3, #4
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 fd67 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          wait_ms(10);            // Wait 10ms to ensure powered up
 8000fb6:	200a      	movs	r0, #10
 8000fb8:	f003 ff74 	bl	8004ea4 <wait_ms>

          _writeCommand(0x68 | (LCD_SSD1_RAB & 0x07));  // Set Voltagefollower 0 1 1 0 Don = 1, Ampl ratio Rab2, Rab1, Rab0 = 1 1 0  (Instr Set 1)
 8000fbc:	216e      	movs	r1, #110	; 0x6e
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 fd60 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          wait_ms(10);            // Wait 10ms to ensure powered up
 8000fc4:	200a      	movs	r0, #10
 8000fc6:	f003 ff6d 	bl	8004ea4 <wait_ms>

          _writeCommand(0x20 | _function_1);        // Set function, 0 0 1 DL N BE RE(1) REV 
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fce:	f043 0320 	orr.w	r3, r3, #32
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 fd55 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                                    // Select Extended Instruction Set 1
          _writeCommand(0x10);                      // Shift/Scroll enable, 0 0 0 1 DS4/HS4 DS3/HS3 DS2/HS2 DS1/HS1  (Ext Instr Set 1)
 8000fda:	2110      	movs	r1, #16
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 fd51 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>


          _writeCommand(0x20 | _function);          // Set function, 0 0 1 DL N DH RE(0) IS=0 Select Instruction Set 0
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f043 0320 	orr.w	r3, r3, #32
 8000fea:	4619      	mov	r1, r3
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 fd49 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                                    // Select Std Instr set, Select IS=0
         
          break; // case SSD1803 Controller
 8000ff2:	e3f6      	b.n	80017e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfde>
      // Note6: See datasheet, the PCF21XX-C and PCF21XX-K use a non-standard character set. This may result is strange looking text when not corrected..

      case PCF2103_3V3:
          // PCF2103 controller: No Voltage generator for VLCD, VDD=3V3..5V, VLCD input controls contrast voltage.                 
          // Initialise Display configuration
          switch (_type) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 8000ffc:	d003      	beq.n	8001006 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x802>
 8000ffe:	f5b3 3f03 	cmp.w	r3, #134144	; 0x20c00
 8001002:	d004      	beq.n	800100e <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x80a>
 8001004:	e007      	b.n	8001016 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x812>
            case LCD24x1:                    
              _function = 0x00;       //FUNCTION SET 0 0 1 DL=0 4-bit, 0, M=0 1-line/24 chars display mode, 0, H=0 
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	645a      	str	r2, [r3, #68]	; 0x44
                                      //Note: 4 bit mode is ignored for I2C mode
              break;  
 800100c:	e007      	b.n	800101e <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x81a>

//            case LCD12x1D:            //Special mode for PCF21XX, Only top line used
            case LCD12x2:
              _function = 0x04;       //FUNCTION SET 0 0 1 DL=0 4-bit, 0, M=1 2-line/12 chars display mode, 0, H=0
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2204      	movs	r2, #4
 8001012:	645a      	str	r2, [r3, #68]	; 0x44
                                      //Note: 4 bit mode is ignored for I2C mode
              break;  
 8001014:	e003      	b.n	800101e <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x81a>
              
            default:
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 8001016:	4855      	ldr	r0, [pc, #340]	; (800116c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x968>)
 8001018:	f003 f850 	bl	80040bc <error>
              break;  
 800101c:	bf00      	nop
            
          } // switch type    

          _writeCommand(0x20 | _function | 0x01);          // Set function, Select Instr Set = 1              
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 fd2b 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          wait_ms(10);            // Wait 10ms to ensure powered up                                                    
 800102e:	200a      	movs	r0, #10
 8001030:	f003 ff38 	bl	8004ea4 <wait_ms>

// Note: Display from GA628 shows 12 chars. This is actually the right half of a 24x1 display. The commons have been connected in reverse order.
          _writeCommand(0x05);                             // Display Conf Set         0000 0, 1, P=0, Q=1               (Instr. Set 1)
 8001034:	2105      	movs	r1, #5
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 fd24 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                                        
          _writeCommand(0x02);                             // Screen Config            0000 001, L=0  (Instr. Set 1)
 800103c:	2102      	movs	r1, #2
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 fd20 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          _writeCommand(0x08);                             // ICON Conf                0000 1, IM=0 (Char mode), IB=0 (no Icon blink), 0 (Instr. Set 1) 
 8001044:	2108      	movs	r1, #8
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 fd1c 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _writeCommand(0x20 | _function);                 // Set function, Select Instr Set = 0             
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001050:	f043 0320 	orr.w	r3, r3, #32
 8001054:	4619      	mov	r1, r3
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 fd14 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          for (int i=0; i<(8 * 8); i++) {
//            _writeData(0x1F);  // All On
            _writeData(0x00);  // All Off            
          }
#endif
          break; // case PCF2103_3V3 Controller
 800105c:	e3c1      	b.n	80017e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfde>

      case PCF2113_3V3:
          // PCF2113 controller: Initialise Voltage booster for VLCD. VDD=3V3. VA and VB control contrast.
          // Initialise Display configuration
          switch (_type) {
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 8001066:	d003      	beq.n	8001070 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x86c>
 8001068:	f5b3 3f03 	cmp.w	r3, #134144	; 0x20c00
 800106c:	d004      	beq.n	8001078 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x874>
 800106e:	e007      	b.n	8001080 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x87c>
//            case LCD12x1:                                
//              _function = 0x02;       // FUNCTION SET 0 0 1 DL=0 4 bit, 0, M=0 1-line/12 chars display mode, SL=1, IS=0
                                      // Note: 4 bit mode is ignored for I2C mode
            case LCD24x1:                    
              _function = 0x00;       // FUNCTION SET 0 0 1 DL=0 4 bit, 0, M=0 1-line/24 chars display mode, SL=0, IS=0            
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	645a      	str	r2, [r3, #68]	; 0x44
                                      // Note: 4 bit mode is ignored for I2C mode
              break;  
 8001076:	e007      	b.n	8001088 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x884>

            case LCD12x2:                    
              _function = 0x04;       // FUNCTION SET 0 0 1 DL=0 4 bit, 0, M=1 2-line/12 chars display mode, SL=0, IS=0            
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2204      	movs	r2, #4
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
              break;  
 800107e:	e003      	b.n	8001088 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x884>
             
            default:
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 8001080:	483a      	ldr	r0, [pc, #232]	; (800116c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x968>)
 8001082:	f003 f81b 	bl	80040bc <error>
              break;  
 8001086:	bf00      	nop
                         
          } // switch type    

          // Init special features
          _writeCommand(0x20 | _function | 0x01);          // Set function, Select Instr Set = 1              
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108c:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 fcf6 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _writeCommand(0x04);                             // Display Conf Set         0000 0, 1, P=0, Q=0               (Instr. Set 1)
 8001098:	2104      	movs	r1, #4
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 fcf2 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          _writeCommand(0x10);                             // Temp Compensation Set    0001 0, 0, TC1=0, TC2=0           (Instr. Set 1)
 80010a0:	2110      	movs	r1, #16
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fcee 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
//          _writeCommand(0x42);                             // HV GEN                   0100 S1=1, S2=0 (2x multiplier)   (Instr. Set 1)
          _writeCommand(0x40 | (LCD_PCF2_S12 & 0x03));     // HV Gen                   0100 S1=1, S2=0 (2x multiplier)   (Instr. Set 1)
 80010a8:	2142      	movs	r1, #66	; 0x42
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 fcea 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          
          _contrast = LCD_PCF2_CONTRAST;              
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2220      	movs	r2, #32
 80010b4:	655a      	str	r2, [r3, #84]	; 0x54
          _writeCommand(0x80 | 0x00 | (_contrast & 0x3F));      // VLCD_set (Instr. Set 1)  1, V=0, VA=contrast
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c2:	4619      	mov	r1, r3
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 fcdd 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          _writeCommand(0x80 | 0x40 | (_contrast & 0x3F));      // VLCD_set (Instr. Set 1)  1, V=1, VB=contrast
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010d4:	4619      	mov	r1, r3
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fcd4 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          wait_ms(10);            // Wait 10ms to ensure powered up
 80010dc:	200a      	movs	r0, #10
 80010de:	f003 fee1 	bl	8004ea4 <wait_ms>
          
          _writeCommand(0x02);                             // Screen Config            0000 001, L=0  (Instr. Set 1)
 80010e2:	2102      	movs	r1, #2
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 fccd 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          _writeCommand(0x08);                             // ICON Conf                0000 1, IM=0 (Char mode), IB=0 (no icon blink) DM=0 (no direct mode) (Instr. Set 1) 
 80010ea:	2108      	movs	r1, #8
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 fcc9 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _writeCommand(0x20 | _function);                 // Set function, Select Instr Set = 0             
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f043 0320 	orr.w	r3, r3, #32
 80010fa:	4619      	mov	r1, r3
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 fcc1 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          break; // case PCF2113_3V3 Controller
 8001102:	e36e      	b.n	80017e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfde>


      case PCF2116_3V3:
          // PCF2116 controller: Voltage generator for VLCD. VDD=5V. V0 controls contrast voltage.                 
          // Initialise Display configuration
          switch (_type) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a11      	ldr	r2, [pc, #68]	; (8001150 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x94c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d018      	beq.n	8001140 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x93c>
 800110e:	4a10      	ldr	r2, [pc, #64]	; (8001150 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x94c>)
 8001110:	4293      	cmp	r3, r2
 8001112:	dc06      	bgt.n	8001122 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x91e>
 8001114:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 8001118:	d00a      	beq.n	8001130 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x92c>
 800111a:	f5b3 3f06 	cmp.w	r3, #137216	; 0x21800
 800111e:	d02b      	beq.n	8001178 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x974>
 8001120:	e032      	b.n	8001188 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x984>
 8001122:	4a13      	ldr	r2, [pc, #76]	; (8001170 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x96c>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d00b      	beq.n	8001140 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x93c>
 8001128:	4a12      	ldr	r2, [pc, #72]	; (8001174 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x970>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d008      	beq.n	8001140 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x93c>
 800112e:	e02b      	b.n	8001188 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x984>
//            case LCD12x1:
//            case LCD12x2:                                                                            
            case LCD24x1:                    
              _writeCommand(0x22);    //FUNCTION SET 0 0 1 DL=0 4-bit, N=0/M=0 1-line/24 chars display mode, G=1 Vgen on, 0 
 8001130:	2122      	movs	r1, #34	; 0x22
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 fca6 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                      //Note: 4 bit mode is ignored for I2C mode
              wait_ms(10);            // Wait 10ms to ensure powered up                                                    
 8001138:	200a      	movs	r0, #10
 800113a:	f003 feb3 	bl	8004ea4 <wait_ms>
              break;  
 800113e:	e027      	b.n	8001190 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x98c>

            case LCD12x3D:            // Special mode for KS0078 and PCF21XX                            
            case LCD12x3D1:           // Special mode for PCF21XX                     
            case LCD12x4D:            // Special mode for PCF21XX:
              _writeCommand(0x2E);    //FUNCTION SET 0 0 1 DL=0 4-bit, N=1/M=1 4-line/12 chars display mode, G=1 VGen on, 0                               
 8001140:	212e      	movs	r1, #46	; 0x2e
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 fc9e 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                      //Note: 4 bit mode is ignored for I2C mode              
              wait_ms(10);            // Wait 10ms to ensure powered up                                                    
 8001148:	200a      	movs	r0, #10
 800114a:	f003 feab 	bl	8004ea4 <wait_ms>
              break;  
 800114e:	e01f      	b.n	8001190 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x98c>
 8001150:	03030c00 	.word	0x03030c00
 8001154:	01020800 	.word	0x01020800
 8001158:	03041400 	.word	0x03041400
 800115c:	03031000 	.word	0x03031000
 8001160:	03040a00 	.word	0x03040a00
 8001164:	03041800 	.word	0x03041800
 8001168:	07031000 	.word	0x07031000
 800116c:	0800868c 	.word	0x0800868c
 8001170:	03040c00 	.word	0x03040c00
 8001174:	04030c00 	.word	0x04030c00

            case LCD24x2:
              _writeCommand(0x2A);    //FUNCTION SET 0 0 1 DL=0 4-bit, N=1/M=0 2-line/24 chars display mode, G=1 VGen on, 0
 8001178:	212a      	movs	r1, #42	; 0x2a
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 fc82 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                      //Note: 4 bit mode is ignored for I2C mode
              wait_ms(10);            // Wait 10ms to ensure powered up   
 8001180:	200a      	movs	r0, #10
 8001182:	f003 fe8f 	bl	8004ea4 <wait_ms>
              break;  
 8001186:	e003      	b.n	8001190 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x98c>
              
            default:
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 8001188:	488a      	ldr	r0, [pc, #552]	; (80013b4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbb0>)
 800118a:	f002 ff97 	bl	80040bc <error>
              break;  
 800118e:	bf00      	nop
            
          } // switch type    

          break; // case PCF2116_3V3 Controller
 8001190:	e327      	b.n	80017e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfde>
//Experimental for cellphone 3-line display, SA=0x74, No Ack supported, Character set C or K, DL = 8 bit, N=0,M=1 (reserved mode !!), external VLCD -2V5
//@TODO                            
      case PCF2116_5V:
          // PCF2116 controller: No Voltage generator for VLCD. VDD=5V. V0 controls contrast voltage.                           
          // Initialise Display configuration
          switch (_type) {
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	4a88      	ldr	r2, [pc, #544]	; (80013b8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbb4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d005      	beq.n	80011a8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x9a4>
 800119c:	4a87      	ldr	r2, [pc, #540]	; (80013bc <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbb8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d002      	beq.n	80011a8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x9a4>
 80011a2:	4a87      	ldr	r2, [pc, #540]	; (80013c0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbbc>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d107      	bne.n	80011b8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x9b4>
            case LCD12x3D:            // Special mode for KS0078 and PCF21XX                            
            case LCD12x3D1:           // Special mode for PCF21XX                     
            case LCD12x4D:            // Special mode for PCF21XX:
//              _writeCommand(0x34);    //FUNCTION SET 8 bit, N=0/M=1 4-line/12 chars display mode      OK
//              _writeCommand(0x24);    //FUNCTION SET 4 bit, N=0/M=1 4-line/12 chars display mode      OK                                            
              _writeCommand(0x2C);    //FUNCTION SET 0 0 1 DL=0 4-bit, N=1/M=1 4-line/12 chars display mode, G=0 no Vgen, 0  OK       
 80011a8:	212c      	movs	r1, #44	; 0x2c
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 fc6a 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                      //Note: 4 bit mode is ignored for I2C mode              
              wait_ms(10);            // Wait 10ms to ensure powered up                                                    
 80011b0:	200a      	movs	r0, #10
 80011b2:	f003 fe77 	bl	8004ea4 <wait_ms>
              break;  
 80011b6:	e003      	b.n	80011c0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x9bc>
                                      //Note: 4 bit mode is ignored for I2C mode
//              wait_ms(10);            // Wait 10ms to ensure powered up   
//              break;  
              
            default:
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 80011b8:	487e      	ldr	r0, [pc, #504]	; (80013b4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbb0>)
 80011ba:	f002 ff7f 	bl	80040bc <error>
              break;  
 80011be:	bf00      	nop
            
          } // switch type    

          break; // case PCF2116_5V Controller
 80011c0:	e30f      	b.n	80017e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfde>
          // PCF2119 controller: Initialise Voltage booster for VLCD. VDD=3V3. VA and VB control contrast.
          // Note1: See datasheet, the PCF2119 supports icons and provides separate constrast control for Icons and characters.
          // Note2: Vgen is switched off when the contrast voltage VA or VB is set to 0x00.
                  
//POR or Hardware Reset should be applied
          wait_ms(10);            // Wait 10ms to ensure powered up   
 80011c2:	200a      	movs	r0, #10
 80011c4:	f003 fe6e 	bl	8004ea4 <wait_ms>

          // Initialise Display configuration
          switch (_type) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 80011d0:	d014      	beq.n	80011fc <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x9f8>
 80011d2:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 80011d6:	dc06      	bgt.n	80011e6 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x9e2>
 80011d8:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
 80011dc:	d00a      	beq.n	80011f4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x9f0>
 80011de:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 80011e2:	d007      	beq.n	80011f4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x9f0>
 80011e4:	e012      	b.n	800120c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xa08>
 80011e6:	f5b3 3f02 	cmp.w	r3, #133120	; 0x20800
 80011ea:	d00b      	beq.n	8001204 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xa00>
 80011ec:	f5b3 3f04 	cmp.w	r3, #135168	; 0x21000
 80011f0:	d008      	beq.n	8001204 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xa00>
 80011f2:	e00b      	b.n	800120c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xa08>
            case LCD8x1:
//            case LCD12x1:
            case LCD16x1:           
              _function = 0x02;       // FUNCTION SET 0 0 1 DL=0 4-bit, 0 , M=0 1-line/16 chars display mode, SL=1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2202      	movs	r2, #2
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
                                      // Note: 4 bit mode is ignored for I2C mode
              break;  
 80011fa:	e00b      	b.n	8001214 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xa10>
            
            case LCD24x1:                    
//            case LCD32x1:                                
              _function = 0x00;       // FUNCTION SET 0 0 1 DL=0 4-bit, 0 , M=0 1-line/32 chars display mode, SL=0
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	645a      	str	r2, [r3, #68]	; 0x44
                                      // Note: 4 bit mode is ignored for I2C mode
              break;  
 8001202:	e007      	b.n	8001214 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xa10>

            case LCD8x2:
//            case LCD12x2:            
            case LCD16x2:
              _function = 0x04;       // FUNCTION SET 0 0 1 DL=0 4-bit, 0, M=1 2-line/16 chars display mode, SL=0
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2204      	movs	r2, #4
 8001208:	645a      	str	r2, [r3, #68]	; 0x44
                                      // Note: 4 bit mode is ignored for I2C mode
              break;  
 800120a:	e003      	b.n	8001214 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xa10>
             
            default:
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 800120c:	4869      	ldr	r0, [pc, #420]	; (80013b4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbb0>)
 800120e:	f002 ff55 	bl	80040bc <error>
              break;  
 8001212:	bf00      	nop
            
          } // switch type    

          // Init special features 
          _writeCommand(0x20 | _function | 0x01);           // Set function, Select Instruction Set = 1              
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001218:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800121c:	4619      	mov	r1, r3
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 fc30 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

//          _writeCommand(0x04);    // DISP CONF SET (Instr. Set 1)   0000, 0, 1, P=0, Q=0 (IC at Bottom)
//          _writeCommand(0x05);    // Display Conf Set               0000, 0, 1, P=0, Q=1
//          _writeCommand(0x06);    // Display Conf Set               0000, 0, 1, P=1, Q=0
          _writeCommand(0x07);    // Display Conf Set               0000, 0, 1, P=1, Q=1    (IC at Top)
 8001224:	2107      	movs	r1, #7
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 fc2c 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _writeCommand(0x10);    // TEMP CTRL SET (Instr. Set 1)   0001, 0, 0, TC1=0, TC2=0
 800122c:	2110      	movs	r1, #16
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 fc28 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
//          _writeCommand(0x42);    // HV GEN (Instr. Set 1)          0100, 0, 0, S1=1, S2=0 (2x multiplier)
          _writeCommand(0x40 | (LCD_PCF2_S12 & 0x03));      // HV GEN (Instr. Set 1)          0100, 0, 0, S1=1, S2=0 (2x multiplier)
 8001234:	2142      	movs	r1, #66	; 0x42
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 fc24 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _contrast = LCD_PCF2_CONTRAST;              
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2220      	movs	r2, #32
 8001240:	655a      	str	r2, [r3, #84]	; 0x54
          _writeCommand(0x80 | 0x00 | (_contrast & 0x3F));      // VLCD_set (Instr. Set 1)    V=0, VA=contrast
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800124a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800124e:	4619      	mov	r1, r3
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 fc17 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          _writeCommand(0x80 | 0x40 | (_contrast & 0x3F));      // VLCD_set (Instr. Set 1)    V=1, VB=contrast
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001260:	4619      	mov	r1, r3
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fc0e 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          wait_ms(10);            // Wait 10ms to ensure powered up
 8001268:	200a      	movs	r0, #10
 800126a:	f003 fe1b 	bl	8004ea4 <wait_ms>
          
          _writeCommand(0x02);    // SCRN CONF (Instr. Set 1)    L=0
 800126e:	2102      	movs	r1, #2
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 fc07 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          _writeCommand(0x08);    // ICON CONF (Instr. Set 1)    IM=0 (Char mode) IB=0 (no icon blink) DM=0 (no direct mode)
 8001276:	2108      	movs	r1, #8
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 fc03 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _writeCommand(0x20 | _function);                  // Select Instruction Set = 0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f043 0320 	orr.w	r3, r3, #32
 8001286:	4619      	mov	r1, r3
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fbfb 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          break; // case PCF2119_3V3 Controller
 800128e:	e2a8      	b.n	80017e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfde>
                           //  PWR = 1 (DC/DC On/Off)
   
//@Todo: This may be needed to enable a warm reboot
          //_writeCommand(0x13);   // Char mode, DC/DC off              
          //wait_ms(10);           // Wait 10ms to ensure powered down                  
          _writeCommand(0x17);   // Char mode, DC/DC on        
 8001290:	2117      	movs	r1, #23
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fbf6 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          wait_ms(10);           // Wait 10ms to ensure powered up        
 8001298:	200a      	movs	r0, #10
 800129a:	f003 fe03 	bl	8004ea4 <wait_ms>

          // Initialise Display configuration
          switch (_type) {                    
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	4a47      	ldr	r2, [pc, #284]	; (80013c0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbbc>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d029      	beq.n	80012fc <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xaf8>
 80012a8:	4a45      	ldr	r2, [pc, #276]	; (80013c0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbbc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	dc10      	bgt.n	80012d0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xacc>
 80012ae:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 80012b2:	d01e      	beq.n	80012f2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xaee>
 80012b4:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 80012b8:	dc03      	bgt.n	80012c2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xabe>
 80012ba:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
 80012be:	d018      	beq.n	80012f2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xaee>
 80012c0:	e020      	b.n	8001304 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb00>
 80012c2:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 80012c6:	d014      	beq.n	80012f2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xaee>
 80012c8:	4a3e      	ldr	r2, [pc, #248]	; (80013c4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbc0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d011      	beq.n	80012f2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xaee>
 80012ce:	e019      	b.n	8001304 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb00>
 80012d0:	4a3d      	ldr	r2, [pc, #244]	; (80013c8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbc4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d012      	beq.n	80012fc <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xaf8>
 80012d6:	4a3c      	ldr	r2, [pc, #240]	; (80013c8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbc4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	dc03      	bgt.n	80012e4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xae0>
 80012dc:	4a36      	ldr	r2, [pc, #216]	; (80013b8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbb4>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d00c      	beq.n	80012fc <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xaf8>
 80012e2:	e00f      	b.n	8001304 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb00>
 80012e4:	4a35      	ldr	r2, [pc, #212]	; (80013bc <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbb8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d008      	beq.n	80012fc <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xaf8>
 80012ea:	4a38      	ldr	r2, [pc, #224]	; (80013cc <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbc8>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d005      	beq.n	80012fc <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xaf8>
 80012f0:	e008      	b.n	8001304 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb00>
            case LCD8x1:         //8x1 is a regular 1 line display
            case LCD8x2B:        //8x2B is a special case of 16x1
//            case LCD12x1:                                
            case LCD16x1:                                            
            case LCD24x1:
              _writeCommand(0x20); // Function set 001 DL N F FT1 FT0
 80012f2:	2120      	movs	r1, #32
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 fbc5 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                   //  DL=0  (4 bits bus)             
                                   //   N=0  (1 line)
                                   //   F=0  (5x7 dots font)
                                   //  FT=00 (00 = Engl/Jap, 01 = WestEur1, 10 = Engl/Russian, 11 = WestEur2
              break;  
 80012fa:	e008      	b.n	800130e <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb0a>
            case LCD12x3D:            // Special mode for KS0078 and PCF21XX                            
            case LCD12x3D1:           // Special mode for PCF21XX                     
            case LCD12x4D:            // Special mode for PCF21XX:
            case LCD16x3G:            // Special mode for ST7036            
            case LCD24x4D:            // Special mode for KS0078
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 80012fc:	482d      	ldr	r0, [pc, #180]	; (80013b4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbb0>)
 80012fe:	f002 fedd 	bl	80040bc <error>
              break;  
 8001302:	e004      	b.n	800130e <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb0a>

            default:
              // All other LCD types are initialised as 2 Line displays (including LCD16x1C and LCD40x4)       
              _writeCommand(0x28); // Function set 001 DL N F FT1 FT0
 8001304:	2128      	movs	r1, #40	; 0x28
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 fbbc 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                   //  DL=0  (4 bits bus)
                                   //   N=1  (2 lines)
                                   //   F=0  (5x7 dots font)
                                   //  FT=00 (00 = Engl/Jap, 01 = WestEur1, 10 = Engl/Russian, 11 = WestEur2

              break;
 800130c:	bf00      	nop
           } // switch type
           
           break; // case WS0010 Controller
 800130e:	e268      	b.n	80017e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfde>
          // Note: supports 1,2, 3 or 4 lines
//      case USS2066_5V:
          // US2066 controller, VDD=5V
                    
          // Initialise Display configuration
          switch (_type) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f5b3 3f05 	cmp.w	r3, #136192	; 0x21400
 8001318:	d030      	beq.n	800137c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb78>
 800131a:	f5b3 3f05 	cmp.w	r3, #136192	; 0x21400
 800131e:	dc10      	bgt.n	8001342 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb3e>
 8001320:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 8001324:	d021      	beq.n	800136a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb66>
 8001326:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 800132a:	dc03      	bgt.n	8001334 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb30>
 800132c:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
 8001330:	d01b      	beq.n	800136a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb66>
 8001332:	e053      	b.n	80013dc <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbd8>
 8001334:	f5b3 3f02 	cmp.w	r3, #133120	; 0x20800
 8001338:	d020      	beq.n	800137c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb78>
 800133a:	f5b3 3f04 	cmp.w	r3, #135168	; 0x21000
 800133e:	d01d      	beq.n	800137c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb78>
 8001340:	e04c      	b.n	80013dc <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbd8>
 8001342:	4a1f      	ldr	r2, [pc, #124]	; (80013c0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbbc>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d022      	beq.n	800138e <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb8a>
 8001348:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbbc>)
 800134a:	4293      	cmp	r3, r2
 800134c:	dc06      	bgt.n	800135c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb58>
 800134e:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbc0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d00a      	beq.n	800136a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb66>
 8001354:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbcc>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d010      	beq.n	800137c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb78>
 800135a:	e03f      	b.n	80013dc <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbd8>
 800135c:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbd0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d015      	beq.n	800138e <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb8a>
 8001362:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbd4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d01b      	beq.n	80013a0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xb9c>
 8001368:	e038      	b.n	80013dc <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbd8>
            case LCD8x1:         //8x1 is a regular 1 line display
            case LCD8x2B:        //8x2D is a special case of 16x1
//            case LCD12x1:                                
            case LCD16x1:   
//            case LCD20x1:                                                                         
              _function = 0x00;     //  Set function 0 0 1 X N DH RE(0) IS 
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	645a      	str	r2, [r3, #68]	; 0x44
                                    //    DL=X bit is ignored for US2066. Uses hardwired pins instead
                                    //     N=0 1 Line / 3 Line
                                    //    DH=0 Double Height disable 
                                    //    IS=0
          
              _function_1 = 0x02;   // Set function, 0 0 1 X N BE RE(1) REV
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2202      	movs	r2, #2
 8001374:	649a      	str	r2, [r3, #72]	; 0x48
                                    //    DL=X bit is ignored for US2066. Uses hardwired pins instead                                    
                                    //     N=0 1 Line / 3 Line
                                    //    BE=0 Blink Enable off, special feature of SSD1803, US2066
                                    //   REV=0 Reverse off, special feature of SSD1803, US2066            
                        
              _lines = 0x00;        // Ext function set 0 0 0 0 1 FW BW NW 
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
                                    //    NW=0 1-Line LCD (N=0)
              break;  
 800137a:	e033      	b.n	80013e4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbe0>

            case LCD16x1C:
            case LCD8x2:
            case LCD16x2:
            case LCD20x2:            
              _function = 0x08;     //  Set function 0 0 1 X N DH RE(0) IS 
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2208      	movs	r2, #8
 8001380:	645a      	str	r2, [r3, #68]	; 0x44
                                    //    DL=X bit is ignored for US2066. Uses hardwired pins instead                                                                        
                                    //     N=1 2 line / 4 Line
                                    //    DH=0 Double Height disable 
                                    //    IS=0
          
              _function_1 = 0x0A;   // Set function, 0 0 1 X N BE RE(1) REV
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	220a      	movs	r2, #10
 8001386:	649a      	str	r2, [r3, #72]	; 0x48
                                    //    DL=X bit is ignored for US2066. Uses hardwired pins instead                                                                        
                                    //     N=1 2 line / 4 Line
                                    //    BE=0 Blink Enable off, special feature of SSD1803, US2066
                                    //   REV=0 Reverse off, special feature of SSD1803, US2066            
                        
              _lines = 0x00;        // Ext function set 0 0 0 0 1 FW BW NW 
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
                                    //    NW=0 2-Line LCD (N=1)
              break;                
 800138c:	e02a      	b.n	80013e4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbe0>
            case LCD12x3D:          // Special mode for KS0078 and PCF21XX 
//            case LCD12x3D1:           // Special mode for KS0078 and PCF21XX            
            case LCD16x3D:          // Special mode for KS0078, SSD1803 and US2066
//            case LCD16x3D1:           // Special mode for SSD1803, US2066
//            case LCD20x3D:            // Special mode for SSD1803, US2066
              _function = 0x00;     //  Set function 0 0 1 X N DH RE(0) IS 
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	645a      	str	r2, [r3, #68]	; 0x44
                                    //    DL=X bit is ignored for US2066. Uses hardwired pins instead                                    
                                    //     N=0 1 Line / 3 Line
                                    //    DH=0 Double Height disable 
                                    //    IS=0
          
              _function_1 = 0x02;   // Set function, 0 0 1 X N BE RE(1) REV
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2202      	movs	r2, #2
 8001398:	649a      	str	r2, [r3, #72]	; 0x48
                                    //    DL=X bit is ignored for US2066. Uses hardwired pins instead                                    
                                    //     N=0 1 Line / 3 Line
                                    //    BE=0 Blink Enable off, special feature of SSD1803, US2066
                                    //   REV=0 Reverse off, special feature of SSD1803, US2066            
                        
              _lines = 0x00;        // Ext function set 0 0 0 0 1 FW BW NW 
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
                                    //    NW=1 3-Line LCD (N=0)
              break;  
 800139e:	e021      	b.n	80013e4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbe0>

            case LCD20x4D:          // Special mode for SSD1803, US2066
              _function = 0x08;     //  Set function 0 0 1 X N DH RE(0) IS 
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2208      	movs	r2, #8
 80013a4:	645a      	str	r2, [r3, #68]	; 0x44
                                    //    DL=X bit is ignored for US2066. Uses hardwired pins instead
                                    //     N=1 2 line / 4 Line
                                    //    DH=0 Double Height disable 
                                    //    IS=0
          
              _function_1 = 0x0A;   // Set function, 0 0 1 DL N BE RE(1) REV
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	220a      	movs	r2, #10
 80013aa:	649a      	str	r2, [r3, #72]	; 0x48
                                    //    DL=0 bit is ignored for US2066. Uses hardwired pins instead                                    
                                    //     N=1 2 line / 4 Line
                                    //    BE=0 Blink Enable off, special feature of SSD1803, US2066
                                    //   REV=0 Reverse off, special feature of SSD1803, US2066            
                        
              _lines = 0x01;        // Ext function set 0 0 0 0 1 FW BW NW 
 80013ac:	2301      	movs	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
                                    //    NW=1 4-Line LCD (N=1)
              break;  
 80013b0:	e018      	b.n	80013e4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xbe0>
 80013b2:	bf00      	nop
 80013b4:	0800868c 	.word	0x0800868c
 80013b8:	03040c00 	.word	0x03040c00
 80013bc:	04030c00 	.word	0x04030c00
 80013c0:	03030c00 	.word	0x03030c00
 80013c4:	01020800 	.word	0x01020800
 80013c8:	03041800 	.word	0x03041800
 80013cc:	07031000 	.word	0x07031000
 80013d0:	02011000 	.word	0x02011000
 80013d4:	03031000 	.word	0x03031000
 80013d8:	03041400 	.word	0x03041400

//            case LCD24x1:                                                                         
//            case LCD16x3G:          // Special mode for ST7036            
//            case LCD24x4D:          // Special mode for KS0078
            default:            
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 80013dc:	48af      	ldr	r0, [pc, #700]	; (800169c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xe98>)
 80013de:	f002 fe6d 	bl	80040bc <error>
              break;  
 80013e2:	bf00      	nop

          } // switch type

          _writeCommand(0x00);                      // NOP, make sure to sync SPI
 80013e4:	2100      	movs	r1, #0
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fb4c 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          // init special features 
          _writeCommand(0x20 | _function_1);        // Set function, 0 0 1 X N BE RE(1) REV 
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f0:	f043 0320 	orr.w	r3, r3, #32
 80013f4:	4619      	mov	r1, r3
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 fb44 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                                    // Select Extended Instruction Set

          _writeCommand(0x71);                      // Function Select A: 0 1 1 1 0 0 0 1 (Ext Instr Set)
 80013fc:	2171      	movs	r1, #113	; 0x71
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 fb40 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          _writeData(0x00);                         // Disable Internal VDD
 8001404:	2100      	movs	r1, #0
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fb59 	bl	8001abe <_ZN12TextLCD_Base10_writeDataEi>

          _writeCommand(0x79);                      // Function Select OLED:  0 1 1 1 1 0 0 1 (Ext Instr Set)
 800140c:	2179      	movs	r1, #121	; 0x79
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 fb38 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _writeCommand(0xD5);                      // Display Clock Divide Ratio: 1 1 0 1 0 1 0 1 (Ext Instr Set, OLED Instr Set)
 8001414:	21d5      	movs	r1, #213	; 0xd5
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 fb34 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          _writeCommand(0x70);                      // Display Clock Divide Ratio value: 0 1 1 1 0 0 0 0 (Ext Instr Set, OLED Instr Set)
 800141c:	2170      	movs	r1, #112	; 0x70
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 fb30 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                    
          _writeCommand(0x78);                      // Function Disable OLED: 0 1 1 1 1 0 0 0 (Ext Instr Set)
 8001424:	2178      	movs	r1, #120	; 0x78
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 fb2c 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          
//          _writeCommand(0x06);                      // Set ext entry mode, 0 0 0 0 0 1 BDC=1 COM1-32, BDS=0 SEG100-1    "Bottom View" (Ext Instr Set)
          _writeCommand(0x05);                      // Set ext entry mode, 0 0 0 0 0 1 BDC=0 COM32-1, BDS=1 SEG1-100    "Top View" (Ext Instr Set)          
 800142c:	2105      	movs	r1, #5
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fb28 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
         
          _writeCommand(0x08 | _lines);             // Set ext function 0 0 0 0 1 FW BW NW 1,2,3 or 4 lines (Ext Instr Set)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	4619      	mov	r1, r3
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 fb21 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

//          _writeCommand(0x1C);                      // Double Height, 0 0 0 1 UD2=1, UD1=1, X, DH'=0 (Ext Instr Set)
//                                                    // Default

          _writeCommand(0x72);                      // Function Select B: 0 1 1 1 0 0 1 0 (Ext Instr Set)
 8001442:	2172      	movs	r1, #114	; 0x72
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 fb1d 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          _writeData(0x01);                         // Select ROM A (CGRAM 8, CGROM 248)
 800144a:	2101      	movs	r1, #1
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 fb36 	bl	8001abe <_ZN12TextLCD_Base10_writeDataEi>

          _writeCommand(0x79);                      // Function Select OLED:  0 1 1 1 1 0 0 1 (Ext Instr Set)
 8001452:	2179      	movs	r1, #121	; 0x79
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 fb15 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _writeCommand(0xDA);                      // Set Segm Pins Config:  1 1 0 1 1 0 1 0 (Ext Instr Set, OLED)
 800145a:	21da      	movs	r1, #218	; 0xda
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 fb11 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          _writeCommand(0x10);                      // Set Segm Pins Config value: Altern Odd/Even, Disable Remap (Ext Instr Set, OLED)
 8001462:	2110      	movs	r1, #16
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 fb0d 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _writeCommand(0xDC);                      // Function Select C: 1 1 0 1 1 1 0 0 (Ext Instr Set, OLED)
 800146a:	21dc      	movs	r1, #220	; 0xdc
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 fb09 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
//          _writeCommand(0x00);                      // Set internal VSL, GPIO pin HiZ (always read low)
          _writeCommand(0x80);                      // Set external VSL, GPIO pin HiZ (always read low)
 8001472:	2180      	movs	r1, #128	; 0x80
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 fb05 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _contrast = LCD_US20_CONTRAST;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	223f      	movs	r2, #63	; 0x3f
 800147e:	655a      	str	r2, [r3, #84]	; 0x54
          _writeCommand(0x81);                      // Set Contrast Control: 1 0 0 0 0 0 0 1 (Ext Instr Set, OLED)
 8001480:	2181      	movs	r1, #129	; 0x81
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 fafe 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          _writeCommand((_contrast << 2) | 0x03);   // Set Contrast Value: 8 bits, use 6 bits for compatibility 
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	f043 0303 	orr.w	r3, r3, #3
 8001492:	4619      	mov	r1, r3
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 faf5 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _writeCommand(0xD9);                      // Set Phase Length: 1 1 0 1 1 0 0 1 (Ext Instr Set, OLED)
 800149a:	21d9      	movs	r1, #217	; 0xd9
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 faf1 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          _writeCommand(0xF1);                      // Set Phase Length Value: 
 80014a2:	21f1      	movs	r1, #241	; 0xf1
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 faed 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _writeCommand(0xDB);                      // Set VCOMH Deselect Lvl: 1 1 0 1 1 0 1 1 (Ext Instr Set, OLED)
 80014aa:	21db      	movs	r1, #219	; 0xdb
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 fae9 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          _writeCommand(0x30);                      // Set VCOMH Deselect Value: 0.83 x VCC
 80014b2:	2130      	movs	r1, #48	; 0x30
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 fae5 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          wait_ms(10);            // Wait 10ms to ensure powered up
 80014ba:	200a      	movs	r0, #10
 80014bc:	f003 fcf2 	bl	8004ea4 <wait_ms>
//Test Fade/Blinking. Hard Blink on/off, No fade in/out ??
//          _writeCommand(0x23);                      // Set (Ext Instr Set, OLED)
//          _writeCommand(0x3F);                      // Set interval 128 frames
//End Test Blinking

          _writeCommand(0x78);                      // Function Disable OLED: 0 1 1 1 1 0 0 0 (Ext Instr Set)
 80014c0:	2178      	movs	r1, #120	; 0x78
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 fade 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          
          _writeCommand(0x20 | _function | 0x01);   // Set function, 0 0 1 X N DH RE(0) IS=1 Select Instruction Set 1
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014cc:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fad6 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                                    // Select Std Instr set, Select IS=1  

          _writeCommand(0x20 | _function_1);        // Set function, 0 0 1 X N BE RE(1) REV 
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014dc:	f043 0320 	orr.w	r3, r3, #32
 80014e0:	4619      	mov	r1, r3
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 face 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                                    // Select Ext Instr Set, IS=1
          _writeCommand(0x10);                      // Shift/Scroll enable, 0 0 0 1 DS4/HS4 DS3/HS3 DS2/HS2 DS1/HS1  (Ext Instr Set, IS=1)
 80014e8:	2110      	movs	r1, #16
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 faca 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          _writeCommand(0x20 | _function);          // Set function, 0 0 1 DL N DH RE(0) IS=0 Select Instruction Set 0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f4:	f043 0320 	orr.w	r3, r3, #32
 80014f8:	4619      	mov	r1, r3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fac2 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                                    // Select Std Instr set, Select IS=0        
          break; // case US2066/SSD1311 Controller
 8001500:	e16f      	b.n	80017e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfde>

      //not yet tested on hardware
      case PT6314 :
          // Initialise Display configuration
          switch (_type) {
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f5b3 3f02 	cmp.w	r3, #133120	; 0x20800
 800150a:	d027      	beq.n	800155c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd58>
 800150c:	f5b3 3f02 	cmp.w	r3, #133120	; 0x20800
 8001510:	dc10      	bgt.n	8001534 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd30>
 8001512:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 8001516:	d01d      	beq.n	8001554 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd50>
 8001518:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 800151c:	dc03      	bgt.n	8001526 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd22>
 800151e:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
 8001522:	d017      	beq.n	8001554 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd50>
 8001524:	e01e      	b.n	8001564 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd60>
 8001526:	f5b3 3f8a 	cmp.w	r3, #70656	; 0x11400
 800152a:	d013      	beq.n	8001554 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd50>
 800152c:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 8001530:	d010      	beq.n	8001554 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd50>
 8001532:	e017      	b.n	8001564 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd60>
 8001534:	f5b3 3f05 	cmp.w	r3, #136192	; 0x21400
 8001538:	d010      	beq.n	800155c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd58>
 800153a:	f5b3 3f05 	cmp.w	r3, #136192	; 0x21400
 800153e:	dc03      	bgt.n	8001548 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd44>
 8001540:	f5b3 3f04 	cmp.w	r3, #135168	; 0x21000
 8001544:	d00a      	beq.n	800155c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd58>
 8001546:	e00d      	b.n	8001564 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd60>
 8001548:	f5b3 3f06 	cmp.w	r3, #137216	; 0x21800
 800154c:	d006      	beq.n	800155c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd58>
 800154e:	4a54      	ldr	r2, [pc, #336]	; (80016a0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xe9c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d107      	bne.n	8001564 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd60>
            case LCD8x2B:        //8x2B is a special case of 16x1
//            case LCD12x1:                                
            case LCD16x1:                                            
            case LCD20x1:                                                        
            case LCD24x1:
              _function = 0x00;    // Function set 001 DL N X BR1 BR0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	645a      	str	r2, [r3, #68]	; 0x44
                                   //           0x0 = 100%
                                   //           0x1 =  75%
                                   //           0x2 =  50%
                                   //           0x3 =  25%                

              break;                                
 800155a:	e007      	b.n	800156c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd68>
            // All other valid LCD types are initialised as 2 Line displays
            case LCD8x2:  
            case LCD16x2:  
            case LCD20x2:
            case LCD24x2:
              _function = 0x08;    // Function set 001 DL N X BR1 BR2
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2208      	movs	r2, #8
 8001560:	645a      	str	r2, [r3, #68]	; 0x44
                                   //  Note: 4 bit mode is ignored for native SPI and I2C devices                                 
                                   //  N=1 (2 lines)
                                   //  X
                                   //  BR1=0 (2 significant bits for brightness
                                   //  BR0=0 
              break;
 8001562:	e003      	b.n	800156c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xd68>
              
            default:            
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 8001564:	484d      	ldr	r0, [pc, #308]	; (800169c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xe98>)
 8001566:	f002 fda9 	bl	80040bc <error>
              break;               
 800156a:	bf00      	nop
          } // switch type
           
          _contrast = LCD_PT63_CONTRAST;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	223f      	movs	r2, #63	; 0x3f
 8001570:	655a      	str	r2, [r3, #84]	; 0x54
          _writeCommand(0x20 | _function | ((~_contrast) >> 4));        // Invert and shift to use 2 MSBs     
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f043 0220 	orr.w	r2, r3, #32
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157e:	43db      	mvns	r3, r3
 8001580:	111b      	asrs	r3, r3, #4
 8001582:	4313      	orrs	r3, r2
 8001584:	4619      	mov	r1, r3
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fa7c 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          break; // case PT6314 Controller (VFD)
 800158c:	e129      	b.n	80017e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfde>


      case HD66712:
          // Initialise Display configuration
          switch (_type) {
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 8001596:	d024      	beq.n	80015e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xdde>
 8001598:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 800159c:	dc10      	bgt.n	80015c0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xdbc>
 800159e:	f5b3 3f86 	cmp.w	r3, #68608	; 0x10c00
 80015a2:	d01e      	beq.n	80015e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xdde>
 80015a4:	f5b3 3f86 	cmp.w	r3, #68608	; 0x10c00
 80015a8:	dc03      	bgt.n	80015b2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xdae>
 80015aa:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
 80015ae:	d018      	beq.n	80015e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xdde>
 80015b0:	e02f      	b.n	8001612 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xe0e>
 80015b2:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 80015b6:	d014      	beq.n	80015e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xdde>
 80015b8:	f5b3 3f8a 	cmp.w	r3, #70656	; 0x11400
 80015bc:	d011      	beq.n	80015e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xdde>
 80015be:	e028      	b.n	8001612 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xe0e>
 80015c0:	4a38      	ldr	r2, [pc, #224]	; (80016a4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xea0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d017      	beq.n	80015f6 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xdf2>
 80015c6:	4a37      	ldr	r2, [pc, #220]	; (80016a4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xea0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	dc03      	bgt.n	80015d4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xdd0>
 80015cc:	4a36      	ldr	r2, [pc, #216]	; (80016a8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xea4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d011      	beq.n	80015f6 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xdf2>
 80015d2:	e01e      	b.n	8001612 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xe0e>
 80015d4:	4a35      	ldr	r2, [pc, #212]	; (80016ac <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xea8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d017      	beq.n	800160a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xe06>
 80015da:	4a35      	ldr	r2, [pc, #212]	; (80016b0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xeac>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d014      	beq.n	800160a <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xe06>
 80015e0:	e017      	b.n	8001612 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xe0e>
            case LCD12x1:                                
            case LCD16x1:                                            
            case LCD20x1:
            case LCD24x1:
//            case LCD32x1:        // EXT pin is High, extension driver needed
              _function  = 0x02;    // Function set 001 DL N RE(0) - - (Std Regs)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2202      	movs	r2, #2
 80015e6:	645a      	str	r2, [r3, #68]	; 0x44
                                    //   DL=0  (4 bits bus)             
                                    //    N=0  (1-line mode, N=1 2-line mode)
                                    //   RE=0  (Dis. Extended Regs, special mode for HD66712)
                                    //   
                                    
              _function_1 = 0x04;   // Function set 001 DL N RE(1) BE LP (Ext Regs)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2204      	movs	r2, #4
 80015ec:	649a      	str	r2, [r3, #72]	; 0x48
                                    //    N=0  (1-line mode, N=1 2-line mode)
                                    //   RE=1  (Ena Extended Regs; special mode for HD66712)
                                    //   BE=0  (Blink Enable, CG/SEG RAM; special mode for HD66712)                                
                                    //   LP=0  (LP=1 Low power mode, LP=0 Normal; special mode for HD66712)

              _function_x = 0x00;   // Ext Function set 0000 1 FW BW NW (Ext Regs)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	64da      	str	r2, [r3, #76]	; 0x4c
                                    //    NW=0  (1,2 line), NW=1 (4 Line, special mode for HD66712)                                
              break;                                
 80015f4:	e017      	b.n	8001626 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xe22>
//            case LCD12x3D1:        // Special mode for KS0073, KS0078, PCF21XX and HD66712
            case LCD12x4D:         // Special mode for KS0073, KS0078, PCF21XX and HD66712
//            case LCD16x3D:         // Special mode for KS0073, KS0078 and HD66712
//            case LCD16x4D:         // Special mode for KS0073, KS0078 and HD66712            
            case LCD20x4D:         // Special mode for KS0073, KS0078 and HD66712            
              _function  = 0x02;    // Function set 001 DL N RE(0) - - (Std Regs)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2202      	movs	r2, #2
 80015fa:	645a      	str	r2, [r3, #68]	; 0x44
                                    //   DL=0  (4 bits bus)             
                                    //    N=0  (1-line mode, N=1 2-line mode)
                                    //   RE=0  (Dis. Extended Regs, special mode for HD66712)
                                    //   
                                    
              _function_1 = 0x04;   // Function set 001 DL N RE(1) BE LP (Ext Regs)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2204      	movs	r2, #4
 8001600:	649a      	str	r2, [r3, #72]	; 0x48
                                    //    N=0  (1-line mode, N=1 2-line mode)
                                    //   RE=1  (Ena Extended Regs; special mode for HD66712)
                                    //   BE=0  (Blink Enable, CG/SEG RAM; special mode for HD66712)                                
                                    //   LP=0  (LP=1 Low power mode, LP=0 Normal; special mode for HD66712)

              _function_x = 0x01;   // Ext Function set 0000 1 FW BW NW (Ext Regs)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	64da      	str	r2, [r3, #76]	; 0x4c
                                    //    NW=0  (1,2 line), NW=1 (4 Line, special mode for HD66712)                                
              break;                                
 8001608:	e00d      	b.n	8001626 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xe22>

            case LCD16x3G:            // Special mode for ST7036                        
//            case LCD24x3D:         // Special mode for KS0078
//            case LCD24x3D1:        // Special mode for KS0078
            case LCD24x4D:         // Special mode for KS0078
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 800160a:	4824      	ldr	r0, [pc, #144]	; (800169c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xe98>)
 800160c:	f002 fd56 	bl	80040bc <error>
              break;  
 8001610:	e009      	b.n	8001626 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xe22>

            default:
              // All other LCD types are initialised as 2 Line displays (including LCD16x1C and LCD40x4)            
              _function  = 0x0A;    // Function set 001 DL N RE(0) - - (Std Regs)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	220a      	movs	r2, #10
 8001616:	645a      	str	r2, [r3, #68]	; 0x44
                                    //   DL=0  (4 bits bus)             
                                    //    N=1  (2-line mode), N=0 (1-line mode)
                                    //   RE=0  (Dis. Extended Regs, special mode for HD66712)
                                    
              _function_1 = 0x0C;   // Function set 001 DL N RE(1) BE LP (Ext Regs)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	220c      	movs	r2, #12
 800161c:	649a      	str	r2, [r3, #72]	; 0x48
                                    //    N=1  (2 line mode), N=0 (1-line mode)
                                    //   RE=1  (Ena Extended Regs, special mode for HD66712)
                                    //   BE=0  (Blink Enable, CG/SEG RAM, special mode for HD66712)
                                    //   LP=0  (LP=1 Low power mode, LP=0 Normal)

              _function_x = 0x00;   // Ext Function set 0000 1 FW BW NW (Ext Regs)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	64da      	str	r2, [r3, #76]	; 0x4c
                                    //   NW=0  (1,2 line), NW=1 (4 Line, special mode for HD66712)
              break;
 8001624:	bf00      	nop
          } // switch type

          // init special features
          _writeCommand(0x20 | _function_1);// Function set 001 DL N RE(1) BE LP (Ext Regs)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800162a:	f043 0320 	orr.w	r3, r3, #32
 800162e:	4619      	mov	r1, r3
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 fa27 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                           //    N=0 (1 line mode), N=1 (2 line mode)
                                           //   RE=1 (Ena Extended Regs, special mode for HD66712)
                                           //   BE=0 (Blink Enable/Disable, CG/SEG RAM, special mode for HD66712)                                
                                           //   LP=0  (LP=1 Low power mode, LP=0 Normal)                                                                                                                                

          _writeCommand(0x08 | _function_x); // Ext Function set 0000 1 FW BW NW (Ext Regs)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	4619      	mov	r1, r3
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fa1f 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                           //   FW=0  (5-dot font, special mode for HD66712)
                                           //   BW=0  (Cur BW invert disable, special mode for HD66712)
                                           //   NW=0  (1,2 Line), NW=1 (4 line, special mode for HD66712)                                

          _writeCommand(0x10);             // Scroll/Shift set 0001 HS4 HS3 HS2 HS1 (Ext Regs)
 8001646:	2110      	movs	r1, #16
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fa1b 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                           //   Dotscroll/Display shift enable (Special mode for HD66712)

          _writeCommand(0x80);             // Scroll Quantity set 1 0 HDS5 HDS4 HDS3 HDS2 HDS1 HDS0 (Ext Regs)
 800164e:	2180      	movs	r1, #128	; 0x80
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 fa17 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                           //   Scroll quantity (Special mode for HD66712)

          _writeCommand(0x20 | _function); // Function set 001 DL N RE(0) DH REV (Std Regs)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f043 0320 	orr.w	r3, r3, #32
 800165e:	4619      	mov	r1, r3
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 fa0f 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                           //   DL=0  (4 bits bus), DL=1 (8 bits mode)             
                                           //    N=0  (1 line mode), N=1 (2 line mode)
                                           //   RE=0  (Dis. Extended Regs, special mode for HD66712)
                                           //   DH=1  (Disp shift enable/disable, special mode for HD66712)
                                           //   REV=0 (Reverse/Normal, special mode for HD66712)
          break; // case HD66712 Controller
 8001666:	e0bc      	b.n	80017e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfde>
      case SPLC792A_3V3:      
          // SPLC792A controller: Initialise Voltage booster for VLCD. VDD=3V3
          // Note very similar to ST7032
      
          // Initialise Display configuration
          switch (_type) {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xeb0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d037      	beq.n	80016e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xede>
 8001672:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xeb0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	dc1f      	bgt.n	80016b8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xeb4>
 8001678:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 800167c:	d02d      	beq.n	80016da <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xed6>
 800167e:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 8001682:	dc03      	bgt.n	800168c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xe88>
 8001684:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
 8001688:	d027      	beq.n	80016da <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xed6>
 800168a:	e02e      	b.n	80016ea <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xee6>
 800168c:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 8001690:	d023      	beq.n	80016da <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xed6>
 8001692:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xe9c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d020      	beq.n	80016da <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xed6>
 8001698:	e027      	b.n	80016ea <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xee6>
 800169a:	bf00      	nop
 800169c:	0800868c 	.word	0x0800868c
 80016a0:	01020800 	.word	0x01020800
 80016a4:	03041400 	.word	0x03041400
 80016a8:	03040c00 	.word	0x03040c00
 80016ac:	03041800 	.word	0x03041800
 80016b0:	07031000 	.word	0x07031000
 80016b4:	03030c00 	.word	0x03030c00
 80016b8:	4a57      	ldr	r2, [pc, #348]	; (8001818 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1014>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d011      	beq.n	80016e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xede>
 80016be:	4a56      	ldr	r2, [pc, #344]	; (8001818 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1014>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	dc03      	bgt.n	80016cc <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xec8>
 80016c4:	4a55      	ldr	r2, [pc, #340]	; (800181c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1018>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00b      	beq.n	80016e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xede>
 80016ca:	e00e      	b.n	80016ea <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xee6>
 80016cc:	4a54      	ldr	r2, [pc, #336]	; (8001820 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x101c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d007      	beq.n	80016e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xede>
 80016d2:	4a54      	ldr	r2, [pc, #336]	; (8001824 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1020>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d004      	beq.n	80016e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xede>
 80016d8:	e007      	b.n	80016ea <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xee6>
            case LCD8x2B:        //8x2B is a special case of 16x1
//            case LCD12x1:                                
            case LCD16x1:                                            
//            case LCD20x1:                    
            case LCD24x1:
              _function = 0x00;       // FUNCTION SET 0 0 1 DL=0 (4 bit), N=0 (1-line display mode), F=0 (5*7dot), 0, IS
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	645a      	str	r2, [r3, #68]	; 0x44
                                      // Note: 4 bit mode is ignored for native SPI and I2C devices
                                      // Saved to allow switch between Instruction sets at later time
              break;  
 80016e0:	e007      	b.n	80016f2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xeee>
            case LCD12x3D:            // Special mode for KS0078 and PCF21XX
            case LCD12x3D1:           // Special mode for KS0078 and PCF21XX
            case LCD12x4D:            // Special mode for KS0078 and PCF21XX
            case LCD16x3G:            // Special mode for ST7036                        
            case LCD24x4D:            // Special mode for KS0078
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 80016e2:	4851      	ldr	r0, [pc, #324]	; (8001828 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1024>)
 80016e4:	f002 fcea 	bl	80040bc <error>
              break;  
 80016e8:	e003      	b.n	80016f2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xeee>

            default:
              // All other LCD types are initialised as 2 Line displays        
              _function = 0x08;       // FUNCTION SET 0 0 1 DL=0 (4 bit), N=1 (2-line display mode), F=0 (5*7dot), 0, IS              
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2208      	movs	r2, #8
 80016ee:	645a      	str	r2, [r3, #68]	; 0x44
                                      // Note: 4 bit mode is ignored for native SPI and I2C devices
                                      // Saved to allow switch between Instruction sets at later time
              break;                                                                        
 80016f0:	bf00      	nop
          } // switch type    
                                     
          // init special features 
          _writeCommand(0x20 | _function | 0x01);           // Set function,  0 0 1 DL N F 0 IS=1 Select Instr Set = 1              
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80016fa:	4619      	mov	r1, r3
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f9c1 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

//SPLC792A Does not support Bias and Internal Osc register
//          _writeCommand(0x1C);                              // Internal OSC frequency adjustment Framefreq=183HZ, Bias will be 1/4 (Instr Set=1)

          _contrast = LCD_SPLC792A_CONTRAST;              
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2228      	movs	r2, #40	; 0x28
 8001706:	655a      	str	r2, [r3, #84]	; 0x54
          _writeCommand(0x70 | (_contrast & 0x0F));         // Set Contrast Low bits, 0 1 1 1 C3 C2 C1 C0 (IS=1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001714:	4619      	mov	r1, r3
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f9b4 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>


//          _icon_power = 0x04;                               // Icon display off (Bit3=0), Booster circuit is turned on (Bit2=1) (IS=1)
          _icon_power = 0x0C;                               // Icon display on (Bit3=1), Booster circuit is turned on (Bit2=1)  (IS=1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	220c      	movs	r2, #12
 8001720:	651a      	str	r2, [r3, #80]	; 0x50
                                                            // Note: Booster circuit always on for SPLC792A, Bit2 is dont care
                                                            // Saved to allow contrast change at later time

          _writeCommand(0x50 | _icon_power | ((_contrast >> 4) & 0x03));  // Set Icon, Booster and Contrast High bits, 0 1 0 1 Ion Bon C5 C4 (IS=1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001726:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172e:	111b      	asrs	r3, r3, #4
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	4313      	orrs	r3, r2
 8001736:	4619      	mov	r1, r3
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f9a3 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          wait_ms(10);            // Wait 10ms to ensure powered up
 800173e:	200a      	movs	r0, #10
 8001740:	f003 fbb0 	bl	8004ea4 <wait_ms>
          
          _writeCommand(0x68 | (LCD_SPLC792A_RAB & 0x07));  // Voltage follower, 0 1 1 0 FOn=1, Ampl ratio Rab2=1, Rab1=0, Rab0=0  (IS=1)
 8001744:	216c      	movs	r1, #108	; 0x6c
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f99c 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                                                            // Note: Follower circuit always on for SPLC792A, Bit3 is dont care          
          wait_ms(10);            // Wait 10ms to ensure powered up
 800174c:	200a      	movs	r0, #10
 800174e:	f003 fba9 	bl	8004ea4 <wait_ms>
          
          _writeCommand(0x20 | _function);                  // Select Instruction Set = 0
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f043 0320 	orr.w	r3, r3, #32
 800175a:	4619      	mov	r1, r3
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f991 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

          break; // case SPLC792A_3V3 Controller
 8001762:	e03e      	b.n	80017e2 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfde>
        case ST7066_ACM:                                                // ST7066 4/8 bit, I2C on ACM1602 using a PIC        
        default:
          // Devices fully compatible to HD44780 that do not use any DC/DC Voltage converters but external VLCD, no icons etc

          // Initialise Display configuration
          switch (_type) {
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4a30      	ldr	r2, [pc, #192]	; (800182c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1028>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d028      	beq.n	80017c0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfbc>
 800176e:	4a2f      	ldr	r2, [pc, #188]	; (800182c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1028>)
 8001770:	4293      	cmp	r3, r2
 8001772:	dc10      	bgt.n	8001796 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xf92>
 8001774:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 8001778:	d01e      	beq.n	80017b8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfb4>
 800177a:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
 800177e:	dc03      	bgt.n	8001788 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xf84>
 8001780:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
 8001784:	d018      	beq.n	80017b8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfb4>
 8001786:	e01f      	b.n	80017c8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfc4>
 8001788:	f5b3 3f8c 	cmp.w	r3, #71680	; 0x11800
 800178c:	d014      	beq.n	80017b8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfb4>
 800178e:	4a28      	ldr	r2, [pc, #160]	; (8001830 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x102c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d011      	beq.n	80017b8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfb4>
 8001794:	e018      	b.n	80017c8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfc4>
 8001796:	4a21      	ldr	r2, [pc, #132]	; (800181c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1018>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d011      	beq.n	80017c0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfbc>
 800179c:	4a1f      	ldr	r2, [pc, #124]	; (800181c <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1018>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	dc03      	bgt.n	80017aa <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfa6>
 80017a2:	4a24      	ldr	r2, [pc, #144]	; (8001834 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1030>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d00b      	beq.n	80017c0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfbc>
 80017a8:	e00e      	b.n	80017c8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfc4>
 80017aa:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1014>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d007      	beq.n	80017c0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfbc>
 80017b0:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x101c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d004      	beq.n	80017c0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfbc>
 80017b6:	e007      	b.n	80017c8 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfc4>
//            case LCD12x1:                                
            case LCD16x1:                                            
//            case LCD20x1:                                                        
            case LCD24x1:
//            case LCD40x1:            
              _function = 0x00;    // Function set 001 DL N F - -
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	645a      	str	r2, [r3, #68]	; 0x44
                                   //  DL=0 (4 bits bus)             
                                   //   N=0 (1 line)
                                   //   F=0 (5x7 dots font)
              break;                                
 80017be:	e007      	b.n	80017d0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfcc>
            case LCD16x3D:            // Special mode for KS0078
//            case LCD16x3D1:           // Special mode for KS0078
//            case LCD24x3D:            // Special mode for KS0078
//            case LCD24x3D1:           // Special mode for KS0078            
            case LCD24x4D:            // Special mode for KS0078
              error("Error: LCD Controller type does not support this Display type\n\r"); 
 80017c0:	4819      	ldr	r0, [pc, #100]	; (8001828 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0x1024>)
 80017c2:	f002 fc7b 	bl	80040bc <error>
              break;  
 80017c6:	e003      	b.n	80017d0 <_ZN12TextLCD_Base9_initCtrlENS_14_LCDDatalengthE+0xfcc>

            // All other LCD types are initialised as 2 Line displays (including LCD16x1C and LCD40x4)
            default:
              _function = 0x08;    // Function set 001 DL N F - -
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2208      	movs	r2, #8
 80017cc:	645a      	str	r2, [r3, #68]	; 0x44
                                   //  DL=0 (4 bits bus)
                                   //  Note: 4 bit mode is ignored for native SPI and I2C devices                                 
                                   //   N=1 (2 lines)
                                   //   F=0 (5x7 dots font, only option for 2 line display)
                                   //    -  (Don't care)
              break;
 80017ce:	bf00      	nop
          } // switch type

          _writeCommand(0x20 | _function);                         
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d4:	f043 0320 	orr.w	r3, r3, #32
 80017d8:	4619      	mov	r1, r3
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f952 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
          break; // case default Controller
 80017e0:	bf00      	nop
    // Controller general initialisations                                          
//    _writeCommand(0x01); // Clear Display and set cursor to 0
//    wait_ms(10);         // The CLS command takes 1.64 ms.
//                         // Since we are not using the Busy flag, Lets be safe and take 10 ms  

    _writeCommand(0x02); // Cursor Home, DDRAM Address to Origin
 80017e2:	2102      	movs	r1, #2
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f94d 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
    wait_ms(10);         // The Return Home command takes 1.64 ms.
 80017ea:	200a      	movs	r0, #10
 80017ec:	f003 fb5a 	bl	8004ea4 <wait_ms>
                         // Since we are not using the Busy flag, Lets be safe and take 10 ms      

    _writeCommand(0x06); // Entry Mode 0000 0 1 I/D S 
 80017f0:	2106      	movs	r1, #6
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f946 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
                         //   Cursor Direction and Display Shift
                         //   I/D=1 (Cur incr)
                         //     S=0 (No display shift)                        

    _writeCommand(0x14); // Cursor or Display shift 0001 S/C R/L x x 
 80017f8:	2114      	movs	r1, #20
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f942 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>

//    _writeCommand(0x0C); // Display Ctrl 0000 1 D C B
//                         //   Display On, Cursor Off, Blink Off   

//    setCursor(CurOff_BlkOff);     
    setCursor(CurOn_BlkOff);        
 8001800:	2102      	movs	r1, #2
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 fad8 	bl	8001db8 <_ZN12TextLCD_Base9setCursorENS_9LCDCursorE>
    setMode(DispOn);     
 8001808:	2104      	movs	r1, #4
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 faec 	bl	8001de8 <_ZN12TextLCD_Base7setModeENS_7LCDModeE>
}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	03041800 	.word	0x03041800
 800181c:	03040c00 	.word	0x03040c00
 8001820:	04030c00 	.word	0x04030c00
 8001824:	07031000 	.word	0x07031000
 8001828:	0800868c 	.word	0x0800868c
 800182c:	03030c00 	.word	0x03030c00
 8001830:	01020800 	.word	0x01020800
 8001834:	03031000 	.word	0x03031000

08001838 <_ZN12TextLCD_Base3clsEv>:

/** Clear the screen, Cursor home. 
  * Note: The whole display is initialised to charcode 0x20, which may not be a 'space' on some controllers with a
  *       different fontset such as the PCF2116C or PCF2119R. In this case you should fill the display with 'spaces'.
  */
void TextLCD_Base::cls() {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

#if (LCD_TWO_CTRL == 1)
  // Select and configure second LCD controller when needed
  if(_type==LCD40x4) {
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <_ZN12TextLCD_Base3clsEv+0x80>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d116      	bne.n	8001878 <_ZN12TextLCD_Base3clsEv+0x40>
    _ctrl_idx=_LCDCtrl_1; // Select 2nd controller
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    // Second LCD controller Cursor always Off
    _setCursorAndDisplayMode(_currentMode, CurOff_BlkOff);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001858:	2200      	movs	r2, #0
 800185a:	4619      	mov	r1, r3
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 fb1d 	bl	8001e9c <_ZN12TextLCD_Base24_setCursorAndDisplayModeENS_7LCDModeENS_9LCDCursorE>

    // Second LCD controller Clearscreen
    _writeCommand(0x01);  // cls, and set cursor to 0    
 8001862:	2101      	movs	r1, #1
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f90d 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
    wait_ms(20);          // The CLS command takes 1.64 ms.
 800186a:	2014      	movs	r0, #20
 800186c:	f003 fb1a 	bl	8004ea4 <wait_ms>
                          // Since we are not using the Busy flag, Lets be safe and take 10 ms
  
    _ctrl_idx=_LCDCtrl_0; // Select primary controller
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  
  // Primary LCD controller Clearscreen
  _writeCommand(0x01);    // cls, and set cursor to 0
 8001878:	2101      	movs	r1, #1
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f902 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
  wait_ms(20);            // The CLS command takes 1.64 ms.
 8001880:	2014      	movs	r0, #20
 8001882:	f003 fb0f 	bl	8004ea4 <wait_ms>
                          // Since we are not using the Busy flag, Lets be safe and take 10 ms

  // Restore cursormode on primary LCD controller when needed
  if(_type==LCD40x4) {
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <_ZN12TextLCD_Base3clsEv+0x80>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d109      	bne.n	80018a4 <_ZN12TextLCD_Base3clsEv+0x6c>
    _setCursorAndDisplayMode(_currentMode,_currentCursor);     
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800189c:	461a      	mov	r2, r3
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fafc 	bl	8001e9c <_ZN12TextLCD_Base24_setCursorAndDisplayModeENS_7LCDModeENS_9LCDCursorE>
  _writeCommand(0x01);    // cls, and set cursor to 0
  wait_ms(20);            // The CLS command takes 1.64 ms.
                          // Since we are not using the Busy flag, Lets be safe and take 10 ms
#endif
                   
  setAddress(0, 0);  // Reset Cursor location
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 fa29 	bl	8001d00 <_ZN12TextLCD_Base10setAddressEii>
                     // Note: This is needed because some displays (eg PCF21XX) don't use line 0 in the '3 Line' mode.   
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	05042800 	.word	0x05042800

080018bc <_ZN12TextLCD_Base6locateEii>:
/** Locate cursor to a screen column and row
  *
  * @param column  The horizontal position from the left, indexed from 0
  * @param row     The vertical position from the top, indexed from 0
  */ 
void TextLCD_Base::locate(int column, int row) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
   // setAddress() does all the heavy lifting:
   //   check column and row sanity, 
   //   switch controllers for LCD40x4 if needed
   //   switch cursor for LCD40x4 if needed
   //   set the new memory address to show cursor at correct location
   setAddress(column, row);      
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	68b9      	ldr	r1, [r7, #8]
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 fa17 	bl	8001d00 <_ZN12TextLCD_Base10setAddressEii>
}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_ZN12TextLCD_Base5_putcEi>:
   

/** Write a single character (Stream implementation)
  */
int TextLCD_Base::_putc(int value) {
 80018da:	b590      	push	{r4, r7, lr}
 80018dc:	b085      	sub	sp, #20
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
  int addr;
    
    if (value == '\n') {
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	2b0a      	cmp	r3, #10
 80018e8:	d118      	bne.n	800191c <_ZN12TextLCD_Base5_putcEi+0x42>
      //No character to write
      
      //Update Cursor      
      _column = 0;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	639a      	str	r2, [r3, #56]	; 0x38
      _row++;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	63da      	str	r2, [r3, #60]	; 0x3c
      if (_row >= rows()) {
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fa4e 	bl	8001da0 <_ZN12TextLCD_Base4rowsEv>
 8001904:	4603      	mov	r3, r0
 8001906:	429c      	cmp	r4, r3
 8001908:	bfac      	ite	ge
 800190a:	2301      	movge	r3, #1
 800190c:	2300      	movlt	r3, #0
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d031      	beq.n	8001978 <_ZN12TextLCD_Base5_putcEi+0x9e>
        _row = 0;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	63da      	str	r2, [r3, #60]	; 0x3c
 800191a:	e02d      	b.n	8001978 <_ZN12TextLCD_Base5_putcEi+0x9e>
    }
    else {
      //Character to write

#if (LCD_DEF_FONT == 1)   //Default HD44780 font
      _writeData(value);
 800191c:	6839      	ldr	r1, [r7, #0]
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f8cd 	bl	8001abe <_ZN12TextLCD_Base10_writeDataEi>
#else
      _writeData('?'); //Oops, no font defined
#endif

      //Update Cursor
      _column++;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	639a      	str	r2, [r3, #56]	; 0x38
      if (_column >= columns()) {
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 fa28 	bl	8001d88 <_ZN12TextLCD_Base7columnsEv>
 8001938:	4603      	mov	r3, r0
 800193a:	429c      	cmp	r4, r3
 800193c:	bfac      	ite	ge
 800193e:	2301      	movge	r3, #1
 8001940:	2300      	movlt	r3, #0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d017      	beq.n	8001978 <_ZN12TextLCD_Base5_putcEi+0x9e>
        _column = 0;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	639a      	str	r2, [r3, #56]	; 0x38
        _row++;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	63da      	str	r2, [r3, #60]	; 0x3c
        if (_row >= rows()) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 fa1f 	bl	8001da0 <_ZN12TextLCD_Base4rowsEv>
 8001962:	4603      	mov	r3, r0
 8001964:	429c      	cmp	r4, r3
 8001966:	bfac      	ite	ge
 8001968:	2301      	movge	r3, #1
 800196a:	2300      	movlt	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <_ZN12TextLCD_Base5_putcEi+0x9e>
          _row = 0;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

    } //else

    //Set next memoryaddress, make sure cursor blinks at next location
    addr = getAddress(_column, _row);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001980:	461a      	mov	r2, r3
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f8b8 	bl	8001af8 <_ZN12TextLCD_Base10getAddressEii>
 8001988:	60f8      	str	r0, [r7, #12]
    _writeCommand(0x80 | addr);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001990:	4619      	mov	r1, r3
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f876 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
            
    return value;
 8001998:	683b      	ldr	r3, [r7, #0]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd90      	pop	{r4, r7, pc}

080019a2 <_ZN12TextLCD_Base5_getcEv>:


// get a single character (Stream implementation)
int TextLCD_Base::_getc() {
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
    return -1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_ZN12TextLCD_Base12_writeNibbleEi>:
}
#endif    


// Write a nibble using the 4-bit interface
void TextLCD_Base::_writeNibble(int value) {
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]

// Enable is Low
    this->_setEnable(true);        
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3358      	adds	r3, #88	; 0x58
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2101      	movs	r1, #1
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	4798      	blx	r3
    this->_setData(value);        // Low nibble of value on D4..D7
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	3364      	adds	r3, #100	; 0x64
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6839      	ldr	r1, [r7, #0]
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	4798      	blx	r3
    wait_us(1); // Data setup time        
 80019e0:	2001      	movs	r0, #1
 80019e2:	f003 fa6f 	bl	8004ec4 <wait_us>
    this->_setEnable(false);    
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	3358      	adds	r3, #88	; 0x58
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2100      	movs	r1, #0
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	4798      	blx	r3
    wait_us(1); // Datahold time
 80019f4:	2001      	movs	r0, #1
 80019f6:	f003 fa65 	bl	8004ec4 <wait_us>
// Enable is Low
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_ZN12TextLCD_Base10_writeByteEi>:

// Write a byte using the 4-bit interface
void TextLCD_Base::_writeByte(int value) {
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]

// Enable is Low
    this->_setEnable(true);          
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3358      	adds	r3, #88	; 0x58
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2101      	movs	r1, #1
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	4798      	blx	r3
    this->_setData(value >> 4);   // High nibble
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	3364      	adds	r3, #100	; 0x64
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	1112      	asrs	r2, r2, #4
 8001a26:	4611      	mov	r1, r2
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	4798      	blx	r3
    wait_us(1); // Data setup time    
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f003 fa49 	bl	8004ec4 <wait_us>
    this->_setEnable(false);   
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3358      	adds	r3, #88	; 0x58
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	4798      	blx	r3
    wait_us(1); // Data hold time
 8001a40:	2001      	movs	r0, #1
 8001a42:	f003 fa3f 	bl	8004ec4 <wait_us>
    
    this->_setEnable(true);        
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	3358      	adds	r3, #88	; 0x58
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2101      	movs	r1, #1
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
    this->_setData(value);        // Low nibble
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3364      	adds	r3, #100	; 0x64
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6839      	ldr	r1, [r7, #0]
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	4798      	blx	r3
    wait_us(1); // Data setup time        
 8001a62:	2001      	movs	r0, #1
 8001a64:	f003 fa2e 	bl	8004ec4 <wait_us>
    this->_setEnable(false);    
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	3358      	adds	r3, #88	; 0x58
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2100      	movs	r1, #0
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	4798      	blx	r3
    wait_us(1); // Datahold time
 8001a76:	2001      	movs	r0, #1
 8001a78:	f003 fa24 	bl	8004ec4 <wait_us>

// Enable is Low
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_ZN12TextLCD_Base13_writeCommandEi>:

// Write a command byte to the LCD controller
void TextLCD_Base::_writeCommand(int command) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]

    this->_setRS(false);        
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	335c      	adds	r3, #92	; 0x5c
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2100      	movs	r1, #0
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	4798      	blx	r3
    wait_us(1);  // Data setup time for RS       
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f003 fa11 	bl	8004ec4 <wait_us>
    
    this->_writeByte(command);   
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3368      	adds	r3, #104	; 0x68
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6839      	ldr	r1, [r7, #0]
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	4798      	blx	r3
    wait_us(40); // most instructions take 40us            
 8001ab0:	2028      	movs	r0, #40	; 0x28
 8001ab2:	f003 fa07 	bl	8004ec4 <wait_us>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_ZN12TextLCD_Base10_writeDataEi>:

// Write a data byte to the LCD controller
void TextLCD_Base::_writeData(int data) {
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]

    this->_setRS(true);            
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	335c      	adds	r3, #92	; 0x5c
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	4798      	blx	r3
    wait_us(1);  // Data setup time for RS 
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f003 f9f4 	bl	8004ec4 <wait_us>
        
    this->_writeByte(data);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3368      	adds	r3, #104	; 0x68
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6839      	ldr	r1, [r7, #0]
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	4798      	blx	r3
    wait_us(40); // data writes take 40us                
 8001aea:	2028      	movs	r0, #40	; 0x28
 8001aec:	f003 f9ea 	bl	8004ec4 <wait_us>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <_ZN12TextLCD_Base10getAddressEii>:
   * @param column  The horizontal position from the left, indexed from 0
   * @param row     The vertical position from the top, indexed from 0
   * @return        The memoryaddress of screen column and row location
   *
   */
int TextLCD_Base::getAddress(int column, int row) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]

    switch (_addr_mode) {
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001b0c:	d054      	beq.n	8001bb8 <_ZN12TextLCD_Base10getAddressEii+0xc0>
 8001b0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001b12:	dc08      	bgt.n	8001b26 <_ZN12TextLCD_Base10getAddressEii+0x2e>
 8001b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b18:	d037      	beq.n	8001b8a <_ZN12TextLCD_Base10getAddressEii+0x92>
 8001b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b1e:	d03c      	beq.n	8001b9a <_ZN12TextLCD_Base10getAddressEii+0xa2>
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <_ZN12TextLCD_Base10getAddressEii+0x54>
 8001b24:	e0e6      	b.n	8001cf4 <_ZN12TextLCD_Base10getAddressEii+0x1fc>
 8001b26:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001b2a:	d06e      	beq.n	8001c0a <_ZN12TextLCD_Base10getAddressEii+0x112>
 8001b2c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001b30:	dc03      	bgt.n	8001b3a <_ZN12TextLCD_Base10getAddressEii+0x42>
 8001b32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b36:	d058      	beq.n	8001bea <_ZN12TextLCD_Base10getAddressEii+0xf2>
 8001b38:	e0dc      	b.n	8001cf4 <_ZN12TextLCD_Base10getAddressEii+0x1fc>
 8001b3a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001b3e:	f000 80a8 	beq.w	8001c92 <_ZN12TextLCD_Base10getAddressEii+0x19a>
 8001b42:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8001b46:	f000 80c6 	beq.w	8001cd6 <_ZN12TextLCD_Base10getAddressEii+0x1de>
 8001b4a:	e0d3      	b.n	8001cf4 <_ZN12TextLCD_Base10getAddressEii+0x1fc>

        case LCD_T_A:
          //Default addressing mode for 1, 2 and 4 rows (except 40x4)
          //The two available rows are split and stacked on top of eachother. Addressing for 3rd and 4th line continues where lines 1 and 2 were split.          
          //Displays top rows when less than four are used.          
          switch (row) {
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d81b      	bhi.n	8001b8a <_ZN12TextLCD_Base10getAddressEii+0x92>
 8001b52:	a201      	add	r2, pc, #4	; (adr r2, 8001b58 <_ZN12TextLCD_Base10getAddressEii+0x60>)
 8001b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b58:	08001b69 	.word	0x08001b69
 8001b5c:	08001b6d 	.word	0x08001b6d
 8001b60:	08001b73 	.word	0x08001b73
 8001b64:	08001b7d 	.word	0x08001b7d
            case 0:
              return 0x00 + column;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	e0c4      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
            case 1:
              return 0x40 + column;
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	3340      	adds	r3, #64	; 0x40
 8001b70:	e0c1      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
            case 2:
              return 0x00 + _nr_cols + column;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	69da      	ldr	r2, [r3, #28]
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	4413      	add	r3, r2
 8001b7a:	e0bc      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
            case 3:
              return 0x40 + _nr_cols + column;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4413      	add	r3, r2
 8001b88:	e0b5      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
//              return 0x00;                    
            }
          
        case LCD_T_B:
          // LCD8x2B is a special layout of LCD16x1
          if (row==0) 
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <_ZN12TextLCD_Base10getAddressEii+0x9c>
            return 0x00 + column;                        
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	e0b0      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
          else   
//            return _nr_cols + column;                                    
            return 0x08 + column;                        
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	3308      	adds	r3, #8
 8001b98:	e0ad      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
          if (column < 8) 
            return 0x00 + column;                        
          else   
            return 0x40 + (column - 8);                        
#else
          if (column < (_nr_cols >> 1)) 
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	105b      	asrs	r3, r3, #1
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	da01      	bge.n	8001baa <_ZN12TextLCD_Base10getAddressEii+0xb2>
            return 0x00 + column;                        
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	e0a5      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
          else   
            return 0x40 + (column - (_nr_cols >> 1));                        
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	105b      	asrs	r3, r3, #1
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	3340      	adds	r3, #64	; 0x40
 8001bb6:	e09e      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>

        case LCD_T_D:
          //Alternate addressing mode for 3 and 4 row displays (except 40x4). Used by PCF21XX, KS0073, KS0078, SSD1803
          //The 4 available rows start at a hardcoded address.                    
          //Displays top rows when less than four are used.
          switch (row) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d815      	bhi.n	8001bea <_ZN12TextLCD_Base10getAddressEii+0xf2>
 8001bbe:	a201      	add	r2, pc, #4	; (adr r2, 8001bc4 <_ZN12TextLCD_Base10getAddressEii+0xcc>)
 8001bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc4:	08001bd5 	.word	0x08001bd5
 8001bc8:	08001bd9 	.word	0x08001bd9
 8001bcc:	08001bdf 	.word	0x08001bdf
 8001bd0:	08001be5 	.word	0x08001be5
            case 0:
              return 0x00 + column;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	e08e      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
            case 1:
              return 0x20 + column;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	3320      	adds	r3, #32
 8001bdc:	e08b      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
            case 2:
              return 0x40 + column;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3340      	adds	r3, #64	; 0x40
 8001be2:	e088      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
            case 3:
              return 0x60 + column;
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	3360      	adds	r3, #96	; 0x60
 8001be8:	e085      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>

        case LCD_T_D1:
          //Alternate addressing mode for 3 row displays. Used by PCF21XX, KS0073, KS0078, SSD1803
          //The 4 available rows start at a hardcoded address.                              
          //Skips top row of 4 row display and starts display at row 1
          switch (row) {
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d006      	beq.n	8001bfe <_ZN12TextLCD_Base10getAddressEii+0x106>
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d007      	beq.n	8001c04 <_ZN12TextLCD_Base10getAddressEii+0x10c>
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d108      	bne.n	8001c0a <_ZN12TextLCD_Base10getAddressEii+0x112>
            case 0:
              return 0x20 + column;
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	3320      	adds	r3, #32
 8001bfc:	e07b      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
            case 1:
              return 0x40 + column;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	3340      	adds	r3, #64	; 0x40
 8001c02:	e078      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
            case 2:
              return 0x60 + column;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	3360      	adds	r3, #96	; 0x60
 8001c08:	e075      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
            }
        
        case LCD_T_E:                
          // LCD40x4 is a special case since it has 2 controllers.
          // Each controller is configured as 40x2 (Type A)
          if (row<2) { 
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	dc1f      	bgt.n	8001c50 <_ZN12TextLCD_Base10getAddressEii+0x158>
            // Test to see if we need to switch between controllers  
            if (_ctrl_idx != _LCDCtrl_0) {
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d015      	beq.n	8001c46 <_ZN12TextLCD_Base10getAddressEii+0x14e>

              // Second LCD controller Cursor Off
              _setCursorAndDisplayMode(_currentMode, CurOff_BlkOff);    
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c20:	2200      	movs	r2, #0
 8001c22:	4619      	mov	r1, r3
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f939 	bl	8001e9c <_ZN12TextLCD_Base24_setCursorAndDisplayModeENS_7LCDModeENS_9LCDCursorE>

              // Select primary controller
              _ctrl_idx = _LCDCtrl_0;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

              // Restore cursormode on primary LCD controller
              _setCursorAndDisplayMode(_currentMode, _currentCursor);    
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 f92b 	bl	8001e9c <_ZN12TextLCD_Base24_setCursorAndDisplayModeENS_7LCDModeENS_9LCDCursorE>
            }           
            
            return 0x00 + (row * 0x40) + column;          
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	019a      	lsls	r2, r3, #6
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	e052      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
          }
          else {

            // Test to see if we need to switch between controllers  
            if (_ctrl_idx != _LCDCtrl_1) {
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d015      	beq.n	8001c86 <_ZN12TextLCD_Base10getAddressEii+0x18e>
              // Primary LCD controller Cursor Off
              _setCursorAndDisplayMode(_currentMode, CurOff_BlkOff);    
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c60:	2200      	movs	r2, #0
 8001c62:	4619      	mov	r1, r3
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 f919 	bl	8001e9c <_ZN12TextLCD_Base24_setCursorAndDisplayModeENS_7LCDModeENS_9LCDCursorE>

              // Select secondary controller
              _ctrl_idx = _LCDCtrl_1;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

              // Restore cursormode on secondary LCD controller
              _setCursorAndDisplayMode(_currentMode, _currentCursor);    
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f90b 	bl	8001e9c <_ZN12TextLCD_Base24_setCursorAndDisplayModeENS_7LCDModeENS_9LCDCursorE>
            }           
                                   
            return 0x00 + ((row-2) * 0x40) + column;          
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3b02      	subs	r3, #2
 8001c8a:	019a      	lsls	r2, r3, #6
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4413      	add	r3, r2
 8001c90:	e031      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
          } 
            
        case LCD_T_F:
          //Alternate addressing mode for 3 row displays.
          //The first half of 3rd row continues from 1st row, the second half continues from 2nd row.                              
          switch (row) {
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d005      	beq.n	8001ca4 <_ZN12TextLCD_Base10getAddressEii+0x1ac>
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d006      	beq.n	8001caa <_ZN12TextLCD_Base10getAddressEii+0x1b2>
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d11a      	bne.n	8001cd6 <_ZN12TextLCD_Base10getAddressEii+0x1de>
            case 0:
              return 0x00 + column;
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	e028      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
            case 1:
              return 0x40 + column;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	3340      	adds	r3, #64	; 0x40
 8001ca8:	e025      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
            case 2:
              if (column < (_nr_cols >> 1)) // check first or second half of line
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	105b      	asrs	r3, r3, #1
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	da04      	bge.n	8001cc0 <_ZN12TextLCD_Base10getAddressEii+0x1c8>
                return (0x00 + _nr_cols + column);                        
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	e01a      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
              else   
                return (0x40 + _nr_cols + (column - (_nr_cols >> 1)));                        
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	105b      	asrs	r3, r3, #1
 8001cce:	68b9      	ldr	r1, [r7, #8]
 8001cd0:	1acb      	subs	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	e00f      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
//              return 0x00;                    
          }

        case LCD_T_G:
          //Alternate addressing mode for 3 row displays. Used by ST7036
          switch (row) {
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d005      	beq.n	8001ce8 <_ZN12TextLCD_Base10getAddressEii+0x1f0>
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d006      	beq.n	8001cee <_ZN12TextLCD_Base10getAddressEii+0x1f6>
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d107      	bne.n	8001cf4 <_ZN12TextLCD_Base10getAddressEii+0x1fc>
            case 0:
              return 0x00 + column;
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	e006      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
            case 1:
              return 0x10 + column;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	3310      	adds	r3, #16
 8001cec:	e003      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
            case 2:
              return 0x20 + column;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3320      	adds	r3, #32
 8001cf2:	e000      	b.n	8001cf6 <_ZN12TextLCD_Base10getAddressEii+0x1fe>
//              return 0x00;                    
            }

        // Should never get here.
        default:            
            return 0x00;        
 8001cf4:	2300      	movs	r3, #0

    } // switch _addr_mode
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop

08001d00 <_ZN12TextLCD_Base10setAddressEii>:
/** Set the memoryaddress of screen column and row location
  *
  * @param column  The horizontal position from the left, indexed from 0
  * @param row     The vertical position from the top, indexed from 0
  */
void TextLCD_Base::setAddress(int column, int row) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
   
// Sanity Check column
    if (column < 0) {
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	da03      	bge.n	8001d1a <_ZN12TextLCD_Base10setAddressEii+0x1a>
      _column = 0;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	639a      	str	r2, [r3, #56]	; 0x38
 8001d18:	e00d      	b.n	8001d36 <_ZN12TextLCD_Base10setAddressEii+0x36>
    }
    else if (column >= _nr_cols) {
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	db05      	blt.n	8001d30 <_ZN12TextLCD_Base10setAddressEii+0x30>
      _column = _nr_cols - 1;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	1e5a      	subs	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d2e:	e002      	b.n	8001d36 <_ZN12TextLCD_Base10setAddressEii+0x36>
    } else _column = column;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	639a      	str	r2, [r3, #56]	; 0x38
    
// Sanity Check row
    if (row < 0) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	da03      	bge.n	8001d44 <_ZN12TextLCD_Base10setAddressEii+0x44>
      _row = 0;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d42:	e00d      	b.n	8001d60 <_ZN12TextLCD_Base10setAddressEii+0x60>
    }
    else if (row >= _nr_rows) {
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	db05      	blt.n	8001d5a <_ZN12TextLCD_Base10setAddressEii+0x5a>
      _row = _nr_rows - 1;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	1e5a      	subs	r2, r3, #1
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d58:	e002      	b.n	8001d60 <_ZN12TextLCD_Base10setAddressEii+0x60>
    } else _row = row;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    
// Compute the memory address
// For LCD40x4:  switch controllers if needed
//               switch cursor if needed
    int addr = getAddress(_column, _row);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d68:	461a      	mov	r2, r3
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f7ff fec4 	bl	8001af8 <_ZN12TextLCD_Base10getAddressEii>
 8001d70:	6178      	str	r0, [r7, #20]
    
    _writeCommand(0x80 | addr);
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d78:	4619      	mov	r1, r3
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f7ff fe82 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
}
 8001d80:	bf00      	nop
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_ZN12TextLCD_Base7columnsEv>:
  *
  * @return  The number of columns
  *
  * Note: some configurations are commented out because they have not yet been tested due to lack of hardware     
  */   
int TextLCD_Base::columns() {
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
    
  // Columns encoded in b7..b0
  //return (_type & 0xFF);          
  return _nr_cols;           
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_ZN12TextLCD_Base4rowsEv>:
  *
  * @return  The number of rows
  *
  * Note: some configurations are commented out because they have not yet been tested due to lack of hardware     
  */
int TextLCD_Base::rows() {
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  // Rows encoded in b15..b8  
  //return ((_type >> 8) & 0xFF); 
  return _nr_rows;          
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_ZN12TextLCD_Base9setCursorENS_9LCDCursorE>:

/** Set the Cursormode
  *
  * @param cursorMode  The Cursor mode (CurOff_BlkOff, CurOn_BlkOff, CurOff_BlkOn, CurOn_BlkOn)
  */
void TextLCD_Base::setCursor(LCDCursor cursorMode) { 
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	70fb      	strb	r3, [r7, #3]

  // Save new cursor mode, needed when 2 controllers are in use or when display is switched off/on
  _currentCursor = cursorMode;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  // Configure only current LCD controller
  _setCursorAndDisplayMode(_currentMode, _currentCursor);    
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dd8:	461a      	mov	r2, r3
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f85e 	bl	8001e9c <_ZN12TextLCD_Base24_setCursorAndDisplayModeENS_7LCDModeENS_9LCDCursorE>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_ZN12TextLCD_Base7setModeENS_7LCDModeE>:

/** Set the Displaymode
  *
  * @param displayMode The Display mode (DispOff, DispOn)
  */
void TextLCD_Base::setMode(LCDMode displayMode) { 
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	70fb      	strb	r3, [r7, #3]

  // Save new displayMode, needed when 2 controllers are in use or when cursor is changed
  _currentMode = displayMode;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	78fa      	ldrb	r2, [r7, #3]
 8001df8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

#if (LCD_TWO_CTRL == 1)    
  // Select and configure second LCD controller when needed
  if(_type==LCD40x4) {
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a25      	ldr	r2, [pc, #148]	; (8001e98 <_ZN12TextLCD_Base7setModeENS_7LCDModeE+0xb0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d13a      	bne.n	8001e7c <_ZN12TextLCD_Base7setModeENS_7LCDModeE+0x94>
    if (_ctrl_idx==_LCDCtrl_0) {      
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d11a      	bne.n	8001e46 <_ZN12TextLCD_Base7setModeENS_7LCDModeE+0x5e>
      // Configure primary LCD controller
      _setCursorAndDisplayMode(_currentMode, _currentCursor);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f83c 	bl	8001e9c <_ZN12TextLCD_Base24_setCursorAndDisplayModeENS_7LCDModeENS_9LCDCursorE>

      // Select 2nd controller
      _ctrl_idx=_LCDCtrl_1;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
      // Configure secondary LCD controller    
      _setCursorAndDisplayMode(_currentMode, CurOff_BlkOff);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e32:	2200      	movs	r2, #0
 8001e34:	4619      	mov	r1, r3
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f830 	bl	8001e9c <_ZN12TextLCD_Base24_setCursorAndDisplayModeENS_7LCDModeENS_9LCDCursorE>

      // Restore current controller
      _ctrl_idx=_LCDCtrl_0;       
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#else
  // Support only one LCD controller
  _setCursorAndDisplayMode(_currentMode, _currentCursor);

#endif  
}
 8001e44:	e024      	b.n	8001e90 <_ZN12TextLCD_Base7setModeENS_7LCDModeE+0xa8>
      _ctrl_idx=_LCDCtrl_0;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      _setCursorAndDisplayMode(_currentMode, CurOff_BlkOff);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e54:	2200      	movs	r2, #0
 8001e56:	4619      	mov	r1, r3
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f81f 	bl	8001e9c <_ZN12TextLCD_Base24_setCursorAndDisplayModeENS_7LCDModeENS_9LCDCursorE>
      _ctrl_idx=_LCDCtrl_1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      _setCursorAndDisplayMode(_currentMode, _currentCursor);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e72:	461a      	mov	r2, r3
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f811 	bl	8001e9c <_ZN12TextLCD_Base24_setCursorAndDisplayModeENS_7LCDModeENS_9LCDCursorE>
}
 8001e7a:	e009      	b.n	8001e90 <_ZN12TextLCD_Base7setModeENS_7LCDModeE+0xa8>
    _setCursorAndDisplayMode(_currentMode, _currentCursor);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e88:	461a      	mov	r2, r3
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f806 	bl	8001e9c <_ZN12TextLCD_Base24_setCursorAndDisplayModeENS_7LCDModeENS_9LCDCursorE>
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	05042800 	.word	0x05042800

08001e9c <_ZN12TextLCD_Base24_setCursorAndDisplayModeENS_7LCDModeENS_9LCDCursorE>:

/** Low level method to restore the cursortype and display mode for current controller
  */     
void TextLCD_Base::_setCursorAndDisplayMode(LCDMode displayMode, LCDCursor cursorType) {    
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	70fb      	strb	r3, [r7, #3]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	70bb      	strb	r3, [r7, #2]

  // Configure current LCD controller   
  switch (_ctrl) {
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	4a10      	ldr	r2, [pc, #64]	; (8001ef4 <_ZN12TextLCD_Base24_setCursorAndDisplayModeENS_7LCDModeENS_9LCDCursorE+0x58>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d10e      	bne.n	8001ed4 <_ZN12TextLCD_Base24_setCursorAndDisplayModeENS_7LCDModeENS_9LCDCursorE+0x38>
    case ST7070: 
      //ST7070 does not support Cursorblink. The P bit selects the font instead !   
      _writeCommand(0x08 | displayMode | (cursorType & 0x02));    
 8001eb6:	78bb      	ldrb	r3, [r7, #2]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f043 0308 	orr.w	r3, r3, #8
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	4619      	mov	r1, r3
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff fdd9 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
      break;
 8001ed2:	e00b      	b.n	8001eec <_ZN12TextLCD_Base24_setCursorAndDisplayModeENS_7LCDModeENS_9LCDCursorE+0x50>
    default:      
      _writeCommand(0x08 | displayMode | cursorType);
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	78bb      	ldrb	r3, [r7, #2]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff fdcd 	bl	8001a84 <_ZN12TextLCD_Base13_writeCommandEi>
      break;
 8001eea:	bf00      	nop
  } //switch      
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	43000015 	.word	0x43000015

08001ef8 <_ZN12TextLCD_BaseD1Ev>:
 *
 * @brief Currently supports 8x1, 8x2, 12x2, 12x3, 12x4, 16x1, 16x2, 16x3, 16x4, 20x2, 20x4, 24x2, 24x4, 40x2 and 40x4 panels
 *        Interface options include direct mbed pins, I2C portexpander (PCF8474/PCF8574A or MCP23008) or 
 *        SPI bus shiftregister (74595) or native I2C or SPI interfaces for some supported devices. 
 */
class TextLCD_Base : public Stream {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <_ZN12TextLCD_BaseD1Ev+0x28>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <_ZN12TextLCD_BaseD1Ev+0x2c>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f001 feea 	bl	8003ce8 <_ZN4mbed6StreamD1Ev>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	08008ad0 	.word	0x08008ad0
 8001f24:	08008b44 	.word	0x08008b44

08001f28 <_ZThn4_N12TextLCD_BaseD1Ev>:
 8001f28:	f1a0 0004 	sub.w	r0, r0, #4
 8001f2c:	e7e4      	b.n	8001ef8 <_ZN12TextLCD_BaseD1Ev>
 8001f2e:	bf00      	nop

08001f30 <_ZN12TextLCD_BaseD0Ev>:
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ffdd 	bl	8001ef8 <_ZN12TextLCD_BaseD1Ev>
 8001f3e:	2158      	movs	r1, #88	; 0x58
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f005 f921 	bl	8007188 <_ZdlPvj>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <_ZThn4_N12TextLCD_BaseD0Ev>:
 8001f50:	f1a0 0004 	sub.w	r0, r0, #4
 8001f54:	e7ec      	b.n	8001f30 <_ZN12TextLCD_BaseD0Ev>
	...

08001f58 <_ZN7TextLCDC1E7PinNameS0_S0_S0_S0_S0_N12TextLCD_Base7LCDTypeES0_S0_NS1_7LCDCtrlE>:
 * @param type   Sets the panel size/addressing mode (default = LCD16x2)
 * @param bl     Backlight control line (optional, default = NC)  
 * @param e2     Enable2 line (clock for second controller, LCD40x4 only) 
 * @param ctrl   LCD controller (default = HD44780)   
 */ 
TextLCD::TextLCD(PinName rs, PinName e,
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b093      	sub	sp, #76	; 0x4c
 8001f5c:	af0e      	add	r7, sp, #56	; 0x38
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	4608      	mov	r0, r1
 8001f62:	4611      	mov	r1, r2
 8001f64:	461a      	mov	r2, r3
 8001f66:	4603      	mov	r3, r0
 8001f68:	817b      	strh	r3, [r7, #10]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	813b      	strh	r3, [r7, #8]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80fb      	strh	r3, [r7, #6]
                 PinName d4, PinName d5, PinName d6, PinName d7,
                 LCDType type, PinName bl, PinName e2, LCDCtrl ctrl) :
                 TextLCD_Base(type, ctrl), 
                 _rs(rs), _e(e), _d(d4, d5, d6, d7) {
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fbe1 	bl	8000740 <_ZN12TextLCD_BaseC1ENS_7LCDTypeENS_7LCDCtrlE>
 8001f7e:	4a48      	ldr	r2, [pc, #288]	; (80020a0 <_ZN7TextLCDC1E7PinNameS0_S0_S0_S0_S0_N12TextLCD_Base7LCDTypeES0_S0_NS1_7LCDCtrlE+0x148>)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	4a47      	ldr	r2, [pc, #284]	; (80020a4 <_ZN7TextLCDC1E7PinNameS0_S0_S0_S0_S0_N12TextLCD_Base7LCDTypeES0_S0_NS1_7LCDCtrlE+0x14c>)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3358      	adds	r3, #88	; 0x58
 8001f8e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fb1f 	bl	80005d8 <_ZN4mbed10DigitalOutC1E7PinName>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3374      	adds	r3, #116	; 0x74
 8001f9e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fb17 	bl	80005d8 <_ZN4mbed10DigitalOutC1E7PinName>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8001fb0:	f9b7 4024 	ldrsh.w	r4, [r7, #36]	; 0x24
 8001fb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001fb8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc0:	930c      	str	r3, [sp, #48]	; 0x30
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fcc:	930a      	str	r3, [sp, #40]	; 0x28
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8001fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd8:	9308      	str	r3, [sp, #32]
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	9307      	str	r3, [sp, #28]
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe4:	9306      	str	r3, [sp, #24]
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fea:	9305      	str	r3, [sp, #20]
 8001fec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff0:	9304      	str	r3, [sp, #16]
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffc:	9302      	str	r3, [sp, #8]
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	4623      	mov	r3, r4
 800200c:	f000 fb50 	bl	80026b0 <_ZN4mbed6BusOutC1E7PinNameS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_>

  // The hardware Backlight pin is optional. Test and make sure whether it exists or not to prevent illegal access.
  if (bl != NC) {
 8002010:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d015      	beq.n	8002046 <_ZN7TextLCDC1E7PinNameS0_S0_S0_S0_S0_N12TextLCD_Base7LCDTypeES0_S0_NS1_7LCDCtrlE+0xee>
    _bl = new DigitalOut(bl);   //Construct new pin 
 800201a:	201c      	movs	r0, #28
 800201c:	f002 fef8 	bl	8004e10 <_Znwj>
 8002020:	4603      	mov	r3, r0
 8002022:	461c      	mov	r4, r3
 8002024:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002028:	4619      	mov	r1, r3
 800202a:	4620      	mov	r0, r4
 800202c:	f7fe fad4 	bl	80005d8 <_ZN4mbed10DigitalOutC1E7PinName>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
    _bl->write(0);              //Deactivate    
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fae6 	bl	8000610 <_ZN4mbed10DigitalOut5writeEi>
 8002044:	e003      	b.n	800204e <_ZN7TextLCDC1E7PinNameS0_S0_S0_S0_S0_N12TextLCD_Base7LCDTypeES0_S0_NS1_7LCDCtrlE+0xf6>
  }
  else {
    // No Hardware Backlight pin       
    _bl = NULL;                 //Construct dummy pin     
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  }  

  // The hardware Enable2 pin is only needed for LCD40x4. Test and make sure whether it exists or not to prevent illegal access.
  if (e2 != NC) {
 800204e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002056:	d015      	beq.n	8002084 <_ZN7TextLCDC1E7PinNameS0_S0_S0_S0_S0_N12TextLCD_Base7LCDTypeES0_S0_NS1_7LCDCtrlE+0x12c>
    _e2 = new DigitalOut(e2);   //Construct new pin 
 8002058:	201c      	movs	r0, #28
 800205a:	f002 fed9 	bl	8004e10 <_Znwj>
 800205e:	4603      	mov	r3, r0
 8002060:	461c      	mov	r4, r3
 8002062:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002066:	4619      	mov	r1, r3
 8002068:	4620      	mov	r0, r4
 800206a:	f7fe fab5 	bl	80005d8 <_ZN4mbed10DigitalOutC1E7PinName>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
    _e2->write(0);              //Deactivate    
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fac7 	bl	8000610 <_ZN4mbed10DigitalOut5writeEi>
 8002082:	e003      	b.n	800208c <_ZN7TextLCDC1E7PinNameS0_S0_S0_S0_S0_N12TextLCD_Base7LCDTypeES0_S0_NS1_7LCDCtrlE+0x134>
  }
  else {
    // No Hardware Enable pin       
    _e2 = NULL;                 //Construct dummy pin     
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  }  
  
   _init(_LCD_DL_4);   // Set Datalength to 4 bit for mbed bus interfaces
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fb8d 	bl	80007b0 <_ZN12TextLCD_Base5_initENS_14_LCDDatalengthE>
}
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}
 80020a0:	08008a4c 	.word	0x08008a4c
 80020a4:	08008ac0 	.word	0x08008ac0

080020a8 <_ZN7TextLCDD1Ev>:
/** Destruct a TextLCD interface for using regular mbed pins
  *
  * @param  none
  * @return none
  */ 
TextLCD::~TextLCD() {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	4a15      	ldr	r2, [pc, #84]	; (8002108 <_ZN7TextLCDD1Ev+0x60>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	4a15      	ldr	r2, [pc, #84]	; (800210c <_ZN7TextLCDD1Ev+0x64>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	605a      	str	r2, [r3, #4]
   if (_bl != NULL) {delete _bl;}  // BL pin
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <_ZN7TextLCDD1Ev+0x2c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80020cc:	211c      	movs	r1, #28
 80020ce:	4618      	mov	r0, r3
 80020d0:	f005 f85a 	bl	8007188 <_ZdlPvj>
   if (_e2 != NULL) {delete _e2;}  // E2 pin
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <_ZN7TextLCDD1Ev+0x44>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e4:	211c      	movs	r1, #28
 80020e6:	4618      	mov	r0, r3
 80020e8:	f005 f84e 	bl	8007188 <_ZdlPvj>
TextLCD::~TextLCD() {
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3390      	adds	r3, #144	; 0x90
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 fb6b 	bl	80027cc <_ZN4mbed6BusOutD1Ev>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fefd 	bl	8001ef8 <_ZN12TextLCD_BaseD1Ev>
}
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	08008a4c 	.word	0x08008a4c
 800210c:	08008ac0 	.word	0x08008ac0

08002110 <_ZThn4_N7TextLCDD1Ev>:
   /** Destruct a TextLCD interface for using regular mbed pins
     *
     * @param  none
     * @return none
     */ 
    virtual ~TextLCD();
 8002110:	f1a0 0004 	sub.w	r0, r0, #4
 8002114:	f7ff bfc8 	b.w	80020a8 <_ZN7TextLCDD1Ev>

08002118 <_ZN7TextLCDD0Ev>:
TextLCD::~TextLCD() {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
}
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ffc1 	bl	80020a8 <_ZN7TextLCDD1Ev>
 8002126:	21e4      	movs	r1, #228	; 0xe4
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f005 f82d 	bl	8007188 <_ZdlPvj>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_ZThn4_N7TextLCDD0Ev>:
 8002138:	f1a0 0004 	sub.w	r0, r0, #4
 800213c:	f7ff bfec 	b.w	8002118 <_ZN7TextLCDD0Ev>

08002140 <_ZN7TextLCD10_setEnableEb>:
  * Used for mbed pins, I2C bus expander or SPI shiftregister
  * Default PinName value for E2 is NC, must be used as pointer to avoid issues with mbed lib and DigitalOut pins
  *   @param  value true or false
  *   @return none 
  */
void TextLCD::_setEnable(bool value) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	70fb      	strb	r3, [r7, #3]

  if(_ctrl_idx==_LCDCtrl_0) {
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002152:	2b00      	cmp	r3, #0
 8002154:	d110      	bne.n	8002178 <_ZN7TextLCD10_setEnableEb+0x38>
    if (value) {
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d006      	beq.n	800216a <_ZN7TextLCD10_setEnableEb+0x2a>
      _e  = 1;    // Set E bit 
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3374      	adds	r3, #116	; 0x74
 8002160:	2101      	movs	r1, #1
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fa62 	bl	800062c <_ZN4mbed10DigitalOutaSEi>
    }  
    else { 
      if (_e2 != NULL) {_e2->write(0);}  //Reset E2 bit     
    }  
  }    
}    
 8002168:	e022      	b.n	80021b0 <_ZN7TextLCD10_setEnableEb+0x70>
      _e  = 0;    // Reset E bit  
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3374      	adds	r3, #116	; 0x74
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fa5b 	bl	800062c <_ZN4mbed10DigitalOutaSEi>
}    
 8002176:	e01b      	b.n	80021b0 <_ZN7TextLCD10_setEnableEb+0x70>
    if (value) {
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00c      	beq.n	8002198 <_ZN7TextLCD10_setEnableEb+0x58>
      if (_e2 != NULL) {_e2->write(1);}  //Set E2 bit
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <_ZN7TextLCD10_setEnableEb+0x70>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218e:	2101      	movs	r1, #1
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe fa3d 	bl	8000610 <_ZN4mbed10DigitalOut5writeEi>
}    
 8002196:	e00b      	b.n	80021b0 <_ZN7TextLCD10_setEnableEb+0x70>
      if (_e2 != NULL) {_e2->write(0);}  //Reset E2 bit     
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <_ZN7TextLCD10_setEnableEb+0x70>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fa30 	bl	8000610 <_ZN4mbed10DigitalOut5writeEi>
}    
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_ZN7TextLCD6_setRSEb>:

// Set RS pin
// Used for mbed pins, I2C bus expander or SPI shiftregister
void TextLCD::_setRS(bool value) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]

  if (value) {
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d006      	beq.n	80021d8 <_ZN7TextLCD6_setRSEb+0x20>
    _rs  = 1;    // Set RS bit 
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3358      	adds	r3, #88	; 0x58
 80021ce:	2101      	movs	r1, #1
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe fa2b 	bl	800062c <_ZN4mbed10DigitalOutaSEi>
  }  
  else  {
    _rs  = 0;    // Reset RS bit 
  }  
}    
 80021d6:	e005      	b.n	80021e4 <_ZN7TextLCD6_setRSEb+0x2c>
    _rs  = 0;    // Reset RS bit 
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3358      	adds	r3, #88	; 0x58
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fa24 	bl	800062c <_ZN4mbed10DigitalOutaSEi>
}    
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_ZN7TextLCD6_setBLEb>:
  * Used for mbed pins, I2C bus expander or SPI shiftregister
  * Default PinName value is NC, must be used as pointer to avoid issues with mbed lib and DigitalOut pins
  *   @param  value true or false
  *   @return none  
  */
void TextLCD::_setBL(bool value) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	70fb      	strb	r3, [r7, #3]

  if (value) {
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00c      	beq.n	8002218 <_ZN7TextLCD6_setBLEb+0x2c>
    if (_bl != NULL) {_bl->write(1);}  //Set BL bit
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <_ZN7TextLCD6_setBLEb+0x44>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800220e:	2101      	movs	r1, #1
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe f9fd 	bl	8000610 <_ZN4mbed10DigitalOut5writeEi>
  }  
  else { 
    if (_bl != NULL) {_bl->write(0);}  //Reset BL bit  
  }  
}    
 8002216:	e00b      	b.n	8002230 <_ZN7TextLCD6_setBLEb+0x44>
    if (_bl != NULL) {_bl->write(0);}  //Reset BL bit  
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800221e:	2b00      	cmp	r3, #0
 8002220:	d006      	beq.n	8002230 <_ZN7TextLCD6_setBLEb+0x44>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe f9f0 	bl	8000610 <_ZN4mbed10DigitalOut5writeEi>
}    
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <_ZN7TextLCD8_setDataEi>:

// Place the 4bit data on the databus
// Used for mbed pins, I2C bus expander or SPI shifregister
void TextLCD::_setData(int value) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  _d = value & 0x0F;   // Write Databits 
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	4619      	mov	r1, r3
 8002250:	4610      	mov	r0, r2
 8002252:	f000 fb2e 	bl	80028b2 <_ZN4mbed6BusOutaSEi>
}    
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 8002266:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */




DigitalOut myLed(LED1);
 8002268:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800226c:	2105      	movs	r1, #5
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe f9b2 	bl	80005d8 <_ZN4mbed10DigitalOutC1E7PinName>

	myLed = 0;
 8002274:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f9d6 	bl	800062c <_ZN4mbed10DigitalOutaSEi>
	myLed = 1;
 8002280:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8002284:	2101      	movs	r1, #1
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f9d0 	bl	800062c <_ZN4mbed10DigitalOutaSEi>
	myLed = 0;
 800228c:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f9ca 	bl	800062c <_ZN4mbed10DigitalOutaSEi>
	myLed = 1;
 8002298:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800229c:	2101      	movs	r1, #1
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe f9c4 	bl	800062c <_ZN4mbed10DigitalOutaSEi>
  /* USER CODE END 1 */
  
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022a4:	f002 fed6 	bl	8005054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022a8:	f000 f84e 	bl	8002348 <_Z18SystemClock_Configv>

  TextLCD lcd(PC_9, PC_8, PB_8, PC_6, PB_9, PC_5, TextLCD::LCD20x4);
 80022ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80022b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022b4:	9306      	str	r3, [sp, #24]
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	9305      	str	r3, [sp, #20]
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295
 80022c0:	9304      	str	r3, [sp, #16]
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <main+0xd8>)
 80022c4:	9303      	str	r3, [sp, #12]
 80022c6:	2325      	movs	r3, #37	; 0x25
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	2319      	movs	r3, #25
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	2326      	movs	r3, #38	; 0x26
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2318      	movs	r3, #24
 80022d4:	2228      	movs	r2, #40	; 0x28
 80022d6:	2129      	movs	r1, #41	; 0x29
 80022d8:	f7ff fe3e 	bl	8001f58 <_ZN7TextLCDC1E7PinNameS0_S0_S0_S0_S0_N12TextLCD_Base7LCDTypeES0_S0_NS1_7LCDCtrlE>

  lcd.locate(0, 0);
 80022dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80022e0:	2200      	movs	r2, #0
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fae9 	bl	80018bc <_ZN12TextLCD_Base6locateEii>

  lcd.printf("Hello everyone.^^");
 80022ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80022ee:	4913      	ldr	r1, [pc, #76]	; (800233c <main+0xdc>)
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 fdd6 	bl	8003ea2 <_ZN4mbed6Stream6printfEPKcz>

  lcd.locate(0, 1);
 80022f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80022fa:	2201      	movs	r2, #1
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fadc 	bl	80018bc <_ZN12TextLCD_Base6locateEii>

  lcd.printf("Welcome to the world of TextLCD.");
 8002304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002308:	490d      	ldr	r1, [pc, #52]	; (8002340 <main+0xe0>)
 800230a:	4618      	mov	r0, r3
 800230c:	f001 fdc9 	bl	8003ea2 <_ZN4mbed6Stream6printfEPKcz>

  lcd.locate(0, 3);
 8002310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002314:	2203      	movs	r2, #3
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff facf 	bl	80018bc <_ZN12TextLCD_Base6locateEii>

  lcd.printf("My board is F401RE.");
 800231e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002322:	4908      	ldr	r1, [pc, #32]	; (8002344 <main+0xe4>)
 8002324:	4618      	mov	r0, r3
 8002326:	f001 fdbc 	bl	8003ea2 <_ZN4mbed6Stream6printfEPKcz>

  lcd.cls();
 800232a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fa82 	bl	8001838 <_ZN12TextLCD_Base3clsEv>

  while(1)
 8002334:	e7fe      	b.n	8002334 <main+0xd4>
 8002336:	bf00      	nop
 8002338:	00041400 	.word	0x00041400
 800233c:	080088d0 	.word	0x080088d0
 8002340:	080088e4 	.word	0x080088e4
 8002344:	08008908 	.word	0x08008908

08002348 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b094      	sub	sp, #80	; 0x50
 800234c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800234e:	f107 0320 	add.w	r3, r7, #32
 8002352:	2230      	movs	r2, #48	; 0x30
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f005 fa9d 	bl	8007896 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800235c:	f107 030c 	add.w	r3, r7, #12
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	4b2e      	ldr	r3, [pc, #184]	; (800242c <_Z18SystemClock_Configv+0xe4>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	4a2d      	ldr	r2, [pc, #180]	; (800242c <_Z18SystemClock_Configv+0xe4>)
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237a:	6413      	str	r3, [r2, #64]	; 0x40
 800237c:	4b2b      	ldr	r3, [pc, #172]	; (800242c <_Z18SystemClock_Configv+0xe4>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002388:	2300      	movs	r3, #0
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	4b28      	ldr	r3, [pc, #160]	; (8002430 <_Z18SystemClock_Configv+0xe8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002394:	4a26      	ldr	r2, [pc, #152]	; (8002430 <_Z18SystemClock_Configv+0xe8>)
 8002396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <_Z18SystemClock_Configv+0xe8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023a8:	2302      	movs	r3, #2
 80023aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023ac:	2301      	movs	r3, #1
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023b0:	2310      	movs	r3, #16
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023b4:	2302      	movs	r3, #2
 80023b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023b8:	2300      	movs	r3, #0
 80023ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80023bc:	2310      	movs	r3, #16
 80023be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80023c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80023c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80023c6:	2304      	movs	r3, #4
 80023c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023ca:	2307      	movs	r3, #7
 80023cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ce:	f107 0320 	add.w	r3, r7, #32
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 f826 	bl	8005424 <HAL_RCC_OscConfig>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	bf14      	ite	ne
 80023de:	2301      	movne	r3, #1
 80023e0:	2300      	moveq	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 80023e8:	f000 f824 	bl	8002434 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ec:	230f      	movs	r3, #15
 80023ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023f0:	2302      	movs	r3, #2
 80023f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002402:	f107 030c 	add.w	r3, r7, #12
 8002406:	2102      	movs	r1, #2
 8002408:	4618      	mov	r0, r3
 800240a:	f003 fa4d 	bl	80058a8 <HAL_RCC_ClockConfig>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf14      	ite	ne
 8002414:	2301      	movne	r3, #1
 8002416:	2300      	moveq	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800241e:	f000 f809 	bl	8002434 <Error_Handler>
  }
}
 8002422:	bf00      	nop
 8002424:	3750      	adds	r7, #80	; 0x50
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	40007000 	.word	0x40007000

08002434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_MspInit+0x4c>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <HAL_MspInit+0x4c>)
 8002454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002458:	6453      	str	r3, [r2, #68]	; 0x44
 800245a:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_MspInit+0x4c>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_MspInit+0x4c>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a08      	ldr	r2, [pc, #32]	; (8002490 <HAL_MspInit+0x4c>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_MspInit+0x4c>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800

08002494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	; 0x28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 0314 	add.w	r3, r7, #20
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a19      	ldr	r2, [pc, #100]	; (8002518 <HAL_UART_MspInit+0x84>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d12b      	bne.n	800250e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_UART_MspInit+0x88>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	4a17      	ldr	r2, [pc, #92]	; (800251c <HAL_UART_MspInit+0x88>)
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c4:	6413      	str	r3, [r2, #64]	; 0x40
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_UART_MspInit+0x88>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_UART_MspInit+0x88>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_UART_MspInit+0x88>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_UART_MspInit+0x88>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024ee:	230c      	movs	r3, #12
 80024f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024fe:	2307      	movs	r3, #7
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002502:	f107 0314 	add.w	r3, r7, #20
 8002506:	4619      	mov	r1, r3
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <HAL_UART_MspInit+0x8c>)
 800250a:	f002 fe09 	bl	8005120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800250e:	bf00      	nop
 8002510:	3728      	adds	r7, #40	; 0x28
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40004400 	.word	0x40004400
 800251c:	40023800 	.word	0x40023800
 8002520:	40020000 	.word	0x40020000

08002524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002536:	e7fe      	b.n	8002536 <HardFault_Handler+0x4>

08002538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800253c:	e7fe      	b.n	800253c <MemManage_Handler+0x4>

0800253e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002542:	e7fe      	b.n	8002542 <BusFault_Handler+0x4>

08002544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002548:	e7fe      	b.n	8002548 <UsageFault_Handler+0x4>

0800254a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002578:	f002 fd8e 	bl	8005098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}

08002580 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <_sbrk+0x50>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d102      	bne.n	8002596 <_sbrk+0x16>
		heap_end = &end;
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <_sbrk+0x50>)
 8002592:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <_sbrk+0x54>)
 8002594:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002596:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <_sbrk+0x50>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <_sbrk+0x50>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	466a      	mov	r2, sp
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d907      	bls.n	80025ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80025aa:	f004 fdf5 	bl	8007198 <__errno>
 80025ae:	4602      	mov	r2, r0
 80025b0:	230c      	movs	r3, #12
 80025b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295
 80025b8:	e006      	b.n	80025c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <_sbrk+0x50>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	4a03      	ldr	r2, [pc, #12]	; (80025d0 <_sbrk+0x50>)
 80025c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80025c6:	68fb      	ldr	r3, [r7, #12]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	2000038c 	.word	0x2000038c
 80025d4:	20000748 	.word	0x20000748

080025d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002610 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025de:	e003      	b.n	80025e8 <LoopCopyDataInit>

080025e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025e6:	3104      	adds	r1, #4

080025e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025e8:	480b      	ldr	r0, [pc, #44]	; (8002618 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025f0:	d3f6      	bcc.n	80025e0 <CopyDataInit>
  ldr  r2, =_sbss
 80025f2:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025f4:	e002      	b.n	80025fc <LoopFillZerobss>

080025f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025f8:	f842 3b04 	str.w	r3, [r2], #4

080025fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002600:	d3f9      	bcc.n	80025f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002602:	f002 fc79 	bl	8004ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002606:	f005 f8a3 	bl	8007750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800260a:	f7ff fe29 	bl	8002260 <main>
  bx  lr    
 800260e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002610:	20017e00 	.word	0x20017e00
  ldr  r3, =_sidata
 8002614:	08008ecc 	.word	0x08008ecc
  ldr  r0, =_sdata
 8002618:	20000200 	.word	0x20000200
  ldr  r3, =_edata
 800261c:	20000370 	.word	0x20000370
  ldr  r2, =_sbss
 8002620:	20000370 	.word	0x20000370
  ldr  r3, = _ebss
 8002624:	20000748 	.word	0x20000748

08002628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002628:	e7fe      	b.n	8002628 <ADC_IRQHandler>

0800262a <_ZN13PlatformMutexC1Ev>:
#else
/** A stub mutex for when an RTOS is not present
*/
class PlatformMutex : private mbed::NonCopyable<PlatformMutex> {
public:
    PlatformMutex()
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
    {
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f825 	bl	8002682 <_ZN4mbed11NonCopyableI13PlatformMutexEC1Ev>
        // Stub

    }
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <_ZN13PlatformMutexD1Ev>:
    ~PlatformMutex()
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
    {
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f824 	bl	8002698 <_ZN4mbed11NonCopyableI13PlatformMutexED1Ev>
        // Stub
    }
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <_ZN13PlatformMutex4lockEv>:

    void lock()
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
    {
        // Do nothing
    }
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <_ZN13PlatformMutex6unlockEv>:

    void unlock()
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
    {
        // Do nothing
    }
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <_ZN4mbed11NonCopyableI13PlatformMutexEC1Ev>:
class NonCopyable {
protected:
    /**
     * Disallow construction of NonCopyable objects from outside of its hierarchy.
     */
    NonCopyable() { }
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <_ZN4mbed11NonCopyableI13PlatformMutexED1Ev>:
    /**
     * Disallow destruction of NonCopyable objects from outside of its hierarchy.
     */
    ~NonCopyable() { }
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <_ZN4mbed6BusOutC1E7PinNameS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_>:
#include "drivers/BusOut.h"
#include "platform/mbed_assert.h"

namespace mbed {

BusOut::BusOut(PinName p0, PinName p1, PinName p2, PinName p3, PinName p4, PinName p5, PinName p6, PinName p7, PinName p8, PinName p9, PinName p10, PinName p11, PinName p12, PinName p13, PinName p14, PinName p15)
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b08f      	sub	sp, #60	; 0x3c
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	4608      	mov	r0, r1
 80026ba:	4611      	mov	r1, r2
 80026bc:	461a      	mov	r2, r3
 80026be:	4603      	mov	r3, r0
 80026c0:	817b      	strh	r3, [r7, #10]
 80026c2:	460b      	mov	r3, r1
 80026c4:	813b      	strh	r3, [r7, #8]
 80026c6:	4613      	mov	r3, r2
 80026c8:	80fb      	strh	r3, [r7, #6]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f919 	bl	8002902 <_ZN4mbed11NonCopyableINS_6BusOutEEC1Ev>
 80026d0:	4a3d      	ldr	r2, [pc, #244]	; (80027c8 <_ZN4mbed6BusOutC1E7PinNameS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_+0x118>)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3348      	adds	r3, #72	; 0x48
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ffa5 	bl	800262a <_ZN13PlatformMutexC1Ev>
{
    PinName pins[16] = {p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15};
 80026e0:	897b      	ldrh	r3, [r7, #10]
 80026e2:	82bb      	strh	r3, [r7, #20]
 80026e4:	893b      	ldrh	r3, [r7, #8]
 80026e6:	82fb      	strh	r3, [r7, #22]
 80026e8:	88fb      	ldrh	r3, [r7, #6]
 80026ea:	833b      	strh	r3, [r7, #24]
 80026ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026f0:	837b      	strh	r3, [r7, #26]
 80026f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026f6:	83bb      	strh	r3, [r7, #28]
 80026f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026fc:	83fb      	strh	r3, [r7, #30]
 80026fe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002702:	843b      	strh	r3, [r7, #32]
 8002704:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002708:	847b      	strh	r3, [r7, #34]	; 0x22
 800270a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800270e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002710:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002714:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002716:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800271a:	853b      	strh	r3, [r7, #40]	; 0x28
 800271c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8002720:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002722:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002726:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002728:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800272c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800272e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002732:	863b      	strh	r3, [r7, #48]	; 0x30
 8002734:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002738:	867b      	strh	r3, [r7, #50]	; 0x32

    // No lock needed in the constructor
    _nc_mask = 0;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	645a      	str	r2, [r3, #68]	; 0x44
    for (int i = 0; i < 16; i++) {
 8002740:	2300      	movs	r3, #0
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
 8002744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002746:	2b0f      	cmp	r3, #15
 8002748:	dc38      	bgt.n	80027bc <_ZN4mbed6BusOutC1E7PinNameS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_+0x10c>
        _pin[i] = (pins[i] != NC) ? new DigitalOut(pins[i]) : 0;
 800274a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002752:	4413      	add	r3, r2
 8002754:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d011      	beq.n	8002782 <_ZN4mbed6BusOutC1E7PinNameS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_+0xd2>
 800275e:	201c      	movs	r0, #28
 8002760:	f002 fb56 	bl	8004e10 <_Znwj>
 8002764:	4603      	mov	r3, r0
 8002766:	461c      	mov	r4, r3
 8002768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002770:	4413      	add	r3, r2
 8002772:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8002776:	4619      	mov	r1, r3
 8002778:	4620      	mov	r0, r4
 800277a:	f7fd ff2d 	bl	80005d8 <_ZN4mbed10DigitalOutC1E7PinName>
 800277e:	4621      	mov	r1, r4
 8002780:	e000      	b.n	8002784 <_ZN4mbed6BusOutC1E7PinNameS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_+0xd4>
 8002782:	2100      	movs	r1, #0
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	6059      	str	r1, [r3, #4]
        if (pins[i] != NC) {
 800278e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002796:	4413      	add	r3, r2
 8002798:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d008      	beq.n	80027b4 <_ZN4mbed6BusOutC1E7PinNameS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_+0x104>
            _nc_mask |= (1 << i);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027a6:	2101      	movs	r1, #1
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	431a      	orrs	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	645a      	str	r2, [r3, #68]	; 0x44
    for (int i = 0; i < 16; i++) {
 80027b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b6:	3301      	adds	r3, #1
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
 80027ba:	e7c3      	b.n	8002744 <_ZN4mbed6BusOutC1E7PinNameS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_+0x94>
        }
    }
}
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4618      	mov	r0, r3
 80027c0:	373c      	adds	r7, #60	; 0x3c
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd90      	pop	{r4, r7, pc}
 80027c6:	bf00      	nop
 80027c8:	08008b54 	.word	0x08008b54

080027cc <_ZN4mbed6BusOutD1Ev>:
            _nc_mask |= (1 << i);
        }
    }
}

BusOut::~BusOut()
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	4a14      	ldr	r2, [pc, #80]	; (8002828 <_ZN4mbed6BusOutD1Ev+0x5c>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
{
    // No lock needed in the destructor
    for (int i = 0; i < 16; i++) {
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b0f      	cmp	r3, #15
 80027e2:	dc13      	bgt.n	800280c <_ZN4mbed6BusOutD1Ev+0x40>
        if (_pin[i] != 0) {
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <_ZN4mbed6BusOutD1Ev+0x38>
            delete _pin[i];
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	211c      	movs	r1, #28
 80027fe:	4618      	mov	r0, r3
 8002800:	f004 fcc2 	bl	8007188 <_ZdlPvj>
    for (int i = 0; i < 16; i++) {
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3301      	adds	r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	e7e8      	b.n	80027de <_ZN4mbed6BusOutD1Ev+0x12>
BusOut::~BusOut()
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3348      	adds	r3, #72	; 0x48
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff16 	bl	8002642 <_ZN13PlatformMutexD1Ev>
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f87e 	bl	8002918 <_ZN4mbed11NonCopyableINS_6BusOutEED1Ev>
        }
    }
}
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	08008b54 	.word	0x08008b54

0800282c <_ZN4mbed6BusOutD0Ev>:
BusOut::~BusOut()
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
}
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff ffc9 	bl	80027cc <_ZN4mbed6BusOutD1Ev>
 800283a:	214c      	movs	r1, #76	; 0x4c
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f004 fca3 	bl	8007188 <_ZdlPvj>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <_ZN4mbed6BusOut5writeEi>:

void BusOut::write(int value)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
    lock();
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	3308      	adds	r3, #8
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b0f      	cmp	r3, #15
 800286a:	dc18      	bgt.n	800289e <_ZN4mbed6BusOut5writeEi+0x52>
        if (_pin[i] != 0) {
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00d      	beq.n	8002896 <_ZN4mbed6BusOut5writeEi+0x4a>
            _pin[i]->write((value >> i) & 1);
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	6858      	ldr	r0, [r3, #4]
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	fa42 f303 	asr.w	r3, r2, r3
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	4619      	mov	r1, r3
 8002892:	f7fd febd 	bl	8000610 <_ZN4mbed10DigitalOut5writeEi>
    for (int i = 0; i < 16; i++) {
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	3301      	adds	r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	e7e3      	b.n	8002866 <_ZN4mbed6BusOut5writeEi+0x1a>
        }
    }
    unlock();
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	330c      	adds	r3, #12
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <_ZN4mbed6BusOutaSEi>:
    unlock();
    return v;
}

BusOut &BusOut::operator= (int v)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	6039      	str	r1, [r7, #0]
    // Underlying write is thread safe
    write(v);
 80028bc:	6839      	ldr	r1, [r7, #0]
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ffc4 	bl	800284c <_ZN4mbed6BusOut5writeEi>
    return *this;
 80028c4:	687b      	ldr	r3, [r7, #4]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <_ZN4mbed6BusOut4lockEv>:
    // Underlying read is thread safe
    return read();
}

void BusOut::lock()
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
    _mutex.lock();
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3348      	adds	r3, #72	; 0x48
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff febd 	bl	800265a <_ZN13PlatformMutex4lockEv>
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <_ZN4mbed6BusOut6unlockEv>:

void BusOut::unlock()
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
    _mutex.unlock();
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3348      	adds	r3, #72	; 0x48
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff feba 	bl	800266e <_ZN13PlatformMutex6unlockEv>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <_ZN4mbed11NonCopyableINS_6BusOutEEC1Ev>:
    NonCopyable() { }
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <_ZN4mbed11NonCopyableINS_6BusOutEED1Ev>:
    ~NonCopyable() { }
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <_ZL14singleton_lockv>:
 * This function is typically used to provide
 * exclusive access when initializing a
 * global object.
 */
inline static void singleton_lock(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0
#ifdef MBED_CONF_RTOS_PRESENT
    osMutexAcquire(singleton_mutex_id, osWaitForever);
#endif
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <_ZL16singleton_unlockv>:
 * This function is typically used to provide
 * exclusive access when initializing a
 * global object.
 */
inline static void singleton_unlock(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
#ifdef MBED_CONF_RTOS_PRESENT
    osMutexRelease(singleton_mutex_id);
#endif
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <_ZN12SingletonPtrI13PlatformMutexEptEv>:
    /** Get a pointer to the underlying singleton
     *
     * @returns
     *   A pointer to the singleton
     */
    T *operator->()
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
    {
        return get();
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f805 	bl	800297a <_ZN12SingletonPtrI13PlatformMutexE3getEv>
 8002970:	4603      	mov	r3, r0
    }
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_ZN12SingletonPtrI13PlatformMutexE3getEv>:
    T *get()
 800297a:	b590      	push	{r4, r7, lr}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
        if (NULL == _ptr) {
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d118      	bne.n	80029bc <_ZN12SingletonPtrI13PlatformMutexE3getEv+0x42>
            singleton_lock();
 800298a:	f7ff ffdc 	bl	8002946 <_ZL14singleton_lockv>
            if (NULL == _ptr) {
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d110      	bne.n	80029b8 <_ZN12SingletonPtrI13PlatformMutexE3getEv+0x3e>
                _ptr = new (_data) T();
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3304      	adds	r3, #4
 800299a:	4619      	mov	r1, r3
 800299c:	2001      	movs	r0, #1
 800299e:	f7ff ffc6 	bl	800292e <_ZnwjPv>
 80029a2:	4604      	mov	r4, r0
 80029a4:	2c00      	cmp	r4, #0
 80029a6:	d004      	beq.n	80029b2 <_ZN12SingletonPtrI13PlatformMutexE3getEv+0x38>
 80029a8:	4620      	mov	r0, r4
 80029aa:	f7ff fe3e 	bl	800262a <_ZN13PlatformMutexC1Ev>
 80029ae:	4622      	mov	r2, r4
 80029b0:	e000      	b.n	80029b4 <_ZN12SingletonPtrI13PlatformMutexE3getEv+0x3a>
 80029b2:	4622      	mov	r2, r4
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	601a      	str	r2, [r3, #0]
            singleton_unlock();
 80029b8:	f7ff ffcc 	bl	8002954 <_ZL16singleton_unlockv>
        return _ptr;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
    }
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd90      	pop	{r4, r7, pc}

080029c8 <_ZN4mbed8CallbackIFviEED1Ev>:
        new (this) Callback(func, obj);
    }

    /** Destroy a callback
     */
    ~Callback()
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
    {
        if (_ops) {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d004      	beq.n	80029e2 <_ZN4mbed8CallbackIFviEED1Ev+0x1a>
            _ops->dtor(this);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4798      	blx	r3
        }
    }
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <_ZN4mbed8CallbackIFviEEC1EPS1_>:
    Callback(R(*func)(A0) = 0)
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
        if (!func) {
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d105      	bne.n	8002a08 <_ZN4mbed8CallbackIFviEEC1EPS1_+0x1c>
            memset(this, 0, sizeof(Callback));
 80029fc:	2210      	movs	r2, #16
 80029fe:	2100      	movs	r1, #0
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f004 ff48 	bl	8007896 <memset>
 8002a06:	e004      	b.n	8002a12 <_ZN4mbed8CallbackIFviEEC1EPS1_+0x26>
            generate(func);
 8002a08:	463b      	mov	r3, r7
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f805 	bl	8002a1c <_ZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_>
    }
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_ZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_>:
        void (*dtor)(void *);
    } *_ops;

    // Generate operations for function object
    template <typename F>
    void generate(const F &f)
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
            &Callback::function_dtor<F>,
        };

        MBED_STATIC_ASSERT(sizeof(Callback) - sizeof(_ops) >= sizeof(F),
                           "Type F must not exceed the size of the Callback class");
        memset(this, 0, sizeof(Callback));
 8002a26:	2210      	movs	r2, #16
 8002a28:	2100      	movs	r1, #0
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f004 ff33 	bl	8007896 <memset>
        new (this) F(f);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4619      	mov	r1, r3
 8002a34:	2004      	movs	r0, #4
 8002a36:	f7ff ff7a 	bl	800292e <_ZnwjPv>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <_ZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_+0x2a>
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	601a      	str	r2, [r3, #0]
        _ops = &ops;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a02      	ldr	r2, [pc, #8]	; (8002a54 <_ZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_+0x38>)
 8002a4a:	60da      	str	r2, [r3, #12]
    }
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	08008b64 	.word	0x08008b64

08002a58 <_ZN4mbed8CallbackIFviEE13function_callIPS1_EEvPKvi>:

    // Function attributes
    template <typename F>
    static R function_call(const void *p, A0 a0)
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
    {
        return (*(F *)p)(a0);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6838      	ldr	r0, [r7, #0]
 8002a68:	4798      	blx	r3
 8002a6a:	bf00      	nop
    }
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <_ZN4mbed8CallbackIFviEE13function_moveIPS1_EEvPvPKv>:

    template <typename F>
    static void function_move(void *d, const void *p)
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
    {
        new (d) F(*(F *)p);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	2004      	movs	r0, #4
 8002a82:	f7ff ff54 	bl	800292e <_ZnwjPv>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <_ZN4mbed8CallbackIFviEE13function_moveIPS1_EEvPvPKv+0x20>
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	601a      	str	r2, [r3, #0]
    }
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <_ZN4mbed8CallbackIFviEE13function_dtorIPS1_EEvPv>:

    template <typename F>
    static void function_dtor(void *p)
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
    {
        ((F *)p)->~F();
    }
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <_ZN4mbed13transaction_tC1Ev>:
    void *rx_buffer;           /**< Rx buffer */
    size_t rx_length;          /**< Length of Rx buffer */
    uint32_t event;            /**< Event for a transaction */
    event_callback_t callback; /**< User's callback */
    uint8_t width;             /**< Buffer's word width (8, 16, 32, 64) */
} transaction_t;
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3314      	adds	r3, #20
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff95 	bl	80029ec <_ZN4mbed8CallbackIFviEEC1EPS1_>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <_ZN4mbed13transaction_tD1Ev>:
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3314      	adds	r3, #20
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff75 	bl	80029c8 <_ZN4mbed8CallbackIFviEED1Ev>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmEC1Ev>:
 *  @note CounterType must be unsigned and consistent with BufferSize
 */
template<typename T, uint32_t BufferSize, typename CounterType = uint32_t>
class CircularBuffer {
public:
    CircularBuffer() : _head(0), _tail(0), _full(false)
 8002ae8:	b5b0      	push	{r4, r5, r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2401      	movs	r4, #1
 8002af4:	461d      	mov	r5, r3
 8002af6:	2c00      	cmp	r4, #0
 8002af8:	db05      	blt.n	8002b06 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmEC1Ev+0x1e>
 8002afa:	4628      	mov	r0, r5
 8002afc:	f000 f820 	bl	8002b40 <_ZN4mbed11TransactionINS_3SPIEEC1Ev>
 8002b00:	352c      	adds	r5, #44	; 0x2c
 8002b02:	3c01      	subs	r4, #1
 8002b04:	e7f7      	b.n	8002af6 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmEC1Ev+0xe>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        MBED_STATIC_ASSERT(
            (sizeof(CounterType) >= sizeof(uint32_t)) ||
            (BufferSize < (((uint64_t) 1) << (sizeof(CounterType) * 8))),
            "Invalid BufferSize for the CounterType"
        );
    }
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bdb0      	pop	{r4, r5, r7, pc}

08002b24 <_ZN4mbed11TransactionINS_3SPIEED1Ev>:

    Transaction() : _obj(), _data()
    {
    }

    ~Transaction()
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
    {
    }
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ffcb 	bl	8002acc <_ZN4mbed13transaction_tD1Ev>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <_ZN4mbed11TransactionINS_3SPIEEC1Ev>:
    Transaction() : _obj(), _data()
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3304      	adds	r3, #4
 8002b52:	2228      	movs	r2, #40	; 0x28
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f004 fe9d 	bl	8007896 <memset>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ffa4 	bl	8002aae <_ZN4mbed13transaction_tC1Ev>
    }
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <_Z41__static_initialization_and_destruction_0ii>:
#endif
}

#endif

} // namespace mbed
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d107      	bne.n	8002b90 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d102      	bne.n	8002b90 <_Z41__static_initialization_and_destruction_0ii+0x20>
CircularBuffer<Transaction<SPI>, TRANSACTION_QUEUE_SIZE_SPI> SPI::_transaction_buffer;
 8002b8a:	4809      	ldr	r0, [pc, #36]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002b8c:	f7ff ffac 	bl	8002ae8 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmEC1Ev>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d107      	bne.n	8002ba6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d102      	bne.n	8002ba6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002ba0:	4803      	ldr	r0, [pc, #12]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002ba2:	f000 f807 	bl	8002bb4 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmED1Ev>
} // namespace mbed
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000390 	.word	0x20000390

08002bb4 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmED1Ev>:

    ~CircularBuffer()
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
    {
    }
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmED1Ev+0x24>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	429c      	cmp	r4, r3
 8002bcc:	d004      	beq.n	8002bd8 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmED1Ev+0x24>
 8002bce:	3c2c      	subs	r4, #44	; 0x2c
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f7ff ffa7 	bl	8002b24 <_ZN4mbed11TransactionINS_3SPIEED1Ev>
 8002bd6:	e7f7      	b.n	8002bc8 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmED1Ev+0x14>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd90      	pop	{r4, r7, pc}

08002be2 <_GLOBAL__sub_I__ZN4mbed3SPI19_transaction_bufferE>:
 8002be2:	b580      	push	{r7, lr}
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bea:	2001      	movs	r0, #1
 8002bec:	f7ff ffc0 	bl	8002b70 <_Z41__static_initialization_and_destruction_0ii>
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <_GLOBAL__sub_D__ZN4mbed3SPI19_transaction_bufferE>:
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7ff ffb8 	bl	8002b70 <_Z41__static_initialization_and_destruction_0ii>
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <_ZN4mbed10FileHandleD1Ev>:
    virtual ~FileHandle() {}
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <_ZN4mbed10FileHandleD1Ev+0x20>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f84c 	bl	8002cb0 <_ZN4mbed11NonCopyableINS_10FileHandleEED1Ev>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	08008bac 	.word	0x08008bac

08002c28 <_ZN4mbed10FileHandleD0Ev>:
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff ffe7 	bl	8002c04 <_ZN4mbed10FileHandleD1Ev>
 8002c36:	2104      	movs	r1, #4
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f004 faa5 	bl	8007188 <_ZdlPvj>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <_ZN4mbed10FileHandle4tellEv>:
    virtual off_t tell()
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
        return seek(0, SEEK_CUR);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3310      	adds	r3, #16
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
 8002c60:	4603      	mov	r3, r0
    }
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <_ZN4mbed10FileHandle6rewindEv>:
    virtual void rewind()
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
        seek(0, SEEK_SET);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3310      	adds	r3, #16
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	4798      	blx	r3
    }
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <_ZN4mbed10FileHandleC1Ev>:
class FileHandle : private NonCopyable<FileHandle> {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f816 	bl	8002cc6 <_ZN4mbed11NonCopyableINS_10FileHandleEEC1Ev>
 8002c9a:	4a04      	ldr	r2, [pc, #16]	; (8002cac <_ZN4mbed10FileHandleC1Ev+0x20>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	08008bac 	.word	0x08008bac

08002cb0 <_ZN4mbed11NonCopyableINS_10FileHandleEED1Ev>:
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <_ZN4mbed11NonCopyableINS_10FileHandleEEC1Ev>:
    NonCopyable() { }
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <are_interrupts_enabled>:

static volatile bool critical_interrupts_enabled = false;
static volatile bool state_saved = false;

static bool are_interrupts_enabled(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ce6:	607b      	str	r3, [r7, #4]
  return(result);
 8002ce8:	687b      	ldr	r3, [r7, #4]
#if defined(__CORTEX_A9)
    return ((__get_CPSR() & 0x80) == 0);
#else
    return ((__get_PRIMASK() & 0x1) == 0);
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
#endif
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <hal_critical_section_enter>:


MBED_WEAK void hal_critical_section_enter(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
    const bool interrupt_state = are_interrupts_enabled();
 8002d0a:	f7ff ffe7 	bl	8002cdc <are_interrupts_enabled>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d12:	b672      	cpsid	i

    __disable_irq();

    if (state_saved == true) {
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <hal_critical_section_enter+0x30>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <hal_critical_section_enter+0x28>
        return;
    }

    critical_interrupts_enabled = interrupt_state;
 8002d1e:	4a06      	ldr	r2, [pc, #24]	; (8002d38 <hal_critical_section_enter+0x34>)
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	7013      	strb	r3, [r2, #0]
    state_saved = true;
 8002d24:	4b03      	ldr	r3, [pc, #12]	; (8002d34 <hal_critical_section_enter+0x30>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	e000      	b.n	8002d2e <hal_critical_section_enter+0x2a>
        return;
 8002d2c:	bf00      	nop
}
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200003f5 	.word	0x200003f5
 8002d38:	200003f4 	.word	0x200003f4

08002d3c <hal_critical_section_exit>:

MBED_WEAK void hal_critical_section_exit(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
#ifndef FEATURE_UVISOR
    // Interrupts must be disabled on invoking an exit from a critical section
    MBED_ASSERT(!are_interrupts_enabled());
#endif
    state_saved = false;
 8002d40:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <hal_critical_section_exit+0x20>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	701a      	strb	r2, [r3, #0]

    // Restore the IRQs to their state prior to entering the critical section
    if (critical_interrupts_enabled == true) {
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <hal_critical_section_exit+0x24>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d000      	beq.n	8002d52 <hal_critical_section_exit+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 8002d50:	b662      	cpsie	i
        __enable_irq();
    }
}
 8002d52:	bf00      	nop
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	200003f5 	.word	0x200003f5
 8002d60:	200003f4 	.word	0x200003f4

08002d64 <gpio_write>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
    if (value) {
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <gpio_write+0x1c>
        *obj->reg_set = obj->mask;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	601a      	str	r2, [r3, #0]
}
 8002d7e:	e005      	b.n	8002d8c <gpio_write+0x28>
        *obj->reg_clr = obj->mask << 16;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	0412      	lsls	r2, r2, #16
 8002d8a:	601a      	str	r2, [r3, #0]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <_gpio_init_out>:
        gpio_mode(gpio, mode);
    }
}

static inline void _gpio_init_out(gpio_t *gpio, PinName pin, PinMode mode, int value)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	817b      	strh	r3, [r7, #10]
 8002da6:	4613      	mov	r3, r2
 8002da8:	727b      	strb	r3, [r7, #9]
    gpio_init(gpio, pin);
 8002daa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002dae:	4619      	mov	r1, r3
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f003 fbe9 	bl	8006588 <gpio_init>
    if (pin != NC) {
 8002db6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbe:	d00c      	beq.n	8002dda <_gpio_init_out+0x42>
        gpio_write(gpio, value);
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f7ff ffce 	bl	8002d64 <gpio_write>
        gpio_dir(gpio, PIN_OUTPUT);
 8002dc8:	2101      	movs	r1, #1
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f003 fc32 	bl	8006634 <gpio_dir>
        gpio_mode(gpio, mode);
 8002dd0:	7a7b      	ldrb	r3, [r7, #9]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f003 fc1b 	bl	8006610 <gpio_mode>
    }
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <gpio_init_out>:
{
    _gpio_init_in(gpio, pin, mode);
}

void gpio_init_out(gpio_t *gpio, PinName pin)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	807b      	strh	r3, [r7, #2]
    gpio_init_out_ex(gpio, pin, 0);
 8002dee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002df2:	2200      	movs	r2, #0
 8002df4:	4619      	mov	r1, r3
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f804 	bl	8002e04 <gpio_init_out_ex>
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <gpio_init_out_ex>:

void gpio_init_out_ex(gpio_t *gpio, PinName pin, int value)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	817b      	strh	r3, [r7, #10]
    _gpio_init_out(gpio, pin, PullNone, value);
 8002e12:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff ffbc 	bl	8002d98 <_gpio_init_out>
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <pinmap_pinout>:
 */
#include "hal/pinmap.h"
#include "platform/mbed_error.h"

void pinmap_pinout(PinName pin, const PinMap *map)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	4603      	mov	r3, r0
 8002e30:	6039      	str	r1, [r7, #0]
 8002e32:	80fb      	strh	r3, [r7, #6]
    if (pin == NC) {
 8002e34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d029      	beq.n	8002e92 <pinmap_pinout+0x6a>
        return;
    }

    while (map->pin != NC) {
 8002e3e:	e018      	b.n	8002e72 <pinmap_pinout+0x4a>
        if (map->pin == pin) {
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d10e      	bne.n	8002e6c <pinmap_pinout+0x44>
            pin_function(pin, map->function);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f003 fda9 	bl	80069b0 <pin_function>

            pin_mode(pin, PullNone);
 8002e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f003 fe1d 	bl	8006aa4 <pin_mode>
            return;
 8002e6a:	e013      	b.n	8002e94 <pinmap_pinout+0x6c>
        }
        map++;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	603b      	str	r3, [r7, #0]
    while (map->pin != NC) {
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d1e0      	bne.n	8002e40 <pinmap_pinout+0x18>
    }
    MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PINMAP_INVALID), "could not pinout", pin);
 8002e7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e82:	2300      	movs	r3, #0
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	2300      	movs	r3, #0
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4804      	ldr	r0, [pc, #16]	; (8002e9c <pinmap_pinout+0x74>)
 8002e8c:	f001 f994 	bl	80041b8 <mbed_error>
 8002e90:	e000      	b.n	8002e94 <pinmap_pinout+0x6c>
        return;
 8002e92:	bf00      	nop
}
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	80010130 	.word	0x80010130

08002ea0 <pinmap_merge>:

uint32_t pinmap_merge(uint32_t a, uint32_t b)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
    // both are the same (inc both NC)
    if (a == b) {
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d101      	bne.n	8002eb6 <pinmap_merge+0x16>
        return a;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	e015      	b.n	8002ee2 <pinmap_merge+0x42>
    }

    // one (or both) is not connected
    if (a == (uint32_t)NC) {
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d101      	bne.n	8002ec2 <pinmap_merge+0x22>
        return b;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	e00f      	b.n	8002ee2 <pinmap_merge+0x42>
    }
    if (b == (uint32_t)NC) {
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d101      	bne.n	8002ece <pinmap_merge+0x2e>
        return a;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	e009      	b.n	8002ee2 <pinmap_merge+0x42>
    }

    // mis-match error case
    MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PINMAP_INVALID), "pinmap mis-match", a);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4804      	ldr	r0, [pc, #16]	; (8002eec <pinmap_merge+0x4c>)
 8002eda:	f001 f96d 	bl	80041b8 <mbed_error>
    return (uint32_t)NC;
 8002ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	80010130 	.word	0x80010130

08002ef0 <pinmap_find_peripheral>:

uint32_t pinmap_find_peripheral(PinName pin, const PinMap *map)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	80fb      	strh	r3, [r7, #6]
    while (map->pin != NC) {
 8002efc:	e00c      	b.n	8002f18 <pinmap_find_peripheral+0x28>
        if (map->pin == pin) {
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f04:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d102      	bne.n	8002f12 <pinmap_find_peripheral+0x22>
            return map->peripheral;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	e00a      	b.n	8002f28 <pinmap_find_peripheral+0x38>
        }
        map++;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	330c      	adds	r3, #12
 8002f16:	603b      	str	r3, [r7, #0]
    while (map->pin != NC) {
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f22:	d1ec      	bne.n	8002efe <pinmap_find_peripheral+0xe>
    }
    return (uint32_t)NC;
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <pinmap_peripheral>:

uint32_t pinmap_peripheral(PinName pin, const PinMap *map)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	6039      	str	r1, [r7, #0]
 8002f3e:	80fb      	strh	r3, [r7, #6]
    uint32_t peripheral = (uint32_t)NC;
 8002f40:	f04f 33ff 	mov.w	r3, #4294967295
 8002f44:	60fb      	str	r3, [r7, #12]

    if (pin == (PinName)NC) {
 8002f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d102      	bne.n	8002f56 <pinmap_peripheral+0x22>
        return (uint32_t)NC;
 8002f50:	f04f 33ff 	mov.w	r3, #4294967295
 8002f54:	e013      	b.n	8002f7e <pinmap_peripheral+0x4a>
    }
    peripheral = pinmap_find_peripheral(pin, map);
 8002f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f5a:	6839      	ldr	r1, [r7, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ffc7 	bl	8002ef0 <pinmap_find_peripheral>
 8002f62:	60f8      	str	r0, [r7, #12]
    if ((uint32_t)NC == peripheral) { // no mapping available
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6a:	d107      	bne.n	8002f7c <pinmap_peripheral+0x48>
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PINMAP_INVALID), "pinmap not found for peripheral", peripheral);
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	2300      	movs	r3, #0
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	2100      	movs	r1, #0
 8002f76:	4804      	ldr	r0, [pc, #16]	; (8002f88 <pinmap_peripheral+0x54>)
 8002f78:	f001 f91e 	bl	80041b8 <mbed_error>
    }
    return peripheral;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	80010130 	.word	0x80010130

08002f8c <initialize>:

/*
 * Initialize a ticker instance.
 */
static void initialize(const ticker_data_t *ticker)
{
 8002f8c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002f90:	b08a      	sub	sp, #40	; 0x28
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
    // return if the queue has already been initialized, in that case the
    // interface used by the queue is already initialized.
    if (ticker->queue->initialized) {
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f040 80eb 	bne.w	800317a <initialize+0x1ee>
        return;
    }

    ticker->interface->init();
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4798      	blx	r3

    const ticker_info_t *info = ticker->interface->get_info();
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	4798      	blx	r3
 8002fb4:	61b8      	str	r0, [r7, #24]
    uint32_t frequency = info->frequency;
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
    if (info->frequency == 0) {
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <initialize+0x3c>
        MBED_ASSERT(0);
        frequency = 1000000;
 8002fc4:	4b6f      	ldr	r3, [pc, #444]	; (8003184 <initialize+0x1f8>)
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    uint8_t frequency_shifts = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    for (uint8_t i = 31; i > 0; --i) {
 8002fce:	231f      	movs	r3, #31
 8002fd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002fd4:	e012      	b.n	8002ffc <initialize+0x70>
        if ((1 << i) == frequency) {
 8002fd6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002fda:	2201      	movs	r2, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d104      	bne.n	8002ff2 <initialize+0x66>
            frequency_shifts = i;
 8002fe8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;
 8002ff0:	e008      	b.n	8003004 <initialize+0x78>
    for (uint8_t i = 31; i > 0; --i) {
 8002ff2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ffc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e8      	bne.n	8002fd6 <initialize+0x4a>
        }
    }

    uint32_t bits = info->bits;
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	61fb      	str	r3, [r7, #28]
    if ((info->bits > 32) || (info->bits < 4)) {
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b20      	cmp	r3, #32
 8003010:	d803      	bhi.n	800301a <initialize+0x8e>
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d801      	bhi.n	800301e <initialize+0x92>
        MBED_ASSERT(0);
        bits = 32;
 800301a:	2320      	movs	r3, #32
 800301c:	61fb      	str	r3, [r7, #28]
    }
    uint32_t max_delta = 0x7 << (bits - 4); // 7/16th
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3b04      	subs	r3, #4
 8003022:	2207      	movs	r2, #7
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	617b      	str	r3, [r7, #20]
    uint64_t max_delta_us =
        ((uint64_t)max_delta * 1000000 + frequency - 1) / frequency;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	4698      	mov	r8, r3
 800302e:	f04f 0900 	mov.w	r9, #0
 8003032:	4643      	mov	r3, r8
 8003034:	464c      	mov	r4, r9
 8003036:	f04f 0100 	mov.w	r1, #0
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	0162      	lsls	r2, r4, #5
 8003040:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003044:	0159      	lsls	r1, r3, #5
 8003046:	460b      	mov	r3, r1
 8003048:	4614      	mov	r4, r2
 800304a:	ebb3 0308 	subs.w	r3, r3, r8
 800304e:	eb64 0409 	sbc.w	r4, r4, r9
 8003052:	f04f 0100 	mov.w	r1, #0
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	0262      	lsls	r2, r4, #9
 800305c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003060:	0259      	lsls	r1, r3, #9
 8003062:	460b      	mov	r3, r1
 8003064:	4614      	mov	r4, r2
 8003066:	eb13 0308 	adds.w	r3, r3, r8
 800306a:	eb44 0409 	adc.w	r4, r4, r9
 800306e:	f04f 0b00 	mov.w	fp, #0
 8003072:	f04f 0c00 	mov.w	ip, #0
 8003076:	ea4f 1c84 	mov.w	ip, r4, lsl #6
 800307a:	ea4c 6c93 	orr.w	ip, ip, r3, lsr #26
 800307e:	ea4f 1b83 	mov.w	fp, r3, lsl #6
 8003082:	ebbb 0b03 	subs.w	fp, fp, r3
 8003086:	eb6c 0c04 	sbc.w	ip, ip, r4
 800308a:	eb1b 0108 	adds.w	r1, fp, r8
 800308e:	eb4c 0209 	adc.w	r2, ip, r9
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	4698      	mov	r8, r3
 8003096:	f04f 0900 	mov.w	r9, #0
 800309a:	eb18 0301 	adds.w	r3, r8, r1
 800309e:	eb49 0402 	adc.w	r4, r9, r2
 80030a2:	f113 30ff 	adds.w	r0, r3, #4294967295
 80030a6:	f144 31ff 	adc.w	r1, r4, #4294967295
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	f04f 0400 	mov.w	r4, #0
    uint64_t max_delta_us =
 80030b0:	461a      	mov	r2, r3
 80030b2:	4623      	mov	r3, r4
 80030b4:	f7fd f8f6 	bl	80002a4 <__aeabi_uldivmod>
 80030b8:	4603      	mov	r3, r0
 80030ba:	460c      	mov	r4, r1
 80030bc:	e9c7 3402 	strd	r3, r4, [r7, #8]

    ticker->queue->event_handler = NULL;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
    ticker->queue->head = NULL;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	605a      	str	r2, [r3, #4]
    ticker->queue->tick_last_read = ticker->interface->read();
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6854      	ldr	r4, [r2, #4]
 80030da:	4798      	blx	r3
 80030dc:	4603      	mov	r3, r0
 80030de:	6223      	str	r3, [r4, #32]
    ticker->queue->tick_remainder = 0;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	f04f 0400 	mov.w	r4, #0
 80030ec:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    ticker->queue->frequency = frequency;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f6:	609a      	str	r2, [r3, #8]
    ticker->queue->frequency_shifts = frequency_shifts;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003100:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    ticker->queue->bitmask = ((uint64_t)1 << bits) - 1;
 8003104:	f04f 0301 	mov.w	r3, #1
 8003108:	f04f 0400 	mov.w	r4, #0
 800310c:	69fa      	ldr	r2, [r7, #28]
 800310e:	f1a2 0020 	sub.w	r0, r2, #32
 8003112:	f1c2 0120 	rsb	r1, r2, #32
 8003116:	fa04 f602 	lsl.w	r6, r4, r2
 800311a:	fa03 f000 	lsl.w	r0, r3, r0
 800311e:	4306      	orrs	r6, r0
 8003120:	fa23 f101 	lsr.w	r1, r3, r1
 8003124:	430e      	orrs	r6, r1
 8003126:	fa03 f502 	lsl.w	r5, r3, r2
 800312a:	462a      	mov	r2, r5
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	3a01      	subs	r2, #1
 8003132:	60da      	str	r2, [r3, #12]
    ticker->queue->max_delta = max_delta;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	611a      	str	r2, [r3, #16]
    ticker->queue->max_delta_us = max_delta_us;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003144:	e9c2 3406 	strd	r3, r4, [r2, #24]
    ticker->queue->present_time = 0;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	f04f 0400 	mov.w	r4, #0
 8003154:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    ticker->queue->dispatching = false;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    ticker->queue->initialized = true;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    update_present_time(ticker);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f80b 	bl	8003188 <update_present_time>
    schedule_interrupt(ticker);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fa1b 	bl	80035ae <schedule_interrupt>
 8003178:	e000      	b.n	800317c <initialize+0x1f0>
        return;
 800317a:	bf00      	nop
}
 800317c:	3728      	adds	r7, #40	; 0x28
 800317e:	46bd      	mov	sp, r7
 8003180:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8003184:	000f4240 	.word	0x000f4240

08003188 <update_present_time>:

/**
 * Update the present timestamp value of a ticker.
 */
static void update_present_time(const ticker_data_t *const ticker)
{
 8003188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800318c:	b08d      	sub	sp, #52	; 0x34
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
    ticker_event_queue_t *queue = ticker->queue;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t ticker_time = ticker->interface->read();
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4798      	blx	r3
 80031a0:	6238      	str	r0, [r7, #32]
    if (ticker_time == ticker->queue->tick_last_read) {
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	6a3a      	ldr	r2, [r7, #32]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	f000 813b 	beq.w	8003426 <update_present_time+0x29e>
        // No work to do
        return;
    }

    uint64_t elapsed_ticks = (ticker_time - queue->tick_last_read) & queue->bitmask;
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	6a3a      	ldr	r2, [r7, #32]
 80031b6:	1ad2      	subs	r2, r2, r3
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4013      	ands	r3, r2
 80031be:	f04f 0400 	mov.w	r4, #0
 80031c2:	e9c7 3406 	strd	r3, r4, [r7, #24]
    queue->tick_last_read = ticker_time;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	6a3a      	ldr	r2, [r7, #32]
 80031ca:	621a      	str	r2, [r3, #32]

    uint64_t elapsed_us;
    if (1000000 == queue->frequency) {
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4a97      	ldr	r2, [pc, #604]	; (8003430 <update_present_time+0x2a8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d104      	bne.n	80031e0 <update_present_time+0x58>
        // Optimized for 1MHz

        elapsed_us = elapsed_ticks;
 80031d6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80031da:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 80031de:	e116      	b.n	800340e <update_present_time+0x286>
    } else if (0 != queue->frequency_shifts) {
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8092 	beq.w	8003310 <update_present_time+0x188>
        // Optimized for frequencies divisible by 2
        uint64_t us_x_ticks = elapsed_ticks * 1000000;
 80031ec:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80031f0:	4653      	mov	r3, sl
 80031f2:	465c      	mov	r4, fp
 80031f4:	f04f 0100 	mov.w	r1, #0
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	0162      	lsls	r2, r4, #5
 80031fe:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003202:	0159      	lsls	r1, r3, #5
 8003204:	460b      	mov	r3, r1
 8003206:	4614      	mov	r4, r2
 8003208:	ebb3 030a 	subs.w	r3, r3, sl
 800320c:	eb64 040b 	sbc.w	r4, r4, fp
 8003210:	f04f 0100 	mov.w	r1, #0
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	0262      	lsls	r2, r4, #9
 800321a:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800321e:	0259      	lsls	r1, r3, #9
 8003220:	460b      	mov	r3, r1
 8003222:	4614      	mov	r4, r2
 8003224:	eb13 030a 	adds.w	r3, r3, sl
 8003228:	eb44 040b 	adc.w	r4, r4, fp
 800322c:	f04f 0100 	mov.w	r1, #0
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	01a2      	lsls	r2, r4, #6
 8003236:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 800323a:	0199      	lsls	r1, r3, #6
 800323c:	1ac9      	subs	r1, r1, r3
 800323e:	eb62 0204 	sbc.w	r2, r2, r4
 8003242:	eb11 030a 	adds.w	r3, r1, sl
 8003246:	eb42 040b 	adc.w	r4, r2, fp
 800324a:	e9c7 3402 	strd	r3, r4, [r7, #8]
        elapsed_us = us_x_ticks >> queue->frequency_shifts;
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003254:	461a      	mov	r2, r3
 8003256:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800325a:	f1c2 0020 	rsb	r0, r2, #32
 800325e:	f1a2 0120 	sub.w	r1, r2, #32
 8003262:	fa23 f802 	lsr.w	r8, r3, r2
 8003266:	fa04 f000 	lsl.w	r0, r4, r0
 800326a:	ea48 0800 	orr.w	r8, r8, r0
 800326e:	fa24 f101 	lsr.w	r1, r4, r1
 8003272:	ea48 0801 	orr.w	r8, r8, r1
 8003276:	fa24 f902 	lsr.w	r9, r4, r2
 800327a:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28

        // Update remainder
        queue->tick_remainder += us_x_ticks - (elapsed_us << queue->frequency_shifts);
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	e9d3 890a 	ldrd	r8, r9, [r3, #40]	; 0x28
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800328a:	461a      	mov	r2, r3
 800328c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003290:	f1a2 0020 	sub.w	r0, r2, #32
 8003294:	f1c2 0120 	rsb	r1, r2, #32
 8003298:	fa04 f602 	lsl.w	r6, r4, r2
 800329c:	fa03 f000 	lsl.w	r0, r3, r0
 80032a0:	4306      	orrs	r6, r0
 80032a2:	fa23 f101 	lsr.w	r1, r3, r1
 80032a6:	430e      	orrs	r6, r1
 80032a8:	fa03 f502 	lsl.w	r5, r3, r2
 80032ac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80032b0:	1b5b      	subs	r3, r3, r5
 80032b2:	eb64 0406 	sbc.w	r4, r4, r6
 80032b6:	4619      	mov	r1, r3
 80032b8:	4622      	mov	r2, r4
 80032ba:	eb11 0308 	adds.w	r3, r1, r8
 80032be:	eb42 0409 	adc.w	r4, r2, r9
 80032c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        if (queue->tick_remainder >= queue->frequency) {
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f04f 0400 	mov.w	r4, #0
 80032d6:	42a2      	cmp	r2, r4
 80032d8:	bf08      	it	eq
 80032da:	4299      	cmpeq	r1, r3
 80032dc:	f0c0 8097 	bcc.w	800340e <update_present_time+0x286>
            elapsed_us += 1;
 80032e0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80032e4:	1c59      	adds	r1, r3, #1
 80032e6:	f144 0200 	adc.w	r2, r4, #0
 80032ea:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
            queue->tick_remainder -= queue->frequency;
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	461d      	mov	r5, r3
 80032fa:	f04f 0600 	mov.w	r6, #0
 80032fe:	460b      	mov	r3, r1
 8003300:	4614      	mov	r4, r2
 8003302:	1b5b      	subs	r3, r3, r5
 8003304:	eb64 0406 	sbc.w	r4, r4, r6
 8003308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800330e:	e07e      	b.n	800340e <update_present_time+0x286>
        }
    } else {
        // General case

        uint64_t us_x_ticks = elapsed_ticks * 1000000;
 8003310:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8003314:	462b      	mov	r3, r5
 8003316:	4634      	mov	r4, r6
 8003318:	f04f 0100 	mov.w	r1, #0
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	0162      	lsls	r2, r4, #5
 8003322:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003326:	0159      	lsls	r1, r3, #5
 8003328:	460b      	mov	r3, r1
 800332a:	4614      	mov	r4, r2
 800332c:	1b5b      	subs	r3, r3, r5
 800332e:	eb64 0406 	sbc.w	r4, r4, r6
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	0262      	lsls	r2, r4, #9
 800333c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003340:	0259      	lsls	r1, r3, #9
 8003342:	460b      	mov	r3, r1
 8003344:	4614      	mov	r4, r2
 8003346:	195b      	adds	r3, r3, r5
 8003348:	eb44 0406 	adc.w	r4, r4, r6
 800334c:	f04f 0100 	mov.w	r1, #0
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	01a2      	lsls	r2, r4, #6
 8003356:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 800335a:	0199      	lsls	r1, r3, #6
 800335c:	1ac9      	subs	r1, r1, r3
 800335e:	eb62 0204 	sbc.w	r2, r2, r4
 8003362:	194b      	adds	r3, r1, r5
 8003364:	eb42 0406 	adc.w	r4, r2, r6
 8003368:	e9c7 3404 	strd	r3, r4, [r7, #16]
        elapsed_us = us_x_ticks / queue->frequency;
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f04f 0400 	mov.w	r4, #0
 8003374:	461a      	mov	r2, r3
 8003376:	4623      	mov	r3, r4
 8003378:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800337c:	f7fc ff92 	bl	80002a4 <__aeabi_uldivmod>
 8003380:	4603      	mov	r3, r0
 8003382:	460c      	mov	r4, r1
 8003384:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

        // Update remainder
        queue->tick_remainder += us_x_ticks - elapsed_us * queue->frequency;
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f04f 0400 	mov.w	r4, #0
 8003396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003398:	fb04 f500 	mul.w	r5, r4, r0
 800339c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800339e:	fb03 f000 	mul.w	r0, r3, r0
 80033a2:	4428      	add	r0, r5
 80033a4:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80033a6:	fba5 3403 	umull	r3, r4, r5, r3
 80033aa:	4420      	add	r0, r4
 80033ac:	4604      	mov	r4, r0
 80033ae:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80033b2:	1aed      	subs	r5, r5, r3
 80033b4:	eb66 0604 	sbc.w	r6, r6, r4
 80033b8:	46a8      	mov	r8, r5
 80033ba:	46b1      	mov	r9, r6
 80033bc:	eb18 0301 	adds.w	r3, r8, r1
 80033c0:	eb49 0402 	adc.w	r4, r9, r2
 80033c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        if (queue->tick_remainder >= queue->frequency) {
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f04f 0400 	mov.w	r4, #0
 80033d8:	42a2      	cmp	r2, r4
 80033da:	bf08      	it	eq
 80033dc:	4299      	cmpeq	r1, r3
 80033de:	d316      	bcc.n	800340e <update_present_time+0x286>
            elapsed_us += 1;
 80033e0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80033e4:	1c59      	adds	r1, r3, #1
 80033e6:	f144 0200 	adc.w	r2, r4, #0
 80033ea:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
            queue->tick_remainder -= queue->frequency;
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	461d      	mov	r5, r3
 80033fa:	f04f 0600 	mov.w	r6, #0
 80033fe:	460b      	mov	r3, r1
 8003400:	4614      	mov	r4, r2
 8003402:	1b5b      	subs	r3, r3, r5
 8003404:	eb64 0406 	sbc.w	r4, r4, r6
 8003408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        }
    }

    // Update current time
    queue->present_time += elapsed_us;
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8003414:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003418:	185d      	adds	r5, r3, r1
 800341a:	eb44 0602 	adc.w	r6, r4, r2
 800341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003420:	e9c2 560c 	strd	r5, r6, [r2, #48]	; 0x30
 8003424:	e000      	b.n	8003428 <update_present_time+0x2a0>
        return;
 8003426:	bf00      	nop
}
 8003428:	3734      	adds	r7, #52	; 0x34
 800342a:	46bd      	mov	sp, r7
 800342c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003430:	000f4240 	.word	0x000f4240

08003434 <compute_tick>:

/**
 * Given the absolute timestamp compute the hal tick timestamp.
 */
static timestamp_t compute_tick(const ticker_data_t *const ticker, us_timestamp_t timestamp)
{
 8003434:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8003438:	b088      	sub	sp, #32
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	e9c7 2300 	strd	r2, r3, [r7]
    ticker_event_queue_t *queue = ticker->queue;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	61bb      	str	r3, [r7, #24]
    us_timestamp_t delta_us = timestamp - queue->present_time;
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	e9d3 bc0c 	ldrd	fp, ip, [r3, #48]	; 0x30
 800344e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	ebb2 020b 	subs.w	r2, r2, fp
 800345a:	eb63 030c 	sbc.w	r3, r3, ip
 800345e:	e9c7 2304 	strd	r2, r3, [r7, #16]

    timestamp_t delta = ticker->queue->max_delta;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	61fb      	str	r3, [r7, #28]
    if (delta_us <=  ticker->queue->max_delta_us) {
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003472:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003476:	4299      	cmp	r1, r3
 8003478:	bf08      	it	eq
 800347a:	4290      	cmpeq	r0, r2
 800347c:	d362      	bcc.n	8003544 <compute_tick+0x110>
        // Checking max_delta_us ensures the operation will not overflow

        if (1000000 == queue->frequency) {
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	4a36      	ldr	r2, [pc, #216]	; (800355c <compute_tick+0x128>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d10c      	bne.n	80034a2 <compute_tick+0x6e>
            // Optimized for 1MHz

            delta = delta_us;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	61fb      	str	r3, [r7, #28]
            if (delta > ticker->queue->max_delta) {
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	429a      	cmp	r2, r3
 8003496:	d955      	bls.n	8003544 <compute_tick+0x110>
                delta = ticker->queue->max_delta;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	61fb      	str	r3, [r7, #28]
 80034a0:	e050      	b.n	8003544 <compute_tick+0x110>
            }
        } else if (0 != queue->frequency_shifts) {
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d029      	beq.n	8003500 <compute_tick+0xcc>
            // Optimized frequencies divisible by 2

            delta = (delta_us << ticker->queue->frequency_shifts) / 1000000;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034b4:	4619      	mov	r1, r3
 80034b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80034ba:	f1a1 0620 	sub.w	r6, r1, #32
 80034be:	f1c1 0020 	rsb	r0, r1, #32
 80034c2:	fa03 f501 	lsl.w	r5, r3, r1
 80034c6:	fa02 f606 	lsl.w	r6, r2, r6
 80034ca:	4335      	orrs	r5, r6
 80034cc:	fa22 f000 	lsr.w	r0, r2, r0
 80034d0:	4305      	orrs	r5, r0
 80034d2:	fa02 f401 	lsl.w	r4, r2, r1
 80034d6:	4a21      	ldr	r2, [pc, #132]	; (800355c <compute_tick+0x128>)
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	4620      	mov	r0, r4
 80034de:	4629      	mov	r1, r5
 80034e0:	f7fc fee0 	bl	80002a4 <__aeabi_uldivmod>
 80034e4:	4603      	mov	r3, r0
 80034e6:	460c      	mov	r4, r1
 80034e8:	61fb      	str	r3, [r7, #28]
            if (delta > ticker->queue->max_delta) {
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d926      	bls.n	8003544 <compute_tick+0x110>
                delta = ticker->queue->max_delta;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	e021      	b.n	8003544 <compute_tick+0x110>
            }
        } else {
            // General case

            delta = delta_us * queue->frequency / 1000000;
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f04f 0400 	mov.w	r4, #0
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	fb04 f102 	mul.w	r1, r4, r2
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	fb03 f202 	mul.w	r2, r3, r2
 8003514:	440a      	add	r2, r1
 8003516:	6939      	ldr	r1, [r7, #16]
 8003518:	fba1 0103 	umull	r0, r1, r1, r3
 800351c:	1853      	adds	r3, r2, r1
 800351e:	4619      	mov	r1, r3
 8003520:	4a0e      	ldr	r2, [pc, #56]	; (800355c <compute_tick+0x128>)
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	f7fc febd 	bl	80002a4 <__aeabi_uldivmod>
 800352a:	4603      	mov	r3, r0
 800352c:	460c      	mov	r4, r1
 800352e:	61fb      	str	r3, [r7, #28]
            if (delta > ticker->queue->max_delta) {
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	429a      	cmp	r2, r3
 800353a:	d903      	bls.n	8003544 <compute_tick+0x110>
                delta = ticker->queue->max_delta;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	61fb      	str	r3, [r7, #28]
            }
        }
    }
    return (queue->tick_last_read + delta) & queue->bitmask;
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	6a1a      	ldr	r2, [r3, #32]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	441a      	add	r2, r3
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4013      	ands	r3, r2
}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800355c:	000f4240 	.word	0x000f4240

08003560 <_ticker_match_interval_passed>:

/**
 * Return 1 if the tick has incremented to or past match_tick, otherwise 0.
 */
int _ticker_match_interval_passed(timestamp_t prev_tick, timestamp_t cur_tick, timestamp_t match_tick)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
    if (match_tick > prev_tick) {
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	429a      	cmp	r2, r3
 8003572:	d90b      	bls.n	800358c <_ticker_match_interval_passed+0x2c>
        return (cur_tick >= match_tick) || (cur_tick < prev_tick);
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	429a      	cmp	r2, r3
 800357a:	d203      	bcs.n	8003584 <_ticker_match_interval_passed+0x24>
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	429a      	cmp	r2, r3
 8003582:	d201      	bcs.n	8003588 <_ticker_match_interval_passed+0x28>
 8003584:	2301      	movs	r3, #1
 8003586:	e00c      	b.n	80035a2 <_ticker_match_interval_passed+0x42>
 8003588:	2300      	movs	r3, #0
 800358a:	e00a      	b.n	80035a2 <_ticker_match_interval_passed+0x42>
    } else {
        return (cur_tick < prev_tick) && (cur_tick >= match_tick);
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	429a      	cmp	r2, r3
 8003592:	d205      	bcs.n	80035a0 <_ticker_match_interval_passed+0x40>
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	429a      	cmp	r2, r3
 800359a:	d301      	bcc.n	80035a0 <_ticker_match_interval_passed+0x40>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <_ticker_match_interval_passed+0x42>
 80035a0:	2300      	movs	r3, #0
    }
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <schedule_interrupt>:
 * @note If there is no event in the queue then the interrupt is scheduled to
 * in ticker.queue.max_delta. This is necessary to keep track
 * of the timer overflow.
 */
static void schedule_interrupt(const ticker_data_t *const ticker)
{
 80035ae:	b590      	push	{r4, r7, lr}
 80035b0:	b08b      	sub	sp, #44	; 0x2c
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
    ticker_event_queue_t *queue = ticker->queue;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticker->queue->dispatching) {
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d159      	bne.n	800367c <schedule_interrupt+0xce>
        // Don't schedule the next interrupt until dispatching is
        // finished. This prevents repeated calls to interface->set_interrupt
        return;
    }

    update_present_time(ticker);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff fddd 	bl	8003188 <update_present_time>

    if (ticker->queue->head) {
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d042      	beq.n	800365e <schedule_interrupt+0xb0>
        us_timestamp_t present = ticker->queue->present_time;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80035e0:	e9c7 3406 	strd	r3, r4, [r7, #24]
        us_timestamp_t match_time = ticker->queue->head->timestamp;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80035ee:	e9c7 3404 	strd	r3, r4, [r7, #16]

        // if the event at the head of the queue is in the past then schedule
        // it immediately.
        if (match_time <= present) {
 80035f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80035f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80035fa:	42a2      	cmp	r2, r4
 80035fc:	bf08      	it	eq
 80035fe:	4299      	cmpeq	r1, r3
 8003600:	d304      	bcc.n	800360c <schedule_interrupt+0x5e>
            ticker->interface->fire_interrupt();
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	4798      	blx	r3
            return;
 800360a:	e038      	b.n	800367e <schedule_interrupt+0xd0>
        }

        timestamp_t match_tick = compute_tick(ticker, match_time);
 800360c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff ff0f 	bl	8003434 <compute_tick>
 8003616:	60f8      	str	r0, [r7, #12]
        // The time has been checked to be future, but it could still round
        // to the last tick as a result of us to ticks conversion
        if (match_tick == queue->tick_last_read) {
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	429a      	cmp	r2, r3
 8003620:	d104      	bne.n	800362c <schedule_interrupt+0x7e>
            // Match time has already expired so fire immediately
            ticker->interface->fire_interrupt();
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	4798      	blx	r3
            return;
 800362a:	e028      	b.n	800367e <schedule_interrupt+0xd0>
        }

        ticker->interface->set_interrupt(match_tick);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	4798      	blx	r3
        timestamp_t cur_tick = ticker->interface->read();
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4798      	blx	r3
 800363e:	60b8      	str	r0, [r7, #8]

        if (_ticker_match_interval_passed(queue->tick_last_read, cur_tick, match_tick)) {
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	68b9      	ldr	r1, [r7, #8]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff ff89 	bl	8003560 <_ticker_match_interval_passed>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d014      	beq.n	800367e <schedule_interrupt+0xd0>
            ticker->interface->fire_interrupt();
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	4798      	blx	r3
 800365c:	e00f      	b.n	800367e <schedule_interrupt+0xd0>
        }
    } else {
        uint32_t match_tick =
            (queue->tick_last_read + queue->max_delta) & queue->bitmask;
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	6a1a      	ldr	r2, [r3, #32]
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	441a      	add	r2, r3
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	68db      	ldr	r3, [r3, #12]
        uint32_t match_tick =
 800366c:	4013      	ands	r3, r2
 800366e:	623b      	str	r3, [r7, #32]
        ticker->interface->set_interrupt(match_tick);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	6a38      	ldr	r0, [r7, #32]
 8003678:	4798      	blx	r3
 800367a:	e000      	b.n	800367e <schedule_interrupt+0xd0>
        return;
 800367c:	bf00      	nop
    }
}
 800367e:	372c      	adds	r7, #44	; 0x2c
 8003680:	46bd      	mov	sp, r7
 8003682:	bd90      	pop	{r4, r7, pc}

08003684 <ticker_irq_handler>:
    set_handler(ticker, handler);
    core_util_critical_section_exit();
}

void ticker_irq_handler(const ticker_data_t *const ticker)
{
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
    core_util_critical_section_enter();
 800368c:	f000 fcde 	bl	800404c <core_util_critical_section_enter>

    ticker->interface->clear_interrupt();
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	4798      	blx	r3

    /* Go through all the pending TimerEvents */
    ticker->queue->dispatching = true;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    while (1) {
        if (ticker->queue->head == NULL) {
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d027      	beq.n	80036fc <ticker_irq_handler+0x78>
            break;
        }

        // update the current timestamp used by the queue
        update_present_time(ticker);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff fd6b 	bl	8003188 <update_present_time>

        if (ticker->queue->head->timestamp <= ticker->queue->present_time) {
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6852      	ldr	r2, [r2, #4]
 80036c0:	e9d2 120c 	ldrd	r1, r2, [r2, #48]	; 0x30
 80036c4:	42a2      	cmp	r2, r4
 80036c6:	bf08      	it	eq
 80036c8:	4299      	cmpeq	r1, r3
 80036ca:	d319      	bcc.n	8003700 <ticker_irq_handler+0x7c>
            // This event was in the past:
            //      point to the following one and execute its handler
            ticker_event_t *p = ticker->queue->head;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	60fb      	str	r3, [r7, #12]
            ticker->queue->head = ticker->queue->head->next;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	68d2      	ldr	r2, [r2, #12]
 80036e0:	605a      	str	r2, [r3, #4]
            if (ticker->queue->event_handler != NULL) {
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0da      	beq.n	80036a2 <ticker_irq_handler+0x1e>
                (*ticker->queue->event_handler)(p->id); // NOTE: the handler can set new events
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	6892      	ldr	r2, [r2, #8]
 80036f6:	4610      	mov	r0, r2
 80036f8:	4798      	blx	r3
        if (ticker->queue->head == NULL) {
 80036fa:	e7d2      	b.n	80036a2 <ticker_irq_handler+0x1e>
            break;
 80036fc:	bf00      	nop
 80036fe:	e000      	b.n	8003702 <ticker_irq_handler+0x7e>
            }
            /* Note: We continue back to examining the head because calling the
             * event handler may have altered the chain of pending events. */
        } else {
            break;
 8003700:	bf00      	nop
        }
    }
    ticker->queue->dispatching = false;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    schedule_interrupt(ticker);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff ff4e 	bl	80035ae <schedule_interrupt>

    core_util_critical_section_exit();
 8003712:	f000 fca9 	bl	8004068 <core_util_critical_section_exit>
}
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	bd90      	pop	{r4, r7, pc}

0800371e <ticker_read>:

    core_util_critical_section_exit();
}

timestamp_t ticker_read(const ticker_data_t *const ticker)
{
 800371e:	b590      	push	{r4, r7, lr}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
    return ticker_read_us(ticker);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f806 	bl	8003738 <ticker_read_us>
 800372c:	4603      	mov	r3, r0
 800372e:	460c      	mov	r4, r1
}
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	bd90      	pop	{r4, r7, pc}

08003738 <ticker_read_us>:

us_timestamp_t ticker_read_us(const ticker_data_t *const ticker)
{
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
    initialize(ticker);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff fc23 	bl	8002f8c <initialize>

    core_util_critical_section_enter();
 8003746:	f000 fc81 	bl	800404c <core_util_critical_section_enter>
    update_present_time(ticker);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff fd1c 	bl	8003188 <update_present_time>
    core_util_critical_section_exit();
 8003750:	f000 fc8a 	bl	8004068 <core_util_critical_section_exit>

    return ticker->queue->present_time;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
}
 800375c:	4618      	mov	r0, r3
 800375e:	4621      	mov	r1, r4
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bd90      	pop	{r4, r7, pc}
	...

08003768 <get_us_ticker_data>:
    .interface = &us_interface,
    .queue = &events
};

const ticker_data_t *get_us_ticker_data(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
    return &us_data;
 800376c:	4b02      	ldr	r3, [pc, #8]	; (8003778 <get_us_ticker_data+0x10>)
}
 800376e:	4618      	mov	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	08008b8c 	.word	0x08008b8c

0800377c <us_ticker_irq_handler>:

    return prev_irq_handler;
}

void us_ticker_irq_handler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
    if (irq_handler) {
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <us_ticker_irq_handler+0x18>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <us_ticker_irq_handler+0x14>
        irq_handler(&us_data);
 8003788:	4b02      	ldr	r3, [pc, #8]	; (8003794 <us_ticker_irq_handler+0x18>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4802      	ldr	r0, [pc, #8]	; (8003798 <us_ticker_irq_handler+0x1c>)
 800378e:	4798      	blx	r3
    }
}
 8003790:	bf00      	nop
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20000200 	.word	0x20000200
 8003798:	08008b8c 	.word	0x08008b8c

0800379c <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE>:
namespace mbed {

FileBase *FileBase::_head = NULL;
SingletonPtr<PlatformMutex> FileBase::_mutex;

FileBase::FileBase(const char *name, PathType t) : _next(NULL),
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	4613      	mov	r3, r2
 80037a8:	71fb      	strb	r3, [r7, #7]
    _name(name),
    _path_type(t)
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f8e8 	bl	8003980 <_ZN4mbed11NonCopyableINS_8FileBaseEEC1Ev>
 80037b0:	4a16      	ldr	r2, [pc, #88]	; (800380c <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x70>)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	79fa      	ldrb	r2, [r7, #7]
 80037c6:	731a      	strb	r2, [r3, #12]
{
    _mutex->lock();
 80037c8:	4811      	ldr	r0, [pc, #68]	; (8003810 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x74>)
 80037ca:	f7ff f8ca 	bl	8002962 <_ZN12SingletonPtrI13PlatformMutexEptEv>
 80037ce:	4603      	mov	r3, r0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe ff42 	bl	800265a <_ZN13PlatformMutex4lockEv>
    if (name != NULL) {
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x50>
        // put this object at head of the list
        _next = _head;
 80037dc:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x78>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	605a      	str	r2, [r3, #4]
        _head = this;
 80037e4:	4a0b      	ldr	r2, [pc, #44]	; (8003814 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x78>)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e002      	b.n	80037f2 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x56>
    } else {
        _next = NULL;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	605a      	str	r2, [r3, #4]
    }
    _mutex->unlock();
 80037f2:	4807      	ldr	r0, [pc, #28]	; (8003810 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x74>)
 80037f4:	f7ff f8b5 	bl	8002962 <_ZN12SingletonPtrI13PlatformMutexEptEv>
 80037f8:	4603      	mov	r3, r0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe ff37 	bl	800266e <_ZN13PlatformMutex6unlockEv>
}
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	08008b9c 	.word	0x08008b9c
 8003810:	2000043c 	.word	0x2000043c
 8003814:	20000438 	.word	0x20000438

08003818 <_ZN4mbed8FileBaseD1Ev>:

FileBase::~FileBase()
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	4a23      	ldr	r2, [pc, #140]	; (80038b0 <_ZN4mbed8FileBaseD1Ev+0x98>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	601a      	str	r2, [r3, #0]
{
    _mutex->lock();
 8003826:	4823      	ldr	r0, [pc, #140]	; (80038b4 <_ZN4mbed8FileBaseD1Ev+0x9c>)
 8003828:	f7ff f89b 	bl	8002962 <_ZN12SingletonPtrI13PlatformMutexEptEv>
 800382c:	4603      	mov	r3, r0
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe ff13 	bl	800265a <_ZN13PlatformMutex4lockEv>
    if (_name != NULL) {
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d019      	beq.n	8003870 <_ZN4mbed8FileBaseD1Ev+0x58>
        // remove this object from the list
        if (_head == this) { // first in the list, so just drop me
 800383c:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <_ZN4mbed8FileBaseD1Ev+0xa0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	429a      	cmp	r2, r3
 8003844:	d104      	bne.n	8003850 <_ZN4mbed8FileBaseD1Ev+0x38>
            _head = _next;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4a1b      	ldr	r2, [pc, #108]	; (80038b8 <_ZN4mbed8FileBaseD1Ev+0xa0>)
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e00f      	b.n	8003870 <_ZN4mbed8FileBaseD1Ev+0x58>
        } else {             // find the object before me, then drop me
            FileBase *p = _head;
 8003850:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <_ZN4mbed8FileBaseD1Ev+0xa0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60fb      	str	r3, [r7, #12]
            while (p->_next != this) {
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	d003      	beq.n	8003868 <_ZN4mbed8FileBaseD1Ev+0x50>
                p = p->_next;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	60fb      	str	r3, [r7, #12]
            while (p->_next != this) {
 8003866:	e7f6      	b.n	8003856 <_ZN4mbed8FileBaseD1Ev+0x3e>
            }
            p->_next = _next;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	605a      	str	r2, [r3, #4]
        }
    }
    _mutex->unlock();
 8003870:	4810      	ldr	r0, [pc, #64]	; (80038b4 <_ZN4mbed8FileBaseD1Ev+0x9c>)
 8003872:	f7ff f876 	bl	8002962 <_ZN12SingletonPtrI13PlatformMutexEptEv>
 8003876:	4603      	mov	r3, r0
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe fef8 	bl	800266e <_ZN13PlatformMutex6unlockEv>

    if (getPathType() == FilePathType) {
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f872 	bl	8003968 <_ZN4mbed8FileBase11getPathTypeEv>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <_ZN4mbed8FileBaseD1Ev+0x86>
        extern void remove_filehandle(FileHandle * file);
        remove_filehandle(static_cast<FileHandle *>(static_cast<FileLike *>(this)));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3b04      	subs	r3, #4
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fcab 	bl	80041f4 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE>
FileBase::~FileBase()
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f879 	bl	8003996 <_ZN4mbed11NonCopyableINS_8FileBaseEED1Ev>
    }
}
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	08008b9c 	.word	0x08008b9c
 80038b4:	2000043c 	.word	0x2000043c
 80038b8:	20000438 	.word	0x20000438

080038bc <_ZN4mbed8FileBaseD0Ev>:
FileBase::~FileBase()
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
}
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ffa7 	bl	8003818 <_ZN4mbed8FileBaseD1Ev>
 80038ca:	2110      	movs	r1, #16
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f003 fc5b 	bl	8007188 <_ZdlPvj>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <_ZN4mbed8FileBase6lookupEPKcj>:

FileBase *FileBase::lookup(const char *name, unsigned int len)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
    _mutex->lock();
 80038e6:	481e      	ldr	r0, [pc, #120]	; (8003960 <_ZN4mbed8FileBase6lookupEPKcj+0x84>)
 80038e8:	f7ff f83b 	bl	8002962 <_ZN12SingletonPtrI13PlatformMutexEptEv>
 80038ec:	4603      	mov	r3, r0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe feb3 	bl	800265a <_ZN13PlatformMutex4lockEv>
    FileBase *p = _head;
 80038f4:	4b1b      	ldr	r3, [pc, #108]	; (8003964 <_ZN4mbed8FileBase6lookupEPKcj+0x88>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]
    while (p != NULL) {
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d023      	beq.n	8003948 <_ZN4mbed8FileBase6lookupEPKcj+0x6c>
        /* Check that p->_name matches name and is the correct length */
        if (p->_name != NULL && std::strncmp(p->_name, name, len) == 0 && std::strlen(p->_name) == len) {
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01b      	beq.n	8003940 <_ZN4mbed8FileBase6lookupEPKcj+0x64>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4618      	mov	r0, r3
 8003912:	f004 fc5e 	bl	80081d2 <strncmp>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d111      	bne.n	8003940 <_ZN4mbed8FileBase6lookupEPKcj+0x64>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4618      	mov	r0, r3
 8003922:	f7fc fcb7 	bl	8000294 <strlen>
 8003926:	4602      	mov	r2, r0
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	4293      	cmp	r3, r2
 800392c:	d108      	bne.n	8003940 <_ZN4mbed8FileBase6lookupEPKcj+0x64>
            _mutex->unlock();
 800392e:	480c      	ldr	r0, [pc, #48]	; (8003960 <_ZN4mbed8FileBase6lookupEPKcj+0x84>)
 8003930:	f7ff f817 	bl	8002962 <_ZN12SingletonPtrI13PlatformMutexEptEv>
 8003934:	4603      	mov	r3, r0
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe fe99 	bl	800266e <_ZN13PlatformMutex6unlockEv>
            return p;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	e00b      	b.n	8003958 <_ZN4mbed8FileBase6lookupEPKcj+0x7c>
        }
        p = p->_next;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	60fb      	str	r3, [r7, #12]
    while (p != NULL) {
 8003946:	e7d8      	b.n	80038fa <_ZN4mbed8FileBase6lookupEPKcj+0x1e>
    }
    _mutex->unlock();
 8003948:	4805      	ldr	r0, [pc, #20]	; (8003960 <_ZN4mbed8FileBase6lookupEPKcj+0x84>)
 800394a:	f7ff f80a 	bl	8002962 <_ZN12SingletonPtrI13PlatformMutexEptEv>
 800394e:	4603      	mov	r3, r0
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe fe8c 	bl	800266e <_ZN13PlatformMutex6unlockEv>
    return NULL;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	2000043c 	.word	0x2000043c
 8003964:	20000438 	.word	0x20000438

08003968 <_ZN4mbed8FileBase11getPathTypeEv>:
    // Constant read so no lock needed
    return _name;
}

PathType FileBase::getPathType(void)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
    // Constant read so no lock needed
    return _path_type;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	7b1b      	ldrb	r3, [r3, #12]
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <_ZN4mbed11NonCopyableINS_8FileBaseEEC1Ev>:
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <_ZN4mbed11NonCopyableINS_8FileBaseEED1Ev>:
    ~NonCopyable() { }
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <_ZN4mbed10FileHandle4syncEv>:

    /** Flush any buffers associated with the file
     *
     *  @return         0 on success, negative error code on failure
     */
    virtual int sync()
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80039b4:	2300      	movs	r3, #0
    }
 80039b6:	4618      	mov	r0, r3
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <_ZN4mbed10FileHandle6isattyEv>:
     *
     *  @return         True if the file is a terminal
     *  @return         False if the file is not a terminal
     *  @return         Negative error code on failure
     */
    virtual int isatty()
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
    {
        return false;
 80039ca:	2300      	movs	r3, #0
    }
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <_ZN4mbed10FileHandle4sizeEv>:
#include "platform/mbed_critical.h"

namespace mbed {

off_t FileHandle::size()
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
    /* remember our current position */
    off_t off = seek(0, SEEK_CUR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3310      	adds	r3, #16
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2201      	movs	r2, #1
 80039ea:	2100      	movs	r1, #0
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
 80039f0:	60f8      	str	r0, [r7, #12]
    if (off < 0) {
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	da01      	bge.n	80039fc <_ZN4mbed10FileHandle4sizeEv+0x24>
        return off;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	e011      	b.n	8003a20 <_ZN4mbed10FileHandle4sizeEv+0x48>
    }
    /* seek to the end to get the file length */
    off_t size = seek(0, SEEK_END);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3310      	adds	r3, #16
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2202      	movs	r2, #2
 8003a06:	2100      	movs	r1, #0
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4798      	blx	r3
 8003a0c:	60b8      	str	r0, [r7, #8]
    /* return to our old position */
    seek(off, SEEK_SET);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3310      	adds	r3, #16
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2200      	movs	r2, #0
 8003a18:	68f9      	ldr	r1, [r7, #12]
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	4798      	blx	r3
    return size;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <_ZN4mbed8FilePathC1EPKc>:
 */
#include "platform/FilePath.h"

namespace mbed {

FilePath::FilePath(const char *file_path) : file_name(NULL), fb(NULL)
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	605a      	str	r2, [r3, #4]
{
    // skip slashes
    file_path += strspn(file_path, "/");
 8003a3e:	491b      	ldr	r1, [pc, #108]	; (8003aac <_ZN4mbed8FilePathC1EPKc+0x84>)
 8003a40:	6838      	ldr	r0, [r7, #0]
 8003a42:	f004 fbd8 	bl	80081f6 <strspn>
 8003a46:	4602      	mov	r2, r0
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	603b      	str	r3, [r7, #0]

    const char *file_system = file_path;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	613b      	str	r3, [r7, #16]
    file_name = file_system;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	601a      	str	r2, [r3, #0]
    int len = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
    while (true) {
        char c = *file_name;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	73fb      	strb	r3, [r7, #15]
        if (c == '/') { // end of object name
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b2f      	cmp	r3, #47	; 0x2f
 8003a68:	d105      	bne.n	8003a76 <_ZN4mbed8FilePathC1EPKc+0x4e>
            file_name++; // point to one char after the '/'
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	601a      	str	r2, [r3, #0]
            break;
 8003a74:	e00c      	b.n	8003a90 <_ZN4mbed8FilePathC1EPKc+0x68>
        }
        if (c == 0) { // end of object name, with no filename
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <_ZN4mbed8FilePathC1EPKc+0x66>
            break;
        }
        len++;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
        file_name++;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	601a      	str	r2, [r3, #0]
    }
 8003a8c:	e7e6      	b.n	8003a5c <_ZN4mbed8FilePathC1EPKc+0x34>
            break;
 8003a8e:	bf00      	nop

    MBED_ASSERT(len != 0);
    fb = FileBase::lookup(file_system, len);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	4619      	mov	r1, r3
 8003a94:	6938      	ldr	r0, [r7, #16]
 8003a96:	f7ff ff21 	bl	80038dc <_ZN4mbed8FileBase6lookupEPKcj>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	605a      	str	r2, [r3, #4]
}
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	0800891c 	.word	0x0800891c

08003ab0 <_ZN4mbed8FilePath8fileNameEv>:

const char *FilePath::fileName(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
    return file_name;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <_ZN4mbed8FilePath12isFileSystemEv>:

bool FilePath::isFileSystem(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
    if (NULL == fb) {
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <_ZN4mbed8FilePath12isFileSystemEv+0x14>
        return false;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e00a      	b.n	8003af2 <_ZN4mbed8FilePath12isFileSystemEv+0x2a>
    }
    return (fb->getPathType() == FileSystemPathType);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff ff41 	bl	8003968 <_ZN4mbed8FileBase11getPathTypeEv>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <_ZN4mbed8FilePath10fileSystemEv>:

FileSystemLike *FilePath::fileSystem(void)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
    if (isFileSystem()) {
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff ffe0 	bl	8003ac8 <_ZN4mbed8FilePath12isFileSystemEv>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <_ZN4mbed8FilePath10fileSystemEv+0x28>
        return static_cast<FileSystemLike *>(fb);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <_ZN4mbed8FilePath10fileSystemEv+0x24>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	3b04      	subs	r3, #4
 8003b1c:	e002      	b.n	8003b24 <_ZN4mbed8FilePath10fileSystemEv+0x2a>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e000      	b.n	8003b24 <_ZN4mbed8FilePath10fileSystemEv+0x2a>
    }
    return NULL;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <_ZN4mbed8FilePath6isFileEv>:

bool FilePath::isFile(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
    if (NULL == fb) {
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <_ZN4mbed8FilePath6isFileEv+0x14>
        return false;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e00a      	b.n	8003b56 <_ZN4mbed8FilePath6isFileEv+0x2a>
    }
    return (fb->getPathType() == FilePathType);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff0f 	bl	8003968 <_ZN4mbed8FileBase11getPathTypeEv>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <_ZN4mbed8FilePath4fileEv>:

FileLike *FilePath::file(void)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
    if (isFile()) {
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff ffe0 	bl	8003b2c <_ZN4mbed8FilePath6isFileEv>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <_ZN4mbed8FilePath4fileEv+0x28>
        return (FileLike *)fb;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <_ZN4mbed8FilePath4fileEv+0x24>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	3b04      	subs	r3, #4
 8003b80:	e002      	b.n	8003b88 <_ZN4mbed8FilePath4fileEv+0x2a>
 8003b82:	2300      	movs	r3, #0
 8003b84:	e000      	b.n	8003b88 <_ZN4mbed8FilePath4fileEv+0x2a>
    }
    return NULL;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <_ZN4mbed8FilePath6existsEv>:

bool FilePath::exists(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
    return fb != NULL;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
	...

08003bb4 <_ZN4mbed8FileLikeC1EPKc>:
public:
    /** Constructor FileLike
     *
     *  @param name     The name to use to open the file.
     */
    FileLike(const char *name = NULL) : FileBase(name, FilePathType) {}
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff f863 	bl	8002c8c <_ZN4mbed10FileHandleC1Ev>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	2200      	movs	r2, #0
 8003bcc:	6839      	ldr	r1, [r7, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fde4 	bl	800379c <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE>
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f98d 	bl	8003ef4 <_ZN4mbed11NonCopyableINS_8FileLikeEEC1Ev>
 8003bda:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <_ZN4mbed8FileLikeC1EPKc+0x3c>)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	4a04      	ldr	r2, [pc, #16]	; (8003bf4 <_ZN4mbed8FileLikeC1EPKc+0x40>)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	08008c6c 	.word	0x08008c6c
 8003bf4:	08008cbc 	.word	0x08008cbc

08003bf8 <_ZN4mbed8FileLikeD1Ev>:
    virtual ~FileLike() {}
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	4a0b      	ldr	r2, [pc, #44]	; (8003c30 <_ZN4mbed8FileLikeD1Ev+0x38>)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	4a0b      	ldr	r2, [pc, #44]	; (8003c34 <_ZN4mbed8FileLikeD1Ev+0x3c>)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	605a      	str	r2, [r3, #4]
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f97c 	bl	8003f0a <_ZN4mbed11NonCopyableINS_8FileLikeEED1Ev>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3304      	adds	r3, #4
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fdfe 	bl	8003818 <_ZN4mbed8FileBaseD1Ev>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe fff0 	bl	8002c04 <_ZN4mbed10FileHandleD1Ev>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	08008c6c 	.word	0x08008c6c
 8003c34:	08008cbc 	.word	0x08008cbc

08003c38 <_ZThn4_N4mbed8FileLikeD1Ev>:
 8003c38:	f1a0 0004 	sub.w	r0, r0, #4
 8003c3c:	e7dc      	b.n	8003bf8 <_ZN4mbed8FileLikeD1Ev>
 8003c3e:	bf00      	nop

08003c40 <_ZN4mbed8FileLikeD0Ev>:
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff ffd5 	bl	8003bf8 <_ZN4mbed8FileLikeD1Ev>
 8003c4e:	2114      	movs	r1, #20
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f003 fa99 	bl	8007188 <_ZdlPvj>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <_ZThn4_N4mbed8FileLikeD0Ev>:
 8003c60:	f1a0 0004 	sub.w	r0, r0, #4
 8003c64:	e7ec      	b.n	8003c40 <_ZN4mbed8FileLikeD0Ev>
	...

08003c68 <_ZN4mbed6StreamC1EPKc>:
#include "platform/mbed_error.h"
#include <errno.h>

namespace mbed {

Stream::Stream(const char *name) : FileLike(name), _file(NULL)
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6839      	ldr	r1, [r7, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff ff9c 	bl	8003bb4 <_ZN4mbed8FileLikeC1EPKc>
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f94f 	bl	8003f20 <_ZN4mbed11NonCopyableINS_6StreamEEC1Ev>
 8003c82:	4a15      	ldr	r2, [pc, #84]	; (8003cd8 <_ZN4mbed6StreamC1EPKc+0x70>)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	4a14      	ldr	r2, [pc, #80]	; (8003cdc <_ZN4mbed6StreamC1EPKc+0x74>)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	615a      	str	r2, [r3, #20]
{
    // No lock needed in constructor
    /* open ourselves */
    _file = fdopen(this, "w+");
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4912      	ldr	r1, [pc, #72]	; (8003ce0 <_ZN4mbed6StreamC1EPKc+0x78>)
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fd0b 	bl	80046b4 <_ZN4mbed6fdopenEPNS_10FileHandleEPKc>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	615a      	str	r2, [r3, #20]
    // fdopen() will make us buffered because Stream::isatty()
    // wrongly returns zero which is not being changed for
    // backward compatibility
    if (_file) {
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <_ZN4mbed6StreamC1EPKc+0x50>
        mbed_set_unbuffered_stream(_file);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f001 f876 	bl	8004da2 <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>
 8003cb6:	e009      	b.n	8003ccc <_ZN4mbed6StreamC1EPKc+0x64>
    } else {
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_OPEN_FAILED), "Stream obj failure", _file);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4807      	ldr	r0, [pc, #28]	; (8003ce4 <_ZN4mbed6StreamC1EPKc+0x7c>)
 8003cc8:	f000 fa76 	bl	80041b8 <mbed_error>
    }
}
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	08008bfc 	.word	0x08008bfc
 8003cdc:	08008c5c 	.word	0x08008c5c
 8003ce0:	08008920 	.word	0x08008920
 8003ce4:	80010119 	.word	0x80010119

08003ce8 <_ZN4mbed6StreamD1Ev>:

Stream::~Stream()
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	4a0b      	ldr	r2, [pc, #44]	; (8003d20 <_ZN4mbed6StreamD1Ev+0x38>)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	4a0b      	ldr	r2, [pc, #44]	; (8003d24 <_ZN4mbed6StreamD1Ev+0x3c>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	605a      	str	r2, [r3, #4]
{
    // No lock can be used in destructor
    fclose(_file);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f003 fab5 	bl	8007270 <fclose>
Stream::~Stream()
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f915 	bl	8003f36 <_ZN4mbed11NonCopyableINS_6StreamEED1Ev>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff ff72 	bl	8003bf8 <_ZN4mbed8FileLikeD1Ev>
}
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	08008bfc 	.word	0x08008bfc
 8003d24:	08008c5c 	.word	0x08008c5c

08003d28 <_ZN4mbed6Stream5closeEv>:
    unlock();
    return ret;
}

int Stream::close()
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
    return 0;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <_ZN4mbed6Stream5writeEPKvj>:

ssize_t Stream::write(const void *buffer, size_t length)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
    const char *ptr = (const char *)buffer;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	617b      	str	r3, [r7, #20]
    const char *end = ptr + length;
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4413      	add	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]

    lock();
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3350      	adds	r3, #80	; 0x50
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	4798      	blx	r3
    while (ptr != end) {
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d015      	beq.n	8003d96 <_ZN4mbed6Stream5writeEPKvj+0x58>
        if (_putc(*ptr++) == EOF) {
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3348      	adds	r3, #72	; 0x48
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	1c59      	adds	r1, r3, #1
 8003d76:	6179      	str	r1, [r7, #20]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	4790      	blx	r2
 8003d80:	4603      	mov	r3, r0
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d100      	bne.n	8003d94 <_ZN4mbed6Stream5writeEPKvj+0x56>
    while (ptr != end) {
 8003d92:	e7e6      	b.n	8003d62 <_ZN4mbed6Stream5writeEPKvj+0x24>
            break;
 8003d94:	bf00      	nop
        }
    }
    unlock();
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3354      	adds	r3, #84	; 0x54
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	4798      	blx	r3

    return ptr - (const char *)buffer;
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	1ad3      	subs	r3, r2, r3
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <_ZN4mbed6Stream4readEPvj>:

ssize_t Stream::read(void *buffer, size_t length)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
    char *ptr = (char *)buffer;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	61fb      	str	r3, [r7, #28]
    char *end = ptr + length;
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]

    lock();
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3350      	adds	r3, #80	; 0x50
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	4798      	blx	r3
    while (ptr != end) {
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d012      	beq.n	8003e02 <_ZN4mbed6Stream4readEPvj+0x52>
        int c = _getc();
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	334c      	adds	r3, #76	; 0x4c
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	4798      	blx	r3
 8003de8:	6178      	str	r0, [r7, #20]
        if (c == EOF) {
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df0:	d006      	beq.n	8003e00 <_ZN4mbed6Stream4readEPvj+0x50>
            break;
        }
        *ptr++ = c;
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	61fa      	str	r2, [r7, #28]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]
    while (ptr != end) {
 8003dfe:	e7e9      	b.n	8003dd4 <_ZN4mbed6Stream4readEPvj+0x24>
            break;
 8003e00:	bf00      	nop
    }
    unlock();
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3354      	adds	r3, #84	; 0x54
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	4798      	blx	r3

    return ptr - (const char *)buffer;
 8003e0e:	69fa      	ldr	r2, [r7, #28]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	1ad3      	subs	r3, r2, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3720      	adds	r7, #32
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <_ZN4mbed6Stream4seekEli>:

off_t Stream::seek(off_t offset, int whence)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
    return 0;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <_ZN4mbed6Stream4tellEv>:

off_t Stream::tell()
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
    return 0;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <_ZN4mbed6Stream6rewindEv>:

void Stream::rewind()
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <_ZN4mbed6Stream6isattyEv>:

int Stream::isatty()
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
    return 0;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <_ZN4mbed6Stream4syncEv>:

int Stream::sync()
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
    return 0;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <_ZN4mbed6Stream4sizeEv>:

off_t Stream::size()
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
    return 0;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <_ZN4mbed6Stream6printfEPKcz>:

int Stream::printf(const char *format, ...)
{
 8003ea2:	b40e      	push	{r1, r2, r3}
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
    lock();
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3350      	adds	r3, #80	; 0x50
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	4798      	blx	r3
    std::va_list arg;
    va_start(arg, format);
 8003eb8:	f107 0320 	add.w	r3, r7, #32
 8003ebc:	60bb      	str	r3, [r7, #8]
    fflush(_file);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f003 fa8c 	bl	80073e0 <fflush>
    int r = vfprintf(_file, format, arg);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	69f9      	ldr	r1, [r7, #28]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f003 fed1 	bl	8007c78 <vfiprintf>
 8003ed6:	60f8      	str	r0, [r7, #12]
    va_end(arg);
    unlock();
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3354      	adds	r3, #84	; 0x54
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
    return r;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ef0:	b003      	add	sp, #12
 8003ef2:	4770      	bx	lr

08003ef4 <_ZN4mbed11NonCopyableINS_8FileLikeEEC1Ev>:
    NonCopyable() { }
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <_ZN4mbed11NonCopyableINS_8FileLikeEED1Ev>:
    ~NonCopyable() { }
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <_ZN4mbed11NonCopyableINS_6StreamEEC1Ev>:
    NonCopyable() { }
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <_ZN4mbed11NonCopyableINS_6StreamEED1Ev>:
    ~NonCopyable() { }
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <gpio_write>:
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
    if (value) {
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <gpio_write+0x1c>
        *obj->reg_set = obj->mask;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	601a      	str	r2, [r3, #0]
}
 8003f66:	e005      	b.n	8003f74 <gpio_write+0x28>
        *obj->reg_clr = obj->mask << 16;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	0412      	lsls	r2, r2, #16
 8003f72:	601a      	str	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <mbed_die>:
extern int stdio_uart_inited;
extern serial_t stdio_uart;
#endif

WEAK void mbed_die(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af00      	add	r7, sp, #0
#if !defined (NRF51_H) && !defined(TARGET_EFM32)
    core_util_critical_section_enter();
 8003f86:	f000 f861 	bl	800404c <core_util_critical_section_enter>
#endif
    gpio_t led_err;
    gpio_init_out(&led_err, LED1);
 8003f8a:	1d3b      	adds	r3, r7, #4
 8003f8c:	2105      	movs	r1, #5
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe ff27 	bl	8002de2 <gpio_init_out>

    while (1) {
        for (int i = 0; i < 4; ++i) {
 8003f94:	2300      	movs	r3, #0
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
 8003f98:	e012      	b.n	8003fc0 <mbed_die+0x40>
            gpio_write(&led_err, 1);
 8003f9a:	1d3b      	adds	r3, r7, #4
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff ffd4 	bl	8003f4c <gpio_write>
            wait_ms(150);
 8003fa4:	2096      	movs	r0, #150	; 0x96
 8003fa6:	f000 ff7d 	bl	8004ea4 <wait_ms>
            gpio_write(&led_err, 0);
 8003faa:	1d3b      	adds	r3, r7, #4
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff ffcc 	bl	8003f4c <gpio_write>
            wait_ms(150);
 8003fb4:	2096      	movs	r0, #150	; 0x96
 8003fb6:	f000 ff75 	bl	8004ea4 <wait_ms>
        for (int i = 0; i < 4; ++i) {
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	dde9      	ble.n	8003f9a <mbed_die+0x1a>
        }

        for (int i = 0; i < 4; ++i) {
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	623b      	str	r3, [r7, #32]
 8003fca:	e014      	b.n	8003ff6 <mbed_die+0x76>
            gpio_write(&led_err, 1);
 8003fcc:	1d3b      	adds	r3, r7, #4
 8003fce:	2101      	movs	r1, #1
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff ffbb 	bl	8003f4c <gpio_write>
            wait_ms(400);
 8003fd6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003fda:	f000 ff63 	bl	8004ea4 <wait_ms>
            gpio_write(&led_err, 0);
 8003fde:	1d3b      	adds	r3, r7, #4
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff ffb2 	bl	8003f4c <gpio_write>
            wait_ms(400);
 8003fe8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003fec:	f000 ff5a 	bl	8004ea4 <wait_ms>
        for (int i = 0; i < 4; ++i) {
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	623b      	str	r3, [r7, #32]
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	dde7      	ble.n	8003fcc <mbed_die+0x4c>
        for (int i = 0; i < 4; ++i) {
 8003ffc:	e7ca      	b.n	8003f94 <mbed_die+0x14>

08003ffe <core_util_are_interrupts_enabled>:
#endif

static volatile uint32_t critical_section_reentrancy_counter = 0;

bool core_util_are_interrupts_enabled(void)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004004:	f3ef 8310 	mrs	r3, PRIMASK
 8004008:	607b      	str	r3, [r7, #4]
  return(result);
 800400a:	687b      	ldr	r3, [r7, #4]
#if defined(__CORTEX_A9)
    return ((__get_CPSR() & 0x80) == 0);
#else
    return ((__get_PRIMASK() & 0x1) == 0);
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
#endif
}
 800401a:	4618      	mov	r0, r3
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <core_util_is_isr_active>:

bool core_util_is_isr_active(void)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800402c:	f3ef 8305 	mrs	r3, IPSR
 8004030:	607b      	str	r3, [r7, #4]
  return(result);
 8004032:	687b      	ldr	r3, [r7, #4]
        case CPSR_M_SVC:
        default:
            return true;
    }
#else
    return (__get_IPSR() != 0U);
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf14      	ite	ne
 8004038:	2301      	movne	r3, #1
 800403a:	2300      	moveq	r3, #0
 800403c:	b2db      	uxtb	r3, r3
#endif
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <core_util_critical_section_enter>:
{
    return hal_in_critical_section();
}

void core_util_critical_section_enter(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
#else
    // If the reentrancy counter overflows something has gone badly wrong.
    MBED_ASSERT(critical_section_reentrancy_counter < UINT32_MAX);
#endif /* FEATURE_UVISOR */

    hal_critical_section_enter();
 8004050:	f7fe fe58 	bl	8002d04 <hal_critical_section_enter>

    ++critical_section_reentrancy_counter;
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <core_util_critical_section_enter+0x18>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3301      	adds	r3, #1
 800405a:	4a02      	ldr	r2, [pc, #8]	; (8004064 <core_util_critical_section_enter+0x18>)
 800405c:	6013      	str	r3, [r2, #0]
}
 800405e:	bf00      	nop
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000444 	.word	0x20000444

08004068 <core_util_critical_section_exit>:

void core_util_critical_section_exit(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
#ifdef FEATURE_UVISOR
#warning "core_util_critical_section_exit needs fixing to work from unprivileged code"
#endif /* FEATURE_UVISOR */

    // If critical_section_enter has not previously been called, do nothing
    if (critical_section_reentrancy_counter == 0) {
 800406c:	4b08      	ldr	r3, [pc, #32]	; (8004090 <core_util_critical_section_exit+0x28>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00b      	beq.n	800408c <core_util_critical_section_exit+0x24>
        return;
    }

    --critical_section_reentrancy_counter;
 8004074:	4b06      	ldr	r3, [pc, #24]	; (8004090 <core_util_critical_section_exit+0x28>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3b01      	subs	r3, #1
 800407a:	4a05      	ldr	r2, [pc, #20]	; (8004090 <core_util_critical_section_exit+0x28>)
 800407c:	6013      	str	r3, [r2, #0]

    if (critical_section_reentrancy_counter == 0) {
 800407e:	4b04      	ldr	r3, [pc, #16]	; (8004090 <core_util_critical_section_exit+0x28>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d103      	bne.n	800408e <core_util_critical_section_exit+0x26>
        hal_critical_section_exit();
 8004086:	f7fe fe59 	bl	8002d3c <hal_critical_section_exit>
 800408a:	e000      	b.n	800408e <core_util_critical_section_exit+0x26>
        return;
 800408c:	bf00      	nop
    }
}
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20000444 	.word	0x20000444

08004094 <mbed_halt_system>:
static void print_error_report(mbed_error_ctx *ctx, const char *);
static mbed_error_status_t handle_error(mbed_error_status_t error_status, unsigned int error_value, const char *filename, int line_number, void *caller);

//Helper function to halt the system
static void mbed_halt_system(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
    //If not in ISR context exit, otherwise spin on WFI
    if (core_util_is_isr_active() || !core_util_are_interrupts_enabled()) {
 8004098:	f7ff ffc5 	bl	8004026 <core_util_is_isr_active>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d107      	bne.n	80040b2 <mbed_halt_system+0x1e>
 80040a2:	f7ff ffac 	bl	8003ffe <core_util_are_interrupts_enabled>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f083 0301 	eor.w	r3, r3, #1
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <mbed_halt_system+0x22>
        for (;;) {
            __WFI();
 80040b2:	bf30      	wfi
 80040b4:	e7fd      	b.n	80040b2 <mbed_halt_system+0x1e>
        }
    } else {
        //exit eventually calls mbed_die
        exit(1);
 80040b6:	2001      	movs	r0, #1
 80040b8:	f003 f874 	bl	80071a4 <exit>

080040bc <error>:
    }
}

WEAK void error(const char *format, ...)
{
 80040bc:	b40f      	push	{r0, r1, r2, r3}
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af02      	add	r7, sp, #8
 80040c4:	4672      	mov	r2, lr

    // Prevent recursion if error is called again
    if (error_in_progress) {
 80040c6:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <error+0x3c>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10d      	bne.n	80040ea <error+0x2e>
        return;
    }

    //Call handle_error/print_error_report permanently setting error_in_progress flag
    handle_error(MBED_ERROR_UNKNOWN, 0, NULL, 0, MBED_CALLER_ADDR());
 80040ce:	4613      	mov	r3, r2
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	2300      	movs	r3, #0
 80040d4:	2200      	movs	r2, #0
 80040d6:	2100      	movs	r1, #0
 80040d8:	4808      	ldr	r0, [pc, #32]	; (80040fc <error+0x40>)
 80040da:	f000 f811 	bl	8004100 <handle_error>
    ERROR_REPORT(&last_error_ctx, "Fatal Run-time error");
    error_in_progress = 1;
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <error+0x3c>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	701a      	strb	r2, [r3, #0]
    va_list arg;
    va_start(arg, format);
    mbed_error_vfprintf(format, arg);
    va_end(arg);
#endif
    exit(1);
 80040e4:	2001      	movs	r0, #1
 80040e6:	f003 f85d 	bl	80071a4 <exit>
        return;
 80040ea:	bf00      	nop
}
 80040ec:	46bd      	mov	sp, r7
 80040ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040f2:	b004      	add	sp, #16
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000448 	.word	0x20000448
 80040fc:	80ff0100 	.word	0x80ff0100

08004100 <handle_error>:

//Set an error status with the error handling system
static mbed_error_status_t handle_error(mbed_error_status_t error_status, unsigned int error_value, const char *filename, int line_number, void *caller)
{
 8004100:	b5b0      	push	{r4, r5, r7, lr}
 8004102:	b092      	sub	sp, #72	; 0x48
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
    mbed_error_ctx current_error_ctx;

    //Error status should always be < 0
    if (error_status >= 0) {
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	db01      	blt.n	8004118 <handle_error+0x18>
        //This is a weird situation, someone called mbed_error with invalid error code.
        //We will still handle the situation but change the error code to ERROR_INVALID_ARGUMENT, atleast the context will have info on who called it
        error_status = MBED_ERROR_INVALID_ARGUMENT;
 8004114:	4b22      	ldr	r3, [pc, #136]	; (80041a0 <handle_error+0xa0>)
 8004116:	60fb      	str	r3, [r7, #12]
    }

    //Prevent corruption by holding out other callers
    //and we also need this until we remove the "error" call completely
    while (error_in_progress == 1);
 8004118:	bf00      	nop
 800411a:	4b22      	ldr	r3, [pc, #136]	; (80041a4 <handle_error+0xa4>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d0fb      	beq.n	800411a <handle_error+0x1a>

    //Use critsect here, as we don't want inadvertant modification of this global variable
    core_util_critical_section_enter();
 8004122:	f7ff ff93 	bl	800404c <core_util_critical_section_enter>
    error_in_progress = 1;
 8004126:	4b1f      	ldr	r3, [pc, #124]	; (80041a4 <handle_error+0xa4>)
 8004128:	2201      	movs	r2, #1
 800412a:	701a      	strb	r2, [r3, #0]
    core_util_critical_section_exit();
 800412c:	f7ff ff9c 	bl	8004068 <core_util_critical_section_exit>

    //Increment error count
    error_count++;
 8004130:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <handle_error+0xa8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3301      	adds	r3, #1
 8004136:	4a1c      	ldr	r2, [pc, #112]	; (80041a8 <handle_error+0xa8>)
 8004138:	6013      	str	r3, [r2, #0]

    //Clear the context capturing buffer
    memset(&current_error_ctx, sizeof(mbed_error_ctx), 0);
    //Capture error information
    current_error_ctx.error_status = error_status;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	617b      	str	r3, [r7, #20]
    current_error_ctx.error_address = (uint32_t)caller;
 800413e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004140:	61bb      	str	r3, [r7, #24]
    current_error_ctx.error_value = error_value;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	61fb      	str	r3, [r7, #28]
    strncpy(current_error_ctx.error_filename, filename, MBED_CONF_PLATFORM_MAX_ERROR_FILENAME_LEN);
    current_error_ctx.error_line_number = line_number;
#endif

    //Capture the fist system error and store it
    if (error_count == 1) { //first error
 8004146:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <handle_error+0xa8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d10b      	bne.n	8004166 <handle_error+0x66>
        memcpy(&first_error_ctx, &current_error_ctx, sizeof(mbed_error_ctx));
 800414e:	4b17      	ldr	r3, [pc, #92]	; (80041ac <handle_error+0xac>)
 8004150:	461d      	mov	r5, r3
 8004152:	f107 0414 	add.w	r4, r7, #20
 8004156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800415a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800415c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800415e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	602b      	str	r3, [r5, #0]
    }

    //copy this error to last error
    memcpy(&last_error_ctx, &current_error_ctx, sizeof(mbed_error_ctx));
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <handle_error+0xb0>)
 8004168:	461d      	mov	r5, r3
 800416a:	f107 0414 	add.w	r4, r7, #20
 800416e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	602b      	str	r3, [r5, #0]
    //Log the error with error log
    mbed_error_hist_put(&current_error_ctx);
#endif

    //Call the error hook if available
    if (error_hook != NULL) {
 800417e:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <handle_error+0xb4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <handle_error+0x8e>
        error_hook(&last_error_ctx);
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <handle_error+0xb4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4809      	ldr	r0, [pc, #36]	; (80041b0 <handle_error+0xb0>)
 800418c:	4798      	blx	r3
    }

    error_in_progress = 0;
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <handle_error+0xa4>)
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]

    return MBED_SUCCESS;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3748      	adds	r7, #72	; 0x48
 800419a:	46bd      	mov	sp, r7
 800419c:	bdb0      	pop	{r4, r5, r7, pc}
 800419e:	bf00      	nop
 80041a0:	80ff0101 	.word	0x80ff0101
 80041a4:	20000448 	.word	0x20000448
 80041a8:	2000044c 	.word	0x2000044c
 80041ac:	20000450 	.word	0x20000450
 80041b0:	20000484 	.word	0x20000484
 80041b4:	200004b8 	.word	0x200004b8

080041b8 <mbed_error>:
    return handle_error(error_status, error_value, filename, line_number, MBED_CALLER_ADDR());
}

//Sets a fatal error, this function is marked WEAK to be able to override this for some tests
WEAK mbed_error_status_t mbed_error(mbed_error_status_t error_status, const char *error_msg, unsigned int error_value, const char *filename, int line_number)
{
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af02      	add	r7, sp, #8
 80041be:	4674      	mov	r4, lr
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	603b      	str	r3, [r7, #0]
    //set the error reported and then halt the system
    if (MBED_SUCCESS != handle_error(error_status, error_value, filename, line_number, MBED_CALLER_ADDR())) {
 80041c8:	4623      	mov	r3, r4
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7ff ff94 	bl	8004100 <handle_error>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <mbed_error+0x2a>
        return MBED_ERROR_FAILED_OPERATION;
 80041de:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <mbed_error+0x38>)
 80041e0:	e002      	b.n	80041e8 <mbed_error+0x30>
    }

    //On fatal errors print the error context/report
    ERROR_REPORT(&last_error_ctx, error_msg);
    mbed_halt_system();
 80041e2:	f7ff ff57 	bl	8004094 <mbed_halt_system>

    return MBED_ERROR_FAILED_OPERATION;
 80041e6:	4b02      	ldr	r3, [pc, #8]	; (80041f0 <mbed_error+0x38>)
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd90      	pop	{r4, r7, pc}
 80041f0:	80ff010f 	.word	0x80ff010f

080041f4 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE>:

namespace mbed {
void mbed_set_unbuffered_stream(std::FILE *_file);

void remove_filehandle(FileHandle *file)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
    filehandle_mutex->lock();
 80041fc:	4813      	ldr	r0, [pc, #76]	; (800424c <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x58>)
 80041fe:	f7fe fbb0 	bl	8002962 <_ZN12SingletonPtrI13PlatformMutexEptEv>
 8004202:	4603      	mov	r3, r0
 8004204:	4618      	mov	r0, r3
 8004206:	f7fe fa28 	bl	800265a <_ZN13PlatformMutex4lockEv>
    /* Remove all open filehandles for this */
    for (unsigned int fh_i = 0; fh_i < sizeof(filehandles) / sizeof(*filehandles); fh_i++) {
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b3f      	cmp	r3, #63	; 0x3f
 8004212:	d80f      	bhi.n	8004234 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x40>
        if (filehandles[fh_i] == file) {
 8004214:	4a0e      	ldr	r2, [pc, #56]	; (8004250 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x5c>)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d104      	bne.n	800422c <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x38>
            filehandles[fh_i] = NULL;
 8004222:	4a0b      	ldr	r2, [pc, #44]	; (8004250 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x5c>)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2100      	movs	r1, #0
 8004228:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (unsigned int fh_i = 0; fh_i < sizeof(filehandles) / sizeof(*filehandles); fh_i++) {
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3301      	adds	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	e7ec      	b.n	800420e <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x1a>
        }
    }
    filehandle_mutex->unlock();
 8004234:	4805      	ldr	r0, [pc, #20]	; (800424c <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x58>)
 8004236:	f7fe fb94 	bl	8002962 <_ZN12SingletonPtrI13PlatformMutexEptEv>
 800423a:	4603      	mov	r3, r0
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe fa16 	bl	800266e <_ZN13PlatformMutex6unlockEv>
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	2000053c 	.word	0x2000053c
 8004250:	20000204 	.word	0x20000204

08004254 <_ZN12DirectSerial4seekEli>:
class DirectSerial : public FileHandle {
public:
    DirectSerial(PinName tx, PinName rx, int baud);
    virtual ssize_t write(const void *buffer, size_t size);
    virtual ssize_t read(void *buffer, size_t size);
    virtual off_t seek(off_t offset, int whence = SEEK_SET)
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
    {
        return -ESPIPE;
 8004260:	f06f 031c 	mvn.w	r3, #28
    }
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <_ZN12DirectSerial4sizeEv>:
    virtual off_t size()
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
    {
        return -EINVAL;
 8004278:	f06f 0315 	mvn.w	r3, #21
    }
 800427c:	4618      	mov	r0, r3
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <_ZN12DirectSerial6isattyEv>:
    virtual int isatty()
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
    {
        return true;
 8004290:	2301      	movs	r3, #1
    }
 8004292:	4618      	mov	r0, r3
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <_ZN12DirectSerial5closeEv>:
    virtual int close()
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80042a6:	2300      	movs	r3, #0
    }
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <_ZN12DirectSerialC1E7PinNameS0_i>:
    virtual short poll(short events) const;
};

DirectSerial::DirectSerial(PinName tx, PinName rx, int baud)
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	460b      	mov	r3, r1
 80042c0:	817b      	strh	r3, [r7, #10]
 80042c2:	4613      	mov	r3, r2
 80042c4:	813b      	strh	r3, [r7, #8]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fe fcdf 	bl	8002c8c <_ZN4mbed10FileHandleC1Ev>
 80042ce:	4a0d      	ldr	r2, [pc, #52]	; (8004304 <_ZN12DirectSerialC1E7PinNameS0_i+0x50>)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	601a      	str	r2, [r3, #0]
{
    if (stdio_uart_inited) {
 80042d4:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <_ZN12DirectSerialC1E7PinNameS0_i+0x54>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10c      	bne.n	80042f6 <_ZN12DirectSerialC1E7PinNameS0_i+0x42>
        return;
    }
    serial_init(&stdio_uart, tx, rx);
 80042dc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80042e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80042e4:	4619      	mov	r1, r3
 80042e6:	4809      	ldr	r0, [pc, #36]	; (800430c <_ZN12DirectSerialC1E7PinNameS0_i+0x58>)
 80042e8:	f002 fc42 	bl	8006b70 <serial_init>
    serial_baud(&stdio_uart, baud);
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4807      	ldr	r0, [pc, #28]	; (800430c <_ZN12DirectSerialC1E7PinNameS0_i+0x58>)
 80042f0:	f002 fd16 	bl	8006d20 <serial_baud>
 80042f4:	e000      	b.n	80042f8 <_ZN12DirectSerialC1E7PinNameS0_i+0x44>
        return;
 80042f6:	bf00      	nop
#elif CONSOLE_FLOWCONTROL == CONSOLE_FLOWCONTROL_CTS
    serial_set_flow_control(&stdio_uart, FlowControlCTS, NC, STDIO_UART_CTS);
#elif CONSOLE_FLOWCONTROL == CONSOLE_FLOWCONTROL_RTSCTS
    serial_set_flow_control(&stdio_uart, FlowControlRTSCTS, STDIO_UART_RTS, STDIO_UART_CTS);
#endif
}
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	08008ce4 	.word	0x08008ce4
 8004308:	20000550 	.word	0x20000550
 800430c:	200006b0 	.word	0x200006b0

08004310 <_ZN12DirectSerial5writeEPKvj>:

ssize_t DirectSerial::write(const void *buffer, size_t size)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
    const unsigned char *buf = static_cast<const unsigned char *>(buffer);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < size; i++) {
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	429a      	cmp	r2, r3
 800432a:	d20b      	bcs.n	8004344 <_ZN12DirectSerial5writeEPKvj+0x34>
        serial_putc(&stdio_uart, buf[i]);
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	4413      	add	r3, r2
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	4619      	mov	r1, r3
 8004336:	4806      	ldr	r0, [pc, #24]	; (8004350 <_ZN12DirectSerial5writeEPKvj+0x40>)
 8004338:	f000 fe6c 	bl	8005014 <serial_putc>
    for (size_t i = 0; i < size; i++) {
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	3301      	adds	r3, #1
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	e7ef      	b.n	8004324 <_ZN12DirectSerial5writeEPKvj+0x14>
    }
    return size;
 8004344:	687b      	ldr	r3, [r7, #4]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	200006b0 	.word	0x200006b0

08004354 <_ZN12DirectSerial4readEPvj>:

ssize_t DirectSerial::read(void *buffer, size_t size)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
    unsigned char *buf = static_cast<unsigned char *>(buffer);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	617b      	str	r3, [r7, #20]
    if (size == 0) {
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <_ZN12DirectSerial4readEPvj+0x1a>
        return 0;
 800436a:	2300      	movs	r3, #0
 800436c:	e007      	b.n	800437e <_ZN12DirectSerial4readEPvj+0x2a>
    }
    buf[0] = serial_getc(&stdio_uart);
 800436e:	4806      	ldr	r0, [pc, #24]	; (8004388 <_ZN12DirectSerial4readEPvj+0x34>)
 8004370:	f000 fe32 	bl	8004fd8 <serial_getc>
 8004374:	4603      	mov	r3, r0
 8004376:	b2da      	uxtb	r2, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	701a      	strb	r2, [r3, #0]
    return 1;
 800437c:	2301      	movs	r3, #1
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	200006b0 	.word	0x200006b0

0800438c <_ZNK12DirectSerial4pollEs>:

short DirectSerial::poll(short events) const
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	807b      	strh	r3, [r7, #2]
    short revents = 0;
 8004398:	2300      	movs	r3, #0
 800439a:	81fb      	strh	r3, [r7, #14]
    if ((events & POLLIN) && serial_readable(&stdio_uart)) {
 800439c:	887b      	ldrh	r3, [r7, #2]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <_ZNK12DirectSerial4pollEs+0x2a>
 80043a6:	4814      	ldr	r0, [pc, #80]	; (80043f8 <_ZNK12DirectSerial4pollEs+0x6c>)
 80043a8:	f002 fcd4 	bl	8006d54 <serial_readable>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <_ZNK12DirectSerial4pollEs+0x2a>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <_ZNK12DirectSerial4pollEs+0x2c>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <_ZNK12DirectSerial4pollEs+0x38>
        revents |= POLLIN;
 80043bc:	89fb      	ldrh	r3, [r7, #14]
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	81fb      	strh	r3, [r7, #14]
    }
    if ((events & POLLOUT) && serial_writable(&stdio_uart)) {
 80043c4:	887b      	ldrh	r3, [r7, #2]
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <_ZNK12DirectSerial4pollEs+0x52>
 80043ce:	480a      	ldr	r0, [pc, #40]	; (80043f8 <_ZNK12DirectSerial4pollEs+0x6c>)
 80043d0:	f002 fcf0 	bl	8006db4 <serial_writable>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <_ZNK12DirectSerial4pollEs+0x52>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <_ZNK12DirectSerial4pollEs+0x54>
 80043de:	2300      	movs	r3, #0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <_ZNK12DirectSerial4pollEs+0x60>
        revents |= POLLOUT;
 80043e4:	89fb      	ldrh	r3, [r7, #14]
 80043e6:	f043 0310 	orr.w	r3, r3, #16
 80043ea:	81fb      	strh	r3, [r7, #14]
    }
    return revents;
 80043ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	200006b0 	.word	0x200006b0

080043fc <_ZN4mbed28mbed_target_override_consoleEi>:
    return 1;
}


MBED_WEAK FileHandle *mbed::mbed_target_override_console(int fd)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
    return NULL;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <_ZN4mbed21mbed_override_consoleEi>:

MBED_WEAK FileHandle *mbed::mbed_override_console(int fd)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
    return NULL;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <__tcf_0>:
#   elif CONSOLE_FLOWCONTROL == CONSOLE_FLOWCONTROL_RTSCTS
    console.set_flow_control(SerialBase::RTSCTS, STDIO_UART_RTS, STDIO_UART_CTS);
#   endif
#  else
#define MBED_CONF_PLATFORM_STDIO_BAUD_RATE 9600
    static DirectSerial console(STDIO_UART_TX, STDIO_UART_RX, MBED_CONF_PLATFORM_STDIO_BAUD_RATE);
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
 800442c:	4801      	ldr	r0, [pc, #4]	; (8004434 <__tcf_0+0xc>)
 800442e:	f000 fd17 	bl	8004e60 <_ZN12DirectSerialD1Ev>
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20000544 	.word	0x20000544

08004438 <_ZL15default_consolev>:
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
    static DirectSerial console(STDIO_UART_TX, STDIO_UART_RX, MBED_CONF_PLATFORM_STDIO_BAUD_RATE);
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <_ZL15default_consolev+0x30>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10c      	bne.n	8004462 <_ZL15default_consolev+0x2a>
 8004448:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800444c:	2203      	movs	r2, #3
 800444e:	2102      	movs	r1, #2
 8004450:	4806      	ldr	r0, [pc, #24]	; (800446c <_ZL15default_consolev+0x34>)
 8004452:	f7ff ff2f 	bl	80042b4 <_ZN12DirectSerialC1E7PinNameS0_i>
 8004456:	4b04      	ldr	r3, [pc, #16]	; (8004468 <_ZL15default_consolev+0x30>)
 8004458:	2201      	movs	r2, #1
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	4804      	ldr	r0, [pc, #16]	; (8004470 <_ZL15default_consolev+0x38>)
 800445e:	f002 fe95 	bl	800718c <atexit>
#  endif
#else // DEVICE_SERIAL
    static Sink console;
#endif
    return &console;
 8004462:	4b02      	ldr	r3, [pc, #8]	; (800446c <_ZL15default_consolev+0x34>)
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	20000548 	.word	0x20000548
 800446c:	20000544 	.word	0x20000544
 8004470:	08004429 	.word	0x08004429

08004474 <_ZL11get_consolei>:

/* Locate the default console for stdout, stdin, stderr */
static FileHandle *get_console(int fd)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
    FileHandle *fh = mbed_override_console(fd);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ffc8 	bl	8004412 <_ZN4mbed21mbed_override_consoleEi>
 8004482:	60f8      	str	r0, [r7, #12]
    if (fh) {
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <_ZL11get_consolei+0x1a>
        return fh;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	e00b      	b.n	80044a6 <_ZL11get_consolei+0x32>
    }
    fh = mbed_target_override_console(fd);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff ffb4 	bl	80043fc <_ZN4mbed28mbed_target_override_consoleEi>
 8004494:	60f8      	str	r0, [r7, #12]
    if (fh) {
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <_ZL11get_consolei+0x2c>
        return fh;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	e002      	b.n	80044a6 <_ZL11get_consolei+0x32>
    }
    return default_console();
 80044a0:	f7ff ffca 	bl	8004438 <_ZL15default_consolev>
 80044a4:	4603      	mov	r3, r0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <_ZL7get_fhci>:

/* Deal with the fact C library may not _open descriptors 0, 1, 2 - auto bind */
static FileHandle *get_fhc(int fd)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
    if (fd >= OPEN_MAX) {
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b3f      	cmp	r3, #63	; 0x3f
 80044bc:	dd01      	ble.n	80044c2 <_ZL7get_fhci+0x12>
        return NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	e015      	b.n	80044ee <_ZL7get_fhci+0x3e>
    }
    FileHandle *fh = filehandles[fd];
 80044c2:	4a0d      	ldr	r2, [pc, #52]	; (80044f8 <_ZL7get_fhci+0x48>)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ca:	60fb      	str	r3, [r7, #12]
    if (fh == FILE_HANDLE_RESERVED && fd < 3) {
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d2:	d10b      	bne.n	80044ec <_ZL7get_fhci+0x3c>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	dc08      	bgt.n	80044ec <_ZL7get_fhci+0x3c>
        filehandles[fd] = fh = get_console(fd);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff ffca 	bl	8004474 <_ZL11get_consolei>
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	4905      	ldr	r1, [pc, #20]	; (80044f8 <_ZL7get_fhci+0x48>)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return fh;
 80044ec:	68fb      	ldr	r3, [r7, #12]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000204 	.word	0x20000204

080044fc <_ZL18handle_open_errorsij>:
 *
 * @param error is a negative error code returned from an mbed function and
 *              will be negated to store a positive error code in errno
 */
static int handle_open_errors(int error, unsigned filehandle_idx)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
    errno = -error;
 8004506:	f002 fe47 	bl	8007198 <__errno>
 800450a:	4602      	mov	r2, r0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	425b      	negs	r3, r3
 8004510:	6013      	str	r3, [r2, #0]
    // Free file handle
    filehandles[filehandle_idx] = NULL;
 8004512:	4a05      	ldr	r2, [pc, #20]	; (8004528 <_ZL18handle_open_errorsij+0x2c>)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2100      	movs	r1, #0
 8004518:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return -1;
 800451c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20000204 	.word	0x20000204

0800452c <_ZL18openflags_to_posixi>:

static inline int openflags_to_posix(int openflags)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
    int posix = openflags;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	60fb      	str	r3, [r7, #12]
    }
    if (openflags & _LLIO_TRUNC) {
        posix |= O_TRUNC;
    }
#elif defined(TOOLCHAIN_GCC)
    posix &= ~O_BINARY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800453e:	60fb      	str	r3, [r7, #12]
#endif
    return posix;
 8004540:	68fb      	ldr	r3, [r7, #12]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
	...

08004550 <_ZL18reserve_filehandlev>:

static int reserve_filehandle()
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
    // find the first empty slot in filehandles, after the slots reserved for stdin/stdout/stderr
    filehandle_mutex->lock();
 8004556:	481d      	ldr	r0, [pc, #116]	; (80045cc <_ZL18reserve_filehandlev+0x7c>)
 8004558:	f7fe fa03 	bl	8002962 <_ZN12SingletonPtrI13PlatformMutexEptEv>
 800455c:	4603      	mov	r3, r0
 800455e:	4618      	mov	r0, r3
 8004560:	f7fe f87b 	bl	800265a <_ZN13PlatformMutex4lockEv>
    int fh_i;
    for (fh_i = 3; fh_i < OPEN_MAX; fh_i++) {
 8004564:	2303      	movs	r3, #3
 8004566:	607b      	str	r3, [r7, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b3f      	cmp	r3, #63	; 0x3f
 800456c:	dc0a      	bgt.n	8004584 <_ZL18reserve_filehandlev+0x34>
        /* Take a next free filehandle slot available. */
        if (filehandles[fh_i] == NULL) {
 800456e:	4a18      	ldr	r2, [pc, #96]	; (80045d0 <_ZL18reserve_filehandlev+0x80>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <_ZL18reserve_filehandlev+0x32>
    for (fh_i = 3; fh_i < OPEN_MAX; fh_i++) {
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3301      	adds	r3, #1
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	e7f2      	b.n	8004568 <_ZL18reserve_filehandlev+0x18>
            break;
 8004582:	bf00      	nop
        }
    }
    if (fh_i >= OPEN_MAX) {
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b3f      	cmp	r3, #63	; 0x3f
 8004588:	dd0e      	ble.n	80045a8 <_ZL18reserve_filehandlev+0x58>
        /* Too many file handles have been opened */
        errno = EMFILE;
 800458a:	f002 fe05 	bl	8007198 <__errno>
 800458e:	4602      	mov	r2, r0
 8004590:	2318      	movs	r3, #24
 8004592:	6013      	str	r3, [r2, #0]
        filehandle_mutex->unlock();
 8004594:	480d      	ldr	r0, [pc, #52]	; (80045cc <_ZL18reserve_filehandlev+0x7c>)
 8004596:	f7fe f9e4 	bl	8002962 <_ZN12SingletonPtrI13PlatformMutexEptEv>
 800459a:	4603      	mov	r3, r0
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe f866 	bl	800266e <_ZN13PlatformMutex6unlockEv>
        return -1;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295
 80045a6:	e00d      	b.n	80045c4 <_ZL18reserve_filehandlev+0x74>
    }
    filehandles[fh_i] = FILE_HANDLE_RESERVED;
 80045a8:	4a09      	ldr	r2, [pc, #36]	; (80045d0 <_ZL18reserve_filehandlev+0x80>)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f04f 31ff 	mov.w	r1, #4294967295
 80045b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    filehandle_mutex->unlock();
 80045b4:	4805      	ldr	r0, [pc, #20]	; (80045cc <_ZL18reserve_filehandlev+0x7c>)
 80045b6:	f7fe f9d4 	bl	8002962 <_ZN12SingletonPtrI13PlatformMutexEptEv>
 80045ba:	4603      	mov	r3, r0
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fe f856 	bl	800266e <_ZN13PlatformMutex6unlockEv>

    return fh_i;
 80045c2:	687b      	ldr	r3, [r7, #4]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	2000053c 	.word	0x2000053c
 80045d0:	20000204 	.word	0x20000204

080045d4 <_ZN4mbed10bind_to_fdEPNS_10FileHandleE>:

int mbed::bind_to_fd(FileHandle *fh)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
    int fildes = reserve_filehandle();
 80045dc:	f7ff ffb8 	bl	8004550 <_ZL18reserve_filehandlev>
 80045e0:	60f8      	str	r0, [r7, #12]
    if (fildes < 0) {
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	da01      	bge.n	80045ec <_ZN4mbed10bind_to_fdEPNS_10FileHandleE+0x18>
        return fildes;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	e00f      	b.n	800460c <_ZN4mbed10bind_to_fdEPNS_10FileHandleE+0x38>
    }

    filehandles[fildes] = fh;
 80045ec:	4909      	ldr	r1, [pc, #36]	; (8004614 <_ZN4mbed10bind_to_fdEPNS_10FileHandleE+0x40>)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    stdio_in_prev[fildes] = 0;
 80045f6:	4a08      	ldr	r2, [pc, #32]	; (8004618 <_ZN4mbed10bind_to_fdEPNS_10FileHandleE+0x44>)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	2200      	movs	r2, #0
 80045fe:	701a      	strb	r2, [r3, #0]
    stdio_out_prev[fildes] = 0;
 8004600:	4a06      	ldr	r2, [pc, #24]	; (800461c <_ZN4mbed10bind_to_fdEPNS_10FileHandleE+0x48>)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4413      	add	r3, r2
 8004606:	2200      	movs	r2, #0
 8004608:	701a      	strb	r2, [r3, #0]

    return fildes;
 800460a:	68fb      	ldr	r3, [r7, #12]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20000204 	.word	0x20000204
 8004618:	200004bc 	.word	0x200004bc
 800461c:	200004fc 	.word	0x200004fc

08004620 <_ZL14unbind_from_fdiPN4mbed10FileHandleE>:

static int unbind_from_fd(int fd, FileHandle *fh)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
    if (filehandles[fd] == fh) {
 800462a:	4a0c      	ldr	r2, [pc, #48]	; (800465c <_ZL14unbind_from_fdiPN4mbed10FileHandleE+0x3c>)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d106      	bne.n	8004646 <_ZL14unbind_from_fdiPN4mbed10FileHandleE+0x26>
        filehandles[fd] = NULL;
 8004638:	4a08      	ldr	r2, [pc, #32]	; (800465c <_ZL14unbind_from_fdiPN4mbed10FileHandleE+0x3c>)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2100      	movs	r1, #0
 800463e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 0;
 8004642:	2300      	movs	r3, #0
 8004644:	e006      	b.n	8004654 <_ZL14unbind_from_fdiPN4mbed10FileHandleE+0x34>
    } else {
        errno = EBADF;
 8004646:	f002 fda7 	bl	8007198 <__errno>
 800464a:	4602      	mov	r2, r0
 800464c:	2309      	movs	r3, #9
 800464e:	6013      	str	r3, [r2, #0]
        return -1;
 8004650:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000204 	.word	0x20000204

08004660 <fdopen>:

#ifndef __IAR_SYSTEMS_ICC__
/* IAR provides fdopen itself */
extern "C" std::FILE *fdopen(int fildes, const char *mode)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
    // This is to avoid scanf and the bloat it brings.
    char buf[1 + sizeof fildes]; /* @(integer) */
    MBED_STATIC_ASSERT(sizeof buf == 5, "Integers should be 4 bytes.");
    buf[0] = '@';
 800466a:	2340      	movs	r3, #64	; 0x40
 800466c:	733b      	strb	r3, [r7, #12]
    memcpy(buf + 1, &fildes, sizeof fildes);
 800466e:	f107 030c 	add.w	r3, r7, #12
 8004672:	3301      	adds	r3, #1
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	601a      	str	r2, [r3, #0]

    std::FILE *stream = std::fopen(buf, mode);
 8004678:	f107 030c 	add.w	r3, r7, #12
 800467c:	6839      	ldr	r1, [r7, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f002 ffae 	bl	80075e0 <fopen>
 8004684:	6178      	str	r0, [r7, #20]
    /* newlib-nano doesn't appear to ever call _isatty itself, so
     * happily fully buffers an interactive stream. Deal with that here.
     */
    if (stream && isatty(fildes)) {
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <fdopen+0x3e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4618      	mov	r0, r3
 8004690:	f000 facf 	bl	8004c32 <isatty>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <fdopen+0x3e>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <fdopen+0x40>
 800469e:	2300      	movs	r3, #0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <fdopen+0x4a>
        mbed_set_unbuffered_stream(stream);
 80046a4:	6978      	ldr	r0, [r7, #20]
 80046a6:	f000 fb7c 	bl	8004da2 <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>
    }
    return stream;
 80046aa:	697b      	ldr	r3, [r7, #20]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <_ZN4mbed6fdopenEPNS_10FileHandleEPKc>:
#endif

namespace mbed {
std::FILE *fdopen(FileHandle *fh, const char *mode)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
    // First reserve the integer file descriptor
    int fd = bind_to_fd(fh);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff ff88 	bl	80045d4 <_ZN4mbed10bind_to_fdEPNS_10FileHandleE>
 80046c4:	60f8      	str	r0, [r7, #12]
    if (!fd) {
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <_ZN4mbed6fdopenEPNS_10FileHandleEPKc+0x1c>
        return NULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e00c      	b.n	80046ea <_ZN4mbed6fdopenEPNS_10FileHandleEPKc+0x36>
    }
    // Then bind that to the C stream. If successful, C library
    // takes ownership and responsibility to close.
    std::FILE *stream = ::fdopen(fd, mode);
 80046d0:	6839      	ldr	r1, [r7, #0]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f7ff ffc4 	bl	8004660 <fdopen>
 80046d8:	60b8      	str	r0, [r7, #8]
    if (!stream) {
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d103      	bne.n	80046e8 <_ZN4mbed6fdopenEPNS_10FileHandleEPKc+0x34>
        unbind_from_fd(fd, fh);
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7ff ff9c 	bl	8004620 <_ZL14unbind_from_fdiPN4mbed10FileHandleE>
    }
    return stream;
 80046e8:	68bb      	ldr	r3, [r7, #8]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <_open>:
 *   ENOENT     file not found (default errno setting)
 *   EMFILE     the maximum number of open files was exceeded.
 *
 * */
extern "C" FILEHANDLE PREFIX(_open)(const char *name, int openflags)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
        return n++;
    }
#else
    /* Use the posix convention that stdin,out,err are filehandles 0,1,2.
     */
    if (std::strcmp(name, __stdin_name) == 0) {
 80046fe:	491d      	ldr	r1, [pc, #116]	; (8004774 <_open+0x80>)
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7fb fdbd 	bl	8000280 <strcmp>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d104      	bne.n	8004716 <_open+0x22>
        get_fhc(STDIN_FILENO);
 800470c:	2000      	movs	r0, #0
 800470e:	f7ff fecf 	bl	80044b0 <_ZL7get_fhci>
        return STDIN_FILENO;
 8004712:	2300      	movs	r3, #0
 8004714:	e02a      	b.n	800476c <_open+0x78>
    } else if (std::strcmp(name, __stdout_name) == 0) {
 8004716:	4918      	ldr	r1, [pc, #96]	; (8004778 <_open+0x84>)
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7fb fdb1 	bl	8000280 <strcmp>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d104      	bne.n	800472e <_open+0x3a>
        get_fhc(STDOUT_FILENO);
 8004724:	2001      	movs	r0, #1
 8004726:	f7ff fec3 	bl	80044b0 <_ZL7get_fhci>
        return STDOUT_FILENO;
 800472a:	2301      	movs	r3, #1
 800472c:	e01e      	b.n	800476c <_open+0x78>
    } else if (std::strcmp(name, __stderr_name) == 0) {
 800472e:	4913      	ldr	r1, [pc, #76]	; (800477c <_open+0x88>)
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7fb fda5 	bl	8000280 <strcmp>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d104      	bne.n	8004746 <_open+0x52>
        get_fhc(STDERR_FILENO);
 800473c:	2002      	movs	r0, #2
 800473e:	f7ff feb7 	bl	80044b0 <_ZL7get_fhci>
        return STDERR_FILENO;
 8004742:	2302      	movs	r3, #2
 8004744:	e012      	b.n	800476c <_open+0x78>
    }
#endif
#ifndef __IAR_SYSTEMS_ICC__
    /* FILENAME: "@(integer)" gives an already-allocated descriptor */
    if (name[0] == '@') {
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b40      	cmp	r3, #64	; 0x40
 800474c:	d105      	bne.n	800475a <_open+0x66>
        int fd;
        memcpy(&fd, name + 1, sizeof fd);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3301      	adds	r3, #1
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60fb      	str	r3, [r7, #12]
        return fd;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	e008      	b.n	800476c <_open+0x78>
    }
#endif
    return open(name, openflags_to_posix(openflags));
 800475a:	6838      	ldr	r0, [r7, #0]
 800475c:	f7ff fee6 	bl	800452c <_ZL18openflags_to_posixi>
 8004760:	4603      	mov	r3, r0
 8004762:	4619      	mov	r1, r3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f80b 	bl	8004780 <open>
 800476a:	4603      	mov	r3, r0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	08008cc4 	.word	0x08008cc4
 8004778:	08008ccc 	.word	0x08008ccc
 800477c:	08008cd4 	.word	0x08008cd4

08004780 <open>:

extern "C" int open(const char *name, int oflag, ...)
{
 8004780:	b40e      	push	{r1, r2, r3}
 8004782:	b590      	push	{r4, r7, lr}
 8004784:	b088      	sub	sp, #32
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
    int fildes = reserve_filehandle();
 800478a:	f7ff fee1 	bl	8004550 <_ZL18reserve_filehandlev>
 800478e:	61f8      	str	r0, [r7, #28]
    if (fildes < 0) {
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	2b00      	cmp	r3, #0
 8004794:	da01      	bge.n	800479a <open+0x1a>
        return fildes;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	e065      	b.n	8004866 <open+0xe6>
    }

    FileHandle *res = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	613b      	str	r3, [r7, #16]
    FilePath path(name);
 800479e:	f107 0308 	add.w	r3, r7, #8
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff f93f 	bl	8003a28 <_ZN4mbed8FilePathC1EPKc>

    if (!path.exists()) {
 80047aa:	f107 0308 	add.w	r3, r7, #8
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff f9ee 	bl	8003b90 <_ZN4mbed8FilePath6existsEv>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f083 0301 	eor.w	r3, r3, #1
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d007      	beq.n	80047d0 <open+0x50>
        /* The first part of the filename (between first 2 '/') is not a
         * registered mount point in the namespace.
         */
        return handle_open_errors(-ENODEV, fildes);
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	4619      	mov	r1, r3
 80047c4:	f06f 0012 	mvn.w	r0, #18
 80047c8:	f7ff fe98 	bl	80044fc <_ZL18handle_open_errorsij>
 80047cc:	4603      	mov	r3, r0
 80047ce:	e04a      	b.n	8004866 <open+0xe6>
    }

    if (path.isFile()) {
 80047d0:	f107 0308 	add.w	r3, r7, #8
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff f9a9 	bl	8003b2c <_ZN4mbed8FilePath6isFileEv>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <open+0x70>
        res = path.file();
 80047e0:	f107 0308 	add.w	r3, r7, #8
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff f9ba 	bl	8003b5e <_ZN4mbed8FilePath4fileEv>
 80047ea:	4603      	mov	r3, r0
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	e02a      	b.n	8004846 <open+0xc6>
    } else {
        FileSystemHandle *fs = path.fileSystem();
 80047f0:	f107 0308 	add.w	r3, r7, #8
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff f980 	bl	8003afa <_ZN4mbed8FilePath10fileSystemEv>
 80047fa:	61b8      	str	r0, [r7, #24]
        if (fs == NULL) {
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d107      	bne.n	8004812 <open+0x92>
            return handle_open_errors(-ENODEV, fildes);
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	4619      	mov	r1, r3
 8004806:	f06f 0012 	mvn.w	r0, #18
 800480a:	f7ff fe77 	bl	80044fc <_ZL18handle_open_errorsij>
 800480e:	4603      	mov	r3, r0
 8004810:	e029      	b.n	8004866 <open+0xe6>
        }
        int err = fs->open(&res, path.fileName(), oflag);
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3308      	adds	r3, #8
 8004818:	681c      	ldr	r4, [r3, #0]
 800481a:	f107 0308 	add.w	r3, r7, #8
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff f946 	bl	8003ab0 <_ZN4mbed8FilePath8fileNameEv>
 8004824:	4602      	mov	r2, r0
 8004826:	f107 0110 	add.w	r1, r7, #16
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	69b8      	ldr	r0, [r7, #24]
 800482e:	47a0      	blx	r4
 8004830:	6178      	str	r0, [r7, #20]
        if (err) {
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d006      	beq.n	8004846 <open+0xc6>
            return handle_open_errors(err, fildes);
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	4619      	mov	r1, r3
 800483c:	6978      	ldr	r0, [r7, #20]
 800483e:	f7ff fe5d 	bl	80044fc <_ZL18handle_open_errorsij>
 8004842:	4603      	mov	r3, r0
 8004844:	e00f      	b.n	8004866 <open+0xe6>
        }
    }

    filehandles[fildes] = res;
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	490a      	ldr	r1, [pc, #40]	; (8004874 <open+0xf4>)
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    stdio_in_prev[fildes] = 0;
 8004850:	4a09      	ldr	r2, [pc, #36]	; (8004878 <open+0xf8>)
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	4413      	add	r3, r2
 8004856:	2200      	movs	r2, #0
 8004858:	701a      	strb	r2, [r3, #0]
    stdio_out_prev[fildes] = 0;
 800485a:	4a08      	ldr	r2, [pc, #32]	; (800487c <open+0xfc>)
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	4413      	add	r3, r2
 8004860:	2200      	movs	r2, #0
 8004862:	701a      	strb	r2, [r3, #0]

    return fildes;
 8004864:	69fb      	ldr	r3, [r7, #28]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004870:	b003      	add	sp, #12
 8004872:	4770      	bx	lr
 8004874:	20000204 	.word	0x20000204
 8004878:	200004bc 	.word	0x200004bc
 800487c:	200004fc 	.word	0x200004fc

08004880 <_close>:

extern "C" int PREFIX(_close)(FILEHANDLE fh)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
    return close(fh);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f805 	bl	8004898 <close>
 800488e:	4603      	mov	r3, r0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <close>:

extern "C" int close(int fildes)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
    FileHandle *fhc = get_fhc(fildes);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff fe05 	bl	80044b0 <_ZL7get_fhci>
 80048a6:	60f8      	str	r0, [r7, #12]
    filehandles[fildes] = NULL;
 80048a8:	4a13      	ldr	r2, [pc, #76]	; (80048f8 <close+0x60>)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2100      	movs	r1, #0
 80048ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (fhc == NULL) {
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d107      	bne.n	80048c8 <close+0x30>
        errno = EBADF;
 80048b8:	f002 fc6e 	bl	8007198 <__errno>
 80048bc:	4602      	mov	r2, r0
 80048be:	2309      	movs	r3, #9
 80048c0:	6013      	str	r3, [r2, #0]
        return -1;
 80048c2:	f04f 33ff 	mov.w	r3, #4294967295
 80048c6:	e013      	b.n	80048f0 <close+0x58>
    }

    int err = fhc->close();
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3314      	adds	r3, #20
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	4798      	blx	r3
 80048d4:	60b8      	str	r0, [r7, #8]
    if (err < 0) {
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	da08      	bge.n	80048ee <close+0x56>
        errno = -err;
 80048dc:	f002 fc5c 	bl	8007198 <__errno>
 80048e0:	4602      	mov	r2, r0
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	425b      	negs	r3, r3
 80048e6:	6013      	str	r3, [r2, #0]
        return -1;
 80048e8:	f04f 33ff 	mov.w	r3, #4294967295
 80048ec:	e000      	b.n	80048f0 <close+0x58>
    } else {
        return 0;
 80048ee:	2300      	movs	r3, #0
    }
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20000204 	.word	0x20000204

080048fc <_ZL12convert_crlfi>:

static bool convert_crlf(int fd)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
#if MBED_CONF_PLATFORM_STDIO_CONVERT_TTY_NEWLINES
    return isatty(fd);
#elif MBED_CONF_PLATFORM_STDIO_CONVERT_NEWLINES
    return fd < 3 && isatty(fd);
#else
    return false;
 8004904:	2300      	movs	r3, #0
#endif
}
 8004906:	4618      	mov	r0, r3
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <_write>:
#if defined(__ICCARM__)
extern "C" size_t    __write(int        fh, const unsigned char *buffer, size_t length)
{
#else
extern "C" int PREFIX(_write)(FILEHANDLE fh, const unsigned char *buffer, unsigned int length, int mode)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08a      	sub	sp, #40	; 0x28
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
    if (core_util_is_isr_active() || !core_util_are_interrupts_enabled()) {
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PROHIBITED_IN_ISR_CONTEXT), "Error - writing to a file in an ISR or critical section\r\n", fh);
    }
#endif

    if (length > SSIZE_MAX) {
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	da07      	bge.n	8004938 <_write+0x24>
        errno = EINVAL;
 8004928:	f002 fc36 	bl	8007198 <__errno>
 800492c:	4602      	mov	r2, r0
 800492e:	2316      	movs	r3, #22
 8004930:	6013      	str	r3, [r2, #0]
        return -1;
 8004932:	f04f 33ff 	mov.w	r3, #4294967295
 8004936:	e08d      	b.n	8004a54 <_write+0x140>
    }

    ssize_t slength = length;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	61bb      	str	r3, [r7, #24]
    ssize_t written = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	627b      	str	r3, [r7, #36]	; 0x24

    if (convert_crlf(fh)) {
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f7ff ffdb 	bl	80048fc <_ZL12convert_crlfi>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d056      	beq.n	80049fa <_write+0xe6>
        // local prev is previous in buffer during seek
        // stdio_out_prev[fh] is last thing actually written
        char prev = stdio_out_prev[fh];
 800494c:	4a43      	ldr	r2, [pc, #268]	; (8004a5c <_write+0x148>)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4413      	add	r3, r2
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        // Seek for '\n' without preceding '\r'; if found flush
        // preceding and insert '\r'. Continue until end of input.
        for (ssize_t cur = 0; cur < slength; cur++) {
 8004958:	2300      	movs	r3, #0
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	429a      	cmp	r2, r3
 8004962:	da4a      	bge.n	80049fa <_write+0xe6>
            if (buffer[cur] == '\n' && prev != '\r') {
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	4413      	add	r3, r2
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b0a      	cmp	r3, #10
 800496e:	d13a      	bne.n	80049e6 <_write+0xd2>
 8004970:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004974:	2b0d      	cmp	r3, #13
 8004976:	d036      	beq.n	80049e6 <_write+0xd2>
                ssize_t r;
                // flush stuff preceding the \n
                if (cur > written) {
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	429a      	cmp	r2, r3
 800497e:	dd1e      	ble.n	80049be <_write+0xaa>
                    r = write(fh, buffer + written, cur - written);
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	18d1      	adds	r1, r2, r3
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	461a      	mov	r2, r3
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f868 	bl	8004a64 <write>
 8004994:	6178      	str	r0, [r7, #20]
                    if (r < 0) {
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	da02      	bge.n	80049a2 <_write+0x8e>
                        return -1;
 800499c:	f04f 33ff 	mov.w	r3, #4294967295
 80049a0:	e058      	b.n	8004a54 <_write+0x140>
                    }
                    written += r;
 80049a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	4413      	add	r3, r2
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
                    if (written < cur) {
 80049aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	db4a      	blt.n	8004a48 <_write+0x134>
                        // For some reason, didn't write all - give up now
                        goto finish;
                    }
                    stdio_out_prev[fh] = prev;
 80049b2:	4a2a      	ldr	r2, [pc, #168]	; (8004a5c <_write+0x148>)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80049bc:	701a      	strb	r2, [r3, #0]
                }
                // insert a \r now, leaving the \n still to be written
                r = write(fh, "\r", 1);
 80049be:	2201      	movs	r2, #1
 80049c0:	4927      	ldr	r1, [pc, #156]	; (8004a60 <_write+0x14c>)
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f84e 	bl	8004a64 <write>
 80049c8:	6178      	str	r0, [r7, #20]
                if (r < 0) {
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	da02      	bge.n	80049d6 <_write+0xc2>
                    return -1;
 80049d0:	f04f 33ff 	mov.w	r3, #4294967295
 80049d4:	e03e      	b.n	8004a54 <_write+0x140>
                }
                if (r < 1) {
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	dd37      	ble.n	8004a4c <_write+0x138>
                    goto finish;
                }
                stdio_out_prev[fh] = '\r';
 80049dc:	4a1f      	ldr	r2, [pc, #124]	; (8004a5c <_write+0x148>)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4413      	add	r3, r2
 80049e2:	220d      	movs	r2, #13
 80049e4:	701a      	strb	r2, [r3, #0]
            }
            prev = buffer[cur];
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	4413      	add	r3, r2
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        for (ssize_t cur = 0; cur < slength; cur++) {
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	3301      	adds	r3, #1
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	e7b0      	b.n	800495c <_write+0x48>
        }
    }

    // Flush remaining from conversion, or the whole thing if no conversion
    if (written < slength) {
 80049fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	da26      	bge.n	8004a50 <_write+0x13c>
        ssize_t r = write(fh, buffer + written, slength - written);
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	18d1      	adds	r1, r2, r3
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	461a      	mov	r2, r3
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f827 	bl	8004a64 <write>
 8004a16:	6138      	str	r0, [r7, #16]
        if (r < 0) {
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	da02      	bge.n	8004a24 <_write+0x110>
            return -1;
 8004a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a22:	e017      	b.n	8004a54 <_write+0x140>
        }
        written += r;
 8004a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4413      	add	r3, r2
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
        if (written > 0) {
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	dd0f      	ble.n	8004a52 <_write+0x13e>
            stdio_out_prev[fh] = buffer[written - 1];
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	3b01      	subs	r3, #1
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	4413      	add	r3, r2
 8004a3a:	7819      	ldrb	r1, [r3, #0]
 8004a3c:	4a07      	ldr	r2, [pc, #28]	; (8004a5c <_write+0x148>)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4413      	add	r3, r2
 8004a42:	460a      	mov	r2, r1
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	e004      	b.n	8004a52 <_write+0x13e>
                        goto finish;
 8004a48:	bf00      	nop
 8004a4a:	e002      	b.n	8004a52 <_write+0x13e>
                    goto finish;
 8004a4c:	bf00      	nop
 8004a4e:	e000      	b.n	8004a52 <_write+0x13e>
        }
    }

finish:
 8004a50:	bf00      	nop
        return slength - written;
    } else {
        return written;
    }
#else
    return written;
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
#endif
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3728      	adds	r7, #40	; 0x28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	200004fc 	.word	0x200004fc
 8004a60:	08008924 	.word	0x08008924

08004a64 <write>:

extern "C" ssize_t write(int fildes, const void *buf, size_t length)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]

    FileHandle *fhc = get_fhc(fildes);
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f7ff fd1d 	bl	80044b0 <_ZL7get_fhci>
 8004a76:	6178      	str	r0, [r7, #20]
    if (fhc == NULL) {
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d107      	bne.n	8004a8e <write+0x2a>
        errno = EBADF;
 8004a7e:	f002 fb8b 	bl	8007198 <__errno>
 8004a82:	4602      	mov	r2, r0
 8004a84:	2309      	movs	r3, #9
 8004a86:	6013      	str	r3, [r2, #0]
        return -1;
 8004a88:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8c:	e015      	b.n	8004aba <write+0x56>
    }

    ssize_t ret = fhc->write(buf, length);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	330c      	adds	r3, #12
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	6978      	ldr	r0, [r7, #20]
 8004a9c:	4798      	blx	r3
 8004a9e:	6138      	str	r0, [r7, #16]
    if (ret < 0) {
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	da08      	bge.n	8004ab8 <write+0x54>
        errno = -ret;
 8004aa6:	f002 fb77 	bl	8007198 <__errno>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	425b      	negs	r3, r3
 8004ab0:	6013      	str	r3, [r2, #0]
        return -1;
 8004ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab6:	e000      	b.n	8004aba <write+0x56>
    } else {
        return ret;
 8004ab8:	693b      	ldr	r3, [r7, #16]
    }
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <_read>:
#if defined(__ICCARM__)
extern "C" size_t    __read(int        fh, unsigned char *buffer, size_t       length)
{
#else
extern "C" int PREFIX(_read)(FILEHANDLE fh, unsigned char *buffer, unsigned int length, int mode)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	603b      	str	r3, [r7, #0]
    if (core_util_is_isr_active() || !core_util_are_interrupts_enabled()) {
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PROHIBITED_IN_ISR_CONTEXT), "Error - reading from a file in an ISR or critical section\r\n", fh);
    }
#endif

    if (length > SSIZE_MAX) {
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	da07      	bge.n	8004ae8 <_read+0x24>
        errno = EINVAL;
 8004ad8:	f002 fb5e 	bl	8007198 <__errno>
 8004adc:	4602      	mov	r2, r0
 8004ade:	2316      	movs	r3, #22
 8004ae0:	6013      	str	r3, [r2, #0]
        return -1;
 8004ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae6:	e063      	b.n	8004bb0 <_read+0xec>
    }

    ssize_t bytes_read = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61fb      	str	r3, [r7, #28]

    if (convert_crlf(fh)) {
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7ff ff05 	bl	80048fc <_ZL12convert_crlfi>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d054      	beq.n	8004ba2 <_read+0xde>
        while (true) {
            char c;
            ssize_t r = read(fh, &c, 1);
 8004af8:	f107 0317 	add.w	r3, r7, #23
 8004afc:	2201      	movs	r2, #1
 8004afe:	4619      	mov	r1, r3
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f85b 	bl	8004bbc <read>
 8004b06:	61b8      	str	r0, [r7, #24]
            if (r < 0) {
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	da02      	bge.n	8004b14 <_read+0x50>
                return -1;
 8004b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b12:	e04d      	b.n	8004bb0 <_read+0xec>
            }
            if (r == 0) {
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <_read+0x5a>
                return bytes_read;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	e048      	b.n	8004bb0 <_read+0xec>
            }
            if ((c == '\r' && stdio_in_prev[fh] != '\n') ||
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
 8004b20:	2b0d      	cmp	r3, #13
 8004b22:	d105      	bne.n	8004b30 <_read+0x6c>
 8004b24:	4a24      	ldr	r2, [pc, #144]	; (8004bb8 <_read+0xf4>)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4413      	add	r3, r2
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b0a      	cmp	r3, #10
 8004b2e:	d108      	bne.n	8004b42 <_read+0x7e>
                    (c == '\n' && stdio_in_prev[fh] != '\r')) {
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
            if ((c == '\r' && stdio_in_prev[fh] != '\n') ||
 8004b32:	2b0a      	cmp	r3, #10
 8004b34:	d10f      	bne.n	8004b56 <_read+0x92>
                    (c == '\n' && stdio_in_prev[fh] != '\r')) {
 8004b36:	4a20      	ldr	r2, [pc, #128]	; (8004bb8 <_read+0xf4>)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b0d      	cmp	r3, #13
 8004b40:	d009      	beq.n	8004b56 <_read+0x92>
                stdio_in_prev[fh] = c;
 8004b42:	7df9      	ldrb	r1, [r7, #23]
 8004b44:	4a1c      	ldr	r2, [pc, #112]	; (8004bb8 <_read+0xf4>)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4413      	add	r3, r2
 8004b4a:	460a      	mov	r2, r1
 8004b4c:	701a      	strb	r2, [r3, #0]
                *buffer = '\n';
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	220a      	movs	r2, #10
 8004b52:	701a      	strb	r2, [r3, #0]
                break;
 8004b54:	e022      	b.n	8004b9c <_read+0xd8>
            } else if ((c == '\r' && stdio_in_prev[fh] == '\n') ||
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	2b0d      	cmp	r3, #13
 8004b5a:	d105      	bne.n	8004b68 <_read+0xa4>
 8004b5c:	4a16      	ldr	r2, [pc, #88]	; (8004bb8 <_read+0xf4>)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b0a      	cmp	r3, #10
 8004b66:	d008      	beq.n	8004b7a <_read+0xb6>
                       (c == '\n' && stdio_in_prev[fh] == '\r')) {
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
            } else if ((c == '\r' && stdio_in_prev[fh] == '\n') ||
 8004b6a:	2b0a      	cmp	r3, #10
 8004b6c:	d10c      	bne.n	8004b88 <_read+0xc4>
                       (c == '\n' && stdio_in_prev[fh] == '\r')) {
 8004b6e:	4a12      	ldr	r2, [pc, #72]	; (8004bb8 <_read+0xf4>)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b0d      	cmp	r3, #13
 8004b78:	d106      	bne.n	8004b88 <_read+0xc4>
                stdio_in_prev[fh] = c;
 8004b7a:	7df9      	ldrb	r1, [r7, #23]
 8004b7c:	4a0e      	ldr	r2, [pc, #56]	; (8004bb8 <_read+0xf4>)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4413      	add	r3, r2
 8004b82:	460a      	mov	r2, r1
 8004b84:	701a      	strb	r2, [r3, #0]
            } else {
                stdio_in_prev[fh] = c;
                *buffer = c;
                break;
            }
        }
 8004b86:	e7b7      	b.n	8004af8 <_read+0x34>
                stdio_in_prev[fh] = c;
 8004b88:	7df9      	ldrb	r1, [r7, #23]
 8004b8a:	4a0b      	ldr	r2, [pc, #44]	; (8004bb8 <_read+0xf4>)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	460a      	mov	r2, r1
 8004b92:	701a      	strb	r2, [r3, #0]
                *buffer = c;
 8004b94:	7dfa      	ldrb	r2, [r7, #23]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	701a      	strb	r2, [r3, #0]
                break;
 8004b9a:	bf00      	nop
        bytes_read = 1;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	61fb      	str	r3, [r7, #28]
 8004ba0:	e005      	b.n	8004bae <_read+0xea>
    } else {
        bytes_read = read(fh, buffer, length);
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f808 	bl	8004bbc <read>
 8004bac:	61f8      	str	r0, [r7, #28]
        return 0x80000000 | length; // weird EOF indication
    } else {
        return (ssize_t)length - bytes_read;
    }
#else
    return bytes_read;
 8004bae:	69fb      	ldr	r3, [r7, #28]
#endif
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3720      	adds	r7, #32
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	200004bc 	.word	0x200004bc

08004bbc <read>:

extern "C" ssize_t read(int fildes, void *buf, size_t length)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]

    FileHandle *fhc = get_fhc(fildes);
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff fc71 	bl	80044b0 <_ZL7get_fhci>
 8004bce:	6178      	str	r0, [r7, #20]
    if (fhc == NULL) {
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d107      	bne.n	8004be6 <read+0x2a>
        errno = EBADF;
 8004bd6:	f002 fadf 	bl	8007198 <__errno>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	2309      	movs	r3, #9
 8004bde:	6013      	str	r3, [r2, #0]
        return -1;
 8004be0:	f04f 33ff 	mov.w	r3, #4294967295
 8004be4:	e015      	b.n	8004c12 <read+0x56>
    }

    ssize_t ret = fhc->read(buf, length);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3308      	adds	r3, #8
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	6978      	ldr	r0, [r7, #20]
 8004bf4:	4798      	blx	r3
 8004bf6:	6138      	str	r0, [r7, #16]
    if (ret < 0) {
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	da08      	bge.n	8004c10 <read+0x54>
        errno = -ret;
 8004bfe:	f002 facb 	bl	8007198 <__errno>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	425b      	negs	r3, r3
 8004c08:	6013      	str	r3, [r2, #0]
        return -1;
 8004c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0e:	e000      	b.n	8004c12 <read+0x56>
    } else {
        return ret;
 8004c10:	693b      	ldr	r3, [r7, #16]
    }
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <_isatty>:
#ifdef __ARMCC_VERSION
extern "C" int PREFIX(_istty)(FILEHANDLE fh)
#else
extern "C" int _isatty(FILEHANDLE fh)
#endif
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b082      	sub	sp, #8
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
    return isatty(fh);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f805 	bl	8004c32 <isatty>
 8004c28:	4603      	mov	r3, r0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <isatty>:

extern "C" int isatty(int fildes)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
    FileHandle *fhc = get_fhc(fildes);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff fc38 	bl	80044b0 <_ZL7get_fhci>
 8004c40:	60f8      	str	r0, [r7, #12]
    if (fhc == NULL) {
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d106      	bne.n	8004c56 <isatty+0x24>
        errno = EBADF;
 8004c48:	f002 faa6 	bl	8007198 <__errno>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	2309      	movs	r3, #9
 8004c50:	6013      	str	r3, [r2, #0]
        return 0;
 8004c52:	2300      	movs	r3, #0
 8004c54:	e012      	b.n	8004c7c <isatty+0x4a>
    }

    int tty = fhc->isatty();
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	331c      	adds	r3, #28
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	4798      	blx	r3
 8004c62:	60b8      	str	r0, [r7, #8]
    if (tty < 0) {
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	da07      	bge.n	8004c7a <isatty+0x48>
        errno = -tty;
 8004c6a:	f002 fa95 	bl	8007198 <__errno>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	425b      	negs	r3, r3
 8004c74:	6013      	str	r3, [r2, #0]
        return 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	e000      	b.n	8004c7c <isatty+0x4a>
    } else {
        return tty;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
    }
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <_lseek>:
#elif defined(__ICCARM__)
long __lseek(int fh, long offset, int whence)
#else
int _lseek(FILEHANDLE fh, int offset, int whence)
#endif
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
#if defined(__ARMCC_VERSION)
    int whence = SEEK_SET;
#endif

    off_t off = lseek(fh, offset, whence);
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f806 	bl	8004ca6 <lseek>
 8004c9a:	6178      	str	r0, [r7, #20]
    // Assuming INT_MAX = LONG_MAX, so we don't care about prototype difference
    if (off > INT_MAX) {
        errno = EOVERFLOW;
        return -1;
    }
    return off;
 8004c9c:	697b      	ldr	r3, [r7, #20]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <lseek>:

extern "C" off_t lseek(int fildes, off_t offset, int whence)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b086      	sub	sp, #24
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
    FileHandle *fhc = get_fhc(fildes);
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f7ff fbfc 	bl	80044b0 <_ZL7get_fhci>
 8004cb8:	6178      	str	r0, [r7, #20]
    if (fhc == NULL) {
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d107      	bne.n	8004cd0 <lseek+0x2a>
        errno = EBADF;
 8004cc0:	f002 fa6a 	bl	8007198 <__errno>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	2309      	movs	r3, #9
 8004cc8:	6013      	str	r3, [r2, #0]
        return -1;
 8004cca:	f04f 33ff 	mov.w	r3, #4294967295
 8004cce:	e015      	b.n	8004cfc <lseek+0x56>
    }

    off_t off = fhc->seek(offset, whence);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3310      	adds	r3, #16
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	6978      	ldr	r0, [r7, #20]
 8004cde:	4798      	blx	r3
 8004ce0:	6138      	str	r0, [r7, #16]
    if (off < 0) {
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	da08      	bge.n	8004cfa <lseek+0x54>
        errno = -off;
 8004ce8:	f002 fa56 	bl	8007198 <__errno>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	425b      	negs	r3, r3
 8004cf2:	6013      	str	r3, [r2, #0]
        return -1;
 8004cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf8:	e000      	b.n	8004cfc <lseek+0x56>
    }
    return off;
 8004cfa:	693b      	ldr	r3, [r7, #16]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <_fstat>:
#endif


#if !defined(__ARMCC_VERSION) && !defined(__ICCARM__)
extern "C" int _fstat(int fh, struct stat *st)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
    return fstat(fh, st);
 8004d0e:	6839      	ldr	r1, [r7, #0]
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f805 	bl	8004d20 <fstat>
 8004d16:	4603      	mov	r3, r0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <fstat>:
#endif

extern "C" int fstat(int fildes, struct stat *st)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
    FileHandle *fhc = get_fhc(fildes);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff fbc0 	bl	80044b0 <_ZL7get_fhci>
 8004d30:	60f8      	str	r0, [r7, #12]
    if (fhc == NULL) {
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d107      	bne.n	8004d48 <fstat+0x28>
        errno = EBADF;
 8004d38:	f002 fa2e 	bl	8007198 <__errno>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	2309      	movs	r3, #9
 8004d40:	6013      	str	r3, [r2, #0]
        return -1;
 8004d42:	f04f 33ff 	mov.w	r3, #4294967295
 8004d46:	e019      	b.n	8004d7c <fstat+0x5c>
    }

    st->st_mode = fhc->isatty() ? S_IFCHR : S_IFREG;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	331c      	adds	r3, #28
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	4798      	blx	r3
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <fstat+0x40>
 8004d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d5e:	e001      	b.n	8004d64 <fstat+0x44>
 8004d60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	605a      	str	r2, [r3, #4]
    st->st_size = fhc->size();
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3328      	adds	r3, #40	; 0x28
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	4798      	blx	r3
 8004d74:	4602      	mov	r2, r0
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	611a      	str	r2, [r3, #16]
    return 0;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <__cxa_pure_virtual>:
    MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_CLIB_EXCEPTION), "Exception", 0);
}
}
extern "C" WEAK void __cxa_pure_virtual(void);
extern "C" WEAK void __cxa_pure_virtual(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
    exit(1);
 8004d88:	2001      	movs	r0, #1
 8004d8a:	f002 fa0b 	bl	80071a4 <exit>

08004d8e <_exit>:
#endif
#endif

#if defined(TOOLCHAIN_GCC_ARM) || defined(TOOLCHAIN_GCC_CR)
extern "C" void _exit(int return_code)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
#if DEVICE_SEMIHOST
    if (mbed_interface_connected()) {
        semihost_exit();
    }
#endif
    if (return_code) {
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <_exit+0x12>
        mbed_die();
 8004d9c:	f7ff f8f0 	bl	8003f80 <mbed_die>
    }

    while (1);
 8004da0:	e7fe      	b.n	8004da0 <_exit+0x12>

08004da2 <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>:


namespace mbed {

void mbed_set_unbuffered_stream(std::FILE *_file)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
    char buf[2];
    std::setvbuf(_file, buf, _IONBF, NULL);
#else
    setbuf(_file, NULL);
 8004daa:	2100      	movs	r1, #0
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f003 f917 	bl	8007fe0 <setbuf>
#endif
}
 8004db2:	bf00      	nop
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <__rtos_malloc_lock>:
#elif defined(__CC_ARM)
// Do nothing
#elif defined (__GNUC__)
struct _reent;
// Stub out locks when an rtos is not present
extern "C" WEAK void __rtos_malloc_lock(struct _reent *_r) {}
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <__rtos_malloc_unlock>:
extern "C" WEAK void __rtos_malloc_unlock(struct _reent *_r) {}
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <__malloc_lock>:
extern "C" WEAK void __rtos_env_lock(struct _reent *_r) {}
extern "C" WEAK void __rtos_env_unlock(struct _reent *_r) {}

extern "C" void __malloc_lock(struct _reent *_r)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
    __rtos_malloc_lock(_r);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff ffe5 	bl	8004dba <__rtos_malloc_lock>
}
 8004df0:	bf00      	nop
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <__malloc_unlock>:

extern "C" void __malloc_unlock(struct _reent *_r)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
    __rtos_malloc_unlock(_r);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff ffe4 	bl	8004dce <__rtos_malloc_unlock>
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <_Znwj>:
}

#else

void *operator new (std::size_t count)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	6078      	str	r0, [r7, #4]
    void *buffer = malloc(count);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f002 fd21 	bl	8007860 <malloc>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	60fb      	str	r3, [r7, #12]
    if (NULL == buffer) {
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d107      	bne.n	8004e38 <_Znwj+0x28>
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_OUT_OF_MEMORY), "Operator new out of memory\r\n", count);
 8004e28:	2300      	movs	r3, #0
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	2100      	movs	r1, #0
 8004e32:	4804      	ldr	r0, [pc, #16]	; (8004e44 <_Znwj+0x34>)
 8004e34:	f7ff f9c0 	bl	80041b8 <mbed_error>
    }
    return buffer;
 8004e38:	68fb      	ldr	r3, [r7, #12]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	8001011f 	.word	0x8001011f

08004e48 <_ZdlPv>:
{
    return malloc(count);
}

void operator delete (void *ptr)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
    free(ptr);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f002 fd0d 	bl	8007870 <free>
}
 8004e56:	bf00      	nop
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <_ZN12DirectSerialD1Ev>:
class DirectSerial : public FileHandle {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	4a05      	ldr	r2, [pc, #20]	; (8004e80 <_ZN12DirectSerialD1Ev+0x20>)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fd fec7 	bl	8002c04 <_ZN4mbed10FileHandleD1Ev>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	08008ce4 	.word	0x08008ce4

08004e84 <_ZN12DirectSerialD0Ev>:
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff ffe7 	bl	8004e60 <_ZN12DirectSerialD1Ev>
 8004e92:	2104      	movs	r1, #4
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f002 f977 	bl	8007188 <_ZdlPvj>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <wait_ms>:
{
    wait_us(s * 1000000.0f);
}

void wait_ms(int ms)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
    wait_us(ms * 1000);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004eb2:	fb02 f303 	mul.w	r3, r2, r3
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 f804 	bl	8004ec4 <wait_us>
}
 8004ebc:	bf00      	nop
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <wait_us>:

void wait_us(int us)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
    const ticker_data_t *const ticker = get_us_ticker_data();
 8004ecc:	f7fe fc4c 	bl	8003768 <get_us_ticker_data>
 8004ed0:	60f8      	str	r0, [r7, #12]
    uint32_t start = ticker_read(ticker);
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7fe fc23 	bl	800371e <ticker_read>
 8004ed8:	60b8      	str	r0, [r7, #8]
    while ((ticker_read(ticker) - start) < (uint32_t)us);
 8004eda:	bf00      	nop
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7fe fc1e 	bl	800371e <ticker_read>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	1ad2      	subs	r2, r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d3f6      	bcc.n	8004edc <wait_us+0x18>
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
    /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8004efc:	4b16      	ldr	r3, [pc, #88]	; (8004f58 <SystemInit+0x60>)
 8004efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f02:	4a15      	ldr	r2, [pc, #84]	; (8004f58 <SystemInit+0x60>)
 8004f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
    /* Reset the RCC clock configuration to the default reset state ------------*/
    /* Set HSION bit */
    RCC->CR |= (uint32_t)0x00000001;
 8004f0c:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <SystemInit+0x64>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a12      	ldr	r2, [pc, #72]	; (8004f5c <SystemInit+0x64>)
 8004f12:	f043 0301 	orr.w	r3, r3, #1
 8004f16:	6013      	str	r3, [r2, #0]

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;
 8004f18:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <SystemInit+0x64>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	609a      	str	r2, [r3, #8]

    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <SystemInit+0x64>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a0e      	ldr	r2, [pc, #56]	; (8004f5c <SystemInit+0x64>)
 8004f24:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f2c:	6013      	str	r3, [r2, #0]

    /* Reset PLLCFGR register */
    RCC->PLLCFGR = 0x24003010;
 8004f2e:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <SystemInit+0x64>)
 8004f30:	4a0b      	ldr	r2, [pc, #44]	; (8004f60 <SystemInit+0x68>)
 8004f32:	605a      	str	r2, [r3, #4]

    /* Reset HSEBYP bit */
    RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <SystemInit+0x64>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a08      	ldr	r2, [pc, #32]	; (8004f5c <SystemInit+0x64>)
 8004f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f3e:	6013      	str	r3, [r2, #0]

    /* Disable all interrupts */
    RCC->CIR = 0x00000000;
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <SystemInit+0x64>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	60da      	str	r2, [r3, #12]

    /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f46:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <SystemInit+0x60>)
 8004f48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f4c:	609a      	str	r2, [r3, #8]
#endif

}
 8004f4e:	bf00      	nop
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	e000ed00 	.word	0xe000ed00
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	24003010 	.word	0x24003010

08004f64 <NVIC_SetVector>:
#include "cmsis_nvic.h"

#define NVIC_RAM_VECTOR_ADDRESS   (0x20000000)  // Vectors positioned at start of RAM
#define NVIC_FLASH_VECTOR_ADDRESS (0x08000000)  // Initial vector position in flash

void NVIC_SetVector(IRQn_Type IRQn, uint32_t vector) {
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	6039      	str	r1, [r7, #0]
 8004f6e:	71fb      	strb	r3, [r7, #7]
    uint32_t *vectors = (uint32_t *)SCB->VTOR;
 8004f70:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <NVIC_SetVector+0x70>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	617b      	str	r3, [r7, #20]
    uint32_t i;

    // Copy and switch to dynamic vectors if the first time called
    if (SCB->VTOR == NVIC_FLASH_VECTOR_ADDRESS) {
 8004f76:	4b17      	ldr	r3, [pc, #92]	; (8004fd4 <NVIC_SetVector+0x70>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f7e:	d11b      	bne.n	8004fb8 <NVIC_SetVector+0x54>
        uint32_t *old_vectors = vectors;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	60fb      	str	r3, [r7, #12]
        vectors = (uint32_t*)NVIC_RAM_VECTOR_ADDRESS;
 8004f84:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004f88:	617b      	str	r3, [r7, #20]
        for (i=0; i<NVIC_NUM_VECTORS; i++) {
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	e00c      	b.n	8004faa <NVIC_SetVector+0x46>
            vectors[i] = old_vectors[i];
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	441a      	add	r2, r3
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	6979      	ldr	r1, [r7, #20]
 8004f9e:	440b      	add	r3, r1
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	601a      	str	r2, [r3, #0]
        for (i=0; i<NVIC_NUM_VECTORS; i++) {
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b71      	cmp	r3, #113	; 0x71
 8004fae:	d9ef      	bls.n	8004f90 <NVIC_SetVector+0x2c>
        }
        SCB->VTOR = (uint32_t)NVIC_RAM_VECTOR_ADDRESS;
 8004fb0:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <NVIC_SetVector+0x70>)
 8004fb2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004fb6:	609a      	str	r2, [r3, #8]
    }
    vectors[IRQn + NVIC_USER_IRQ_OFFSET] = vector;
 8004fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fbc:	3310      	adds	r3, #16
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	601a      	str	r2, [r3, #0]
}
 8004fc8:	bf00      	nop
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	e000ed00 	.word	0xe000ed00

08004fd8 <serial_getc>:
/******************************************************************************
 * READ/WRITE
 ******************************************************************************/

int serial_getc(serial_t *obj)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
    struct serial_s *obj_s = SERIAL_S(obj);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	019b      	lsls	r3, r3, #6
 8004fea:	4a09      	ldr	r2, [pc, #36]	; (8005010 <serial_getc+0x38>)
 8004fec:	4413      	add	r3, r2
 8004fee:	60bb      	str	r3, [r7, #8]

    while (!serial_readable(obj));
 8004ff0:	bf00      	nop
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f001 feae 	bl	8006d54 <serial_readable>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f9      	beq.n	8004ff2 <serial_getc+0x1a>
    return (int)(huart->Instance->DR & 0x1FF);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	200005ec 	.word	0x200005ec

08005014 <serial_putc>:

void serial_putc(serial_t *obj, int c)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
    struct serial_s *obj_s = SERIAL_S(obj);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	019b      	lsls	r3, r3, #6
 8005028:	4a09      	ldr	r2, [pc, #36]	; (8005050 <serial_putc+0x3c>)
 800502a:	4413      	add	r3, r2
 800502c:	60bb      	str	r3, [r7, #8]

    while (!serial_writable(obj));
 800502e:	bf00      	nop
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f001 febf 	bl	8006db4 <serial_writable>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f9      	beq.n	8005030 <serial_putc+0x1c>
    huart->Instance->DR = (uint32_t)(c & 0x1FF);
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005046:	605a      	str	r2, [r3, #4]
}
 8005048:	bf00      	nop
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	200005ec 	.word	0x200005ec

08005054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005058:	4b0e      	ldr	r3, [pc, #56]	; (8005094 <HAL_Init+0x40>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a0d      	ldr	r2, [pc, #52]	; (8005094 <HAL_Init+0x40>)
 800505e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005064:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <HAL_Init+0x40>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a0a      	ldr	r2, [pc, #40]	; (8005094 <HAL_Init+0x40>)
 800506a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800506e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005070:	4b08      	ldr	r3, [pc, #32]	; (8005094 <HAL_Init+0x40>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a07      	ldr	r2, [pc, #28]	; (8005094 <HAL_Init+0x40>)
 8005076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800507a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
/* MBED : moved to HAL_InitPre() */
#if !defined (TARGET_STM32F429xI)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800507c:	2003      	movs	r0, #3
 800507e:	f000 f843 	bl	8005108 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005082:	200f      	movs	r0, #15
 8005084:	f001 faf4 	bl	8006670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005088:	f7fd f9dc 	bl	8002444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40023c00 	.word	0x40023c00

08005098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800509c:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <HAL_IncTick+0x20>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	4b06      	ldr	r3, [pc, #24]	; (80050bc <HAL_IncTick+0x24>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4413      	add	r3, r2
 80050a8:	4a04      	ldr	r2, [pc, #16]	; (80050bc <HAL_IncTick+0x24>)
 80050aa:	6013      	str	r3, [r2, #0]
}
 80050ac:	bf00      	nop
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20000304 	.word	0x20000304
 80050bc:	200006ac 	.word	0x200006ac

080050c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050d0:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <__NVIC_SetPriorityGrouping+0x44>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050dc:	4013      	ands	r3, r2
 80050de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050f2:	4a04      	ldr	r2, [pc, #16]	; (8005104 <__NVIC_SetPriorityGrouping+0x44>)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	60d3      	str	r3, [r2, #12]
}
 80050f8:	bf00      	nop
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	e000ed00 	.word	0xe000ed00

08005108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff ffd5 	bl	80050c0 <__NVIC_SetPriorityGrouping>
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005120:	b480      	push	{r7}
 8005122:	b089      	sub	sp, #36	; 0x24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800512e:	2300      	movs	r3, #0
 8005130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005132:	2300      	movs	r3, #0
 8005134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
 800513a:	e159      	b.n	80053f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800513c:	2201      	movs	r2, #1
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4013      	ands	r3, r2
 800514e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	429a      	cmp	r2, r3
 8005156:	f040 8148 	bne.w	80053ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d003      	beq.n	800516a <HAL_GPIO_Init+0x4a>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b12      	cmp	r3, #18
 8005168:	d123      	bne.n	80051b2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	08da      	lsrs	r2, r3, #3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3208      	adds	r2, #8
 8005172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	220f      	movs	r2, #15
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	43db      	mvns	r3, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	4013      	ands	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	08da      	lsrs	r2, r3, #3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3208      	adds	r2, #8
 80051ac:	69b9      	ldr	r1, [r7, #24]
 80051ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	2203      	movs	r2, #3
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	43db      	mvns	r3, r3
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	4013      	ands	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f003 0203 	and.w	r2, r3, #3
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	4313      	orrs	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d00b      	beq.n	8005206 <HAL_GPIO_Init+0xe6>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d007      	beq.n	8005206 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051fa:	2b11      	cmp	r3, #17
 80051fc:	d003      	beq.n	8005206 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2b12      	cmp	r3, #18
 8005204:	d130      	bne.n	8005268 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	2203      	movs	r2, #3
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	43db      	mvns	r3, r3
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4013      	ands	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4313      	orrs	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800523c:	2201      	movs	r2, #1
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	43db      	mvns	r3, r3
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4013      	ands	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	091b      	lsrs	r3, r3, #4
 8005252:	f003 0201 	and.w	r2, r3, #1
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4313      	orrs	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	2203      	movs	r2, #3
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	43db      	mvns	r3, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	4013      	ands	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4313      	orrs	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 80a2 	beq.w	80053ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052a6:	2300      	movs	r3, #0
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	4b56      	ldr	r3, [pc, #344]	; (8005404 <HAL_GPIO_Init+0x2e4>)
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	4a55      	ldr	r2, [pc, #340]	; (8005404 <HAL_GPIO_Init+0x2e4>)
 80052b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052b4:	6453      	str	r3, [r2, #68]	; 0x44
 80052b6:	4b53      	ldr	r3, [pc, #332]	; (8005404 <HAL_GPIO_Init+0x2e4>)
 80052b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052c2:	4a51      	ldr	r2, [pc, #324]	; (8005408 <HAL_GPIO_Init+0x2e8>)
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	089b      	lsrs	r3, r3, #2
 80052c8:	3302      	adds	r3, #2
 80052ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	220f      	movs	r2, #15
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	43db      	mvns	r3, r3
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	4013      	ands	r3, r2
 80052e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a48      	ldr	r2, [pc, #288]	; (800540c <HAL_GPIO_Init+0x2ec>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d019      	beq.n	8005322 <HAL_GPIO_Init+0x202>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a47      	ldr	r2, [pc, #284]	; (8005410 <HAL_GPIO_Init+0x2f0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d013      	beq.n	800531e <HAL_GPIO_Init+0x1fe>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a46      	ldr	r2, [pc, #280]	; (8005414 <HAL_GPIO_Init+0x2f4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00d      	beq.n	800531a <HAL_GPIO_Init+0x1fa>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a45      	ldr	r2, [pc, #276]	; (8005418 <HAL_GPIO_Init+0x2f8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d007      	beq.n	8005316 <HAL_GPIO_Init+0x1f6>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a44      	ldr	r2, [pc, #272]	; (800541c <HAL_GPIO_Init+0x2fc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d101      	bne.n	8005312 <HAL_GPIO_Init+0x1f2>
 800530e:	2304      	movs	r3, #4
 8005310:	e008      	b.n	8005324 <HAL_GPIO_Init+0x204>
 8005312:	2307      	movs	r3, #7
 8005314:	e006      	b.n	8005324 <HAL_GPIO_Init+0x204>
 8005316:	2303      	movs	r3, #3
 8005318:	e004      	b.n	8005324 <HAL_GPIO_Init+0x204>
 800531a:	2302      	movs	r3, #2
 800531c:	e002      	b.n	8005324 <HAL_GPIO_Init+0x204>
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <HAL_GPIO_Init+0x204>
 8005322:	2300      	movs	r3, #0
 8005324:	69fa      	ldr	r2, [r7, #28]
 8005326:	f002 0203 	and.w	r2, r2, #3
 800532a:	0092      	lsls	r2, r2, #2
 800532c:	4093      	lsls	r3, r2
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	4313      	orrs	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005334:	4934      	ldr	r1, [pc, #208]	; (8005408 <HAL_GPIO_Init+0x2e8>)
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	089b      	lsrs	r3, r3, #2
 800533a:	3302      	adds	r3, #2
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005342:	4b37      	ldr	r3, [pc, #220]	; (8005420 <HAL_GPIO_Init+0x300>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005366:	4a2e      	ldr	r2, [pc, #184]	; (8005420 <HAL_GPIO_Init+0x300>)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800536c:	4b2c      	ldr	r3, [pc, #176]	; (8005420 <HAL_GPIO_Init+0x300>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	43db      	mvns	r3, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4013      	ands	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005390:	4a23      	ldr	r2, [pc, #140]	; (8005420 <HAL_GPIO_Init+0x300>)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005396:	4b22      	ldr	r3, [pc, #136]	; (8005420 <HAL_GPIO_Init+0x300>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	43db      	mvns	r3, r3
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	4013      	ands	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053ba:	4a19      	ldr	r2, [pc, #100]	; (8005420 <HAL_GPIO_Init+0x300>)
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053c0:	4b17      	ldr	r3, [pc, #92]	; (8005420 <HAL_GPIO_Init+0x300>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	43db      	mvns	r3, r3
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	4013      	ands	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053e4:	4a0e      	ldr	r2, [pc, #56]	; (8005420 <HAL_GPIO_Init+0x300>)
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	3301      	adds	r3, #1
 80053ee:	61fb      	str	r3, [r7, #28]
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2b0f      	cmp	r3, #15
 80053f4:	f67f aea2 	bls.w	800513c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053f8:	bf00      	nop
 80053fa:	3724      	adds	r7, #36	; 0x24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	40023800 	.word	0x40023800
 8005408:	40013800 	.word	0x40013800
 800540c:	40020000 	.word	0x40020000
 8005410:	40020400 	.word	0x40020400
 8005414:	40020800 	.word	0x40020800
 8005418:	40020c00 	.word	0x40020c00
 800541c:	40021000 	.word	0x40021000
 8005420:	40013c00 	.word	0x40013c00

08005424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e22d      	b.n	8005892 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d075      	beq.n	800552e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005442:	4ba3      	ldr	r3, [pc, #652]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b04      	cmp	r3, #4
 800544c:	d00c      	beq.n	8005468 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800544e:	4ba0      	ldr	r3, [pc, #640]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005456:	2b08      	cmp	r3, #8
 8005458:	d112      	bne.n	8005480 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800545a:	4b9d      	ldr	r3, [pc, #628]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005466:	d10b      	bne.n	8005480 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005468:	4b99      	ldr	r3, [pc, #612]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d05b      	beq.n	800552c <HAL_RCC_OscConfig+0x108>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d157      	bne.n	800552c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e208      	b.n	8005892 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005488:	d106      	bne.n	8005498 <HAL_RCC_OscConfig+0x74>
 800548a:	4b91      	ldr	r3, [pc, #580]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a90      	ldr	r2, [pc, #576]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	e01d      	b.n	80054d4 <HAL_RCC_OscConfig+0xb0>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054a0:	d10c      	bne.n	80054bc <HAL_RCC_OscConfig+0x98>
 80054a2:	4b8b      	ldr	r3, [pc, #556]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a8a      	ldr	r2, [pc, #552]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	4b88      	ldr	r3, [pc, #544]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a87      	ldr	r2, [pc, #540]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e00b      	b.n	80054d4 <HAL_RCC_OscConfig+0xb0>
 80054bc:	4b84      	ldr	r3, [pc, #528]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a83      	ldr	r2, [pc, #524]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	4b81      	ldr	r3, [pc, #516]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a80      	ldr	r2, [pc, #512]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d013      	beq.n	8005504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054dc:	f001 f8d4 	bl	8006688 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054e4:	f001 f8d0 	bl	8006688 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	; 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e1cd      	b.n	8005892 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f6:	4b76      	ldr	r3, [pc, #472]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0xc0>
 8005502:	e014      	b.n	800552e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005504:	f001 f8c0 	bl	8006688 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800550c:	f001 f8bc 	bl	8006688 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	; 0x64
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e1b9      	b.n	8005892 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800551e:	4b6c      	ldr	r3, [pc, #432]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0xe8>
 800552a:	e000      	b.n	800552e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800552c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d063      	beq.n	8005602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800553a:	4b65      	ldr	r3, [pc, #404]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005546:	4b62      	ldr	r3, [pc, #392]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800554e:	2b08      	cmp	r3, #8
 8005550:	d11c      	bne.n	800558c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005552:	4b5f      	ldr	r3, [pc, #380]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d116      	bne.n	800558c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800555e:	4b5c      	ldr	r3, [pc, #368]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_RCC_OscConfig+0x152>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d001      	beq.n	8005576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e18d      	b.n	8005892 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005576:	4b56      	ldr	r3, [pc, #344]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4952      	ldr	r1, [pc, #328]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005586:	4313      	orrs	r3, r2
 8005588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800558a:	e03a      	b.n	8005602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d020      	beq.n	80055d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005594:	4b4f      	ldr	r3, [pc, #316]	; (80056d4 <HAL_RCC_OscConfig+0x2b0>)
 8005596:	2201      	movs	r2, #1
 8005598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559a:	f001 f875 	bl	8006688 <HAL_GetTick>
 800559e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055a2:	f001 f871 	bl	8006688 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e16e      	b.n	8005892 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b4:	4b46      	ldr	r3, [pc, #280]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c0:	4b43      	ldr	r3, [pc, #268]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	4940      	ldr	r1, [pc, #256]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	600b      	str	r3, [r1, #0]
 80055d4:	e015      	b.n	8005602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055d6:	4b3f      	ldr	r3, [pc, #252]	; (80056d4 <HAL_RCC_OscConfig+0x2b0>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055dc:	f001 f854 	bl	8006688 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055e4:	f001 f850 	bl	8006688 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e14d      	b.n	8005892 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055f6:	4b36      	ldr	r3, [pc, #216]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f0      	bne.n	80055e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d030      	beq.n	8005670 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d016      	beq.n	8005644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005616:	4b30      	ldr	r3, [pc, #192]	; (80056d8 <HAL_RCC_OscConfig+0x2b4>)
 8005618:	2201      	movs	r2, #1
 800561a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561c:	f001 f834 	bl	8006688 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005624:	f001 f830 	bl	8006688 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e12d      	b.n	8005892 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005636:	4b26      	ldr	r3, [pc, #152]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0x200>
 8005642:	e015      	b.n	8005670 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005644:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <HAL_RCC_OscConfig+0x2b4>)
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800564a:	f001 f81d 	bl	8006688 <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005652:	f001 f819 	bl	8006688 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e116      	b.n	8005892 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005664:	4b1a      	ldr	r3, [pc, #104]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1f0      	bne.n	8005652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 80a0 	beq.w	80057be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800567e:	2300      	movs	r3, #0
 8005680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005682:	4b13      	ldr	r3, [pc, #76]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10f      	bne.n	80056ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	4b0f      	ldr	r3, [pc, #60]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	4a0e      	ldr	r2, [pc, #56]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569c:	6413      	str	r3, [r2, #64]	; 0x40
 800569e:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80056aa:	2301      	movs	r3, #1
 80056ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <HAL_RCC_OscConfig+0x2b8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d121      	bne.n	80056fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ba:	4b08      	ldr	r3, [pc, #32]	; (80056dc <HAL_RCC_OscConfig+0x2b8>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a07      	ldr	r2, [pc, #28]	; (80056dc <HAL_RCC_OscConfig+0x2b8>)
 80056c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c6:	f000 ffdf 	bl	8006688 <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056cc:	e011      	b.n	80056f2 <HAL_RCC_OscConfig+0x2ce>
 80056ce:	bf00      	nop
 80056d0:	40023800 	.word	0x40023800
 80056d4:	42470000 	.word	0x42470000
 80056d8:	42470e80 	.word	0x42470e80
 80056dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e0:	f000 ffd2 	bl	8006688 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e0cf      	b.n	8005892 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f2:	4b6a      	ldr	r3, [pc, #424]	; (800589c <HAL_RCC_OscConfig+0x478>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f0      	beq.n	80056e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d106      	bne.n	8005714 <HAL_RCC_OscConfig+0x2f0>
 8005706:	4b66      	ldr	r3, [pc, #408]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	4a65      	ldr	r2, [pc, #404]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 800570c:	f043 0301 	orr.w	r3, r3, #1
 8005710:	6713      	str	r3, [r2, #112]	; 0x70
 8005712:	e01c      	b.n	800574e <HAL_RCC_OscConfig+0x32a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b05      	cmp	r3, #5
 800571a:	d10c      	bne.n	8005736 <HAL_RCC_OscConfig+0x312>
 800571c:	4b60      	ldr	r3, [pc, #384]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	4a5f      	ldr	r2, [pc, #380]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 8005722:	f043 0304 	orr.w	r3, r3, #4
 8005726:	6713      	str	r3, [r2, #112]	; 0x70
 8005728:	4b5d      	ldr	r3, [pc, #372]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 800572a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572c:	4a5c      	ldr	r2, [pc, #368]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	6713      	str	r3, [r2, #112]	; 0x70
 8005734:	e00b      	b.n	800574e <HAL_RCC_OscConfig+0x32a>
 8005736:	4b5a      	ldr	r3, [pc, #360]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 8005738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573a:	4a59      	ldr	r2, [pc, #356]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 800573c:	f023 0301 	bic.w	r3, r3, #1
 8005740:	6713      	str	r3, [r2, #112]	; 0x70
 8005742:	4b57      	ldr	r3, [pc, #348]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 8005744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005746:	4a56      	ldr	r2, [pc, #344]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 8005748:	f023 0304 	bic.w	r3, r3, #4
 800574c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d015      	beq.n	8005782 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005756:	f000 ff97 	bl	8006688 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800575c:	e00a      	b.n	8005774 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800575e:	f000 ff93 	bl	8006688 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	f241 3288 	movw	r2, #5000	; 0x1388
 800576c:	4293      	cmp	r3, r2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e08e      	b.n	8005892 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005774:	4b4a      	ldr	r3, [pc, #296]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 8005776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0ee      	beq.n	800575e <HAL_RCC_OscConfig+0x33a>
 8005780:	e014      	b.n	80057ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005782:	f000 ff81 	bl	8006688 <HAL_GetTick>
 8005786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005788:	e00a      	b.n	80057a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800578a:	f000 ff7d 	bl	8006688 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	f241 3288 	movw	r2, #5000	; 0x1388
 8005798:	4293      	cmp	r3, r2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e078      	b.n	8005892 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057a0:	4b3f      	ldr	r3, [pc, #252]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 80057a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1ee      	bne.n	800578a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057ac:	7dfb      	ldrb	r3, [r7, #23]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d105      	bne.n	80057be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057b2:	4b3b      	ldr	r3, [pc, #236]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	4a3a      	ldr	r2, [pc, #232]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 80057b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d064      	beq.n	8005890 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057c6:	4b36      	ldr	r3, [pc, #216]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 030c 	and.w	r3, r3, #12
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d05c      	beq.n	800588c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d141      	bne.n	800585e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057da:	4b32      	ldr	r3, [pc, #200]	; (80058a4 <HAL_RCC_OscConfig+0x480>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e0:	f000 ff52 	bl	8006688 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e8:	f000 ff4e 	bl	8006688 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e04b      	b.n	8005892 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fa:	4b29      	ldr	r3, [pc, #164]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f0      	bne.n	80057e8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69da      	ldr	r2, [r3, #28]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	019b      	lsls	r3, r3, #6
 8005816:	431a      	orrs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	085b      	lsrs	r3, r3, #1
 800581e:	3b01      	subs	r3, #1
 8005820:	041b      	lsls	r3, r3, #16
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	061b      	lsls	r3, r3, #24
 800582a:	491d      	ldr	r1, [pc, #116]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 800582c:	4313      	orrs	r3, r2
 800582e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005830:	4b1c      	ldr	r3, [pc, #112]	; (80058a4 <HAL_RCC_OscConfig+0x480>)
 8005832:	2201      	movs	r2, #1
 8005834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005836:	f000 ff27 	bl	8006688 <HAL_GetTick>
 800583a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800583c:	e008      	b.n	8005850 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800583e:	f000 ff23 	bl	8006688 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e020      	b.n	8005892 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005850:	4b13      	ldr	r3, [pc, #76]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0f0      	beq.n	800583e <HAL_RCC_OscConfig+0x41a>
 800585c:	e018      	b.n	8005890 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585e:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <HAL_RCC_OscConfig+0x480>)
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005864:	f000 ff10 	bl	8006688 <HAL_GetTick>
 8005868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800586c:	f000 ff0c 	bl	8006688 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e009      	b.n	8005892 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800587e:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <HAL_RCC_OscConfig+0x47c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1f0      	bne.n	800586c <HAL_RCC_OscConfig+0x448>
 800588a:	e001      	b.n	8005890 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40007000 	.word	0x40007000
 80058a0:	40023800 	.word	0x40023800
 80058a4:	42470060 	.word	0x42470060

080058a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0ca      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058bc:	4b67      	ldr	r3, [pc, #412]	; (8005a5c <HAL_RCC_ClockConfig+0x1b4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 030f 	and.w	r3, r3, #15
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d90c      	bls.n	80058e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ca:	4b64      	ldr	r3, [pc, #400]	; (8005a5c <HAL_RCC_ClockConfig+0x1b4>)
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058d2:	4b62      	ldr	r3, [pc, #392]	; (8005a5c <HAL_RCC_ClockConfig+0x1b4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d001      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0b6      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d020      	beq.n	8005932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058fc:	4b58      	ldr	r3, [pc, #352]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	4a57      	ldr	r2, [pc, #348]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 8005902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005906:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005914:	4b52      	ldr	r3, [pc, #328]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	4a51      	ldr	r2, [pc, #324]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 800591a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800591e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005920:	4b4f      	ldr	r3, [pc, #316]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	494c      	ldr	r1, [pc, #304]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 800592e:	4313      	orrs	r3, r2
 8005930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d044      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d107      	bne.n	8005956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005946:	4b46      	ldr	r3, [pc, #280]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d119      	bne.n	8005986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e07d      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d003      	beq.n	8005966 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005962:	2b03      	cmp	r3, #3
 8005964:	d107      	bne.n	8005976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005966:	4b3e      	ldr	r3, [pc, #248]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d109      	bne.n	8005986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e06d      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005976:	4b3a      	ldr	r3, [pc, #232]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e065      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005986:	4b36      	ldr	r3, [pc, #216]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f023 0203 	bic.w	r2, r3, #3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	4933      	ldr	r1, [pc, #204]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 8005994:	4313      	orrs	r3, r2
 8005996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005998:	f000 fe76 	bl	8006688 <HAL_GetTick>
 800599c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	e00a      	b.n	80059b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a0:	f000 fe72 	bl	8006688 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e04d      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b6:	4b2a      	ldr	r3, [pc, #168]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 020c 	and.w	r2, r3, #12
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d1eb      	bne.n	80059a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059c8:	4b24      	ldr	r3, [pc, #144]	; (8005a5c <HAL_RCC_ClockConfig+0x1b4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d20c      	bcs.n	80059f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d6:	4b21      	ldr	r3, [pc, #132]	; (8005a5c <HAL_RCC_ClockConfig+0x1b4>)
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059de:	4b1f      	ldr	r3, [pc, #124]	; (8005a5c <HAL_RCC_ClockConfig+0x1b4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d001      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e030      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d008      	beq.n	8005a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059fc:	4b18      	ldr	r3, [pc, #96]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	4915      	ldr	r1, [pc, #84]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d009      	beq.n	8005a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a1a:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	490d      	ldr	r1, [pc, #52]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a2e:	f000 f81d 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8005a32:	4601      	mov	r1, r0
 8005a34:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <HAL_RCC_ClockConfig+0x1b8>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	091b      	lsrs	r3, r3, #4
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	4a09      	ldr	r2, [pc, #36]	; (8005a64 <HAL_RCC_ClockConfig+0x1bc>)
 8005a40:	5cd3      	ldrb	r3, [r2, r3]
 8005a42:	fa21 f303 	lsr.w	r3, r1, r3
 8005a46:	4a08      	ldr	r2, [pc, #32]	; (8005a68 <HAL_RCC_ClockConfig+0x1c0>)
 8005a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8005a4a:	200f      	movs	r0, #15
 8005a4c:	f000 fe10 	bl	8006670 <HAL_InitTick>

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40023c00 	.word	0x40023c00
 8005a60:	40023800 	.word	0x40023800
 8005a64:	08008dbc 	.word	0x08008dbc
 8005a68:	20000308 	.word	0x20000308

08005a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	607b      	str	r3, [r7, #4]
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a82:	4b63      	ldr	r3, [pc, #396]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 030c 	and.w	r3, r3, #12
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d007      	beq.n	8005a9e <HAL_RCC_GetSysClockFreq+0x32>
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	d008      	beq.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x38>
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f040 80b4 	bne.w	8005c00 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a98:	4b5e      	ldr	r3, [pc, #376]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005a9a:	60bb      	str	r3, [r7, #8]
       break;
 8005a9c:	e0b3      	b.n	8005c06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a9e:	4b5e      	ldr	r3, [pc, #376]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005aa0:	60bb      	str	r3, [r7, #8]
      break;
 8005aa2:	e0b0      	b.n	8005c06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005aa4:	4b5a      	ldr	r3, [pc, #360]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aae:	4b58      	ldr	r3, [pc, #352]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d04a      	beq.n	8005b50 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aba:	4b55      	ldr	r3, [pc, #340]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	099b      	lsrs	r3, r3, #6
 8005ac0:	f04f 0400 	mov.w	r4, #0
 8005ac4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	ea03 0501 	and.w	r5, r3, r1
 8005ad0:	ea04 0602 	and.w	r6, r4, r2
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	4632      	mov	r2, r6
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	f04f 0400 	mov.w	r4, #0
 8005ae0:	0154      	lsls	r4, r2, #5
 8005ae2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ae6:	014b      	lsls	r3, r1, #5
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4622      	mov	r2, r4
 8005aec:	1b49      	subs	r1, r1, r5
 8005aee:	eb62 0206 	sbc.w	r2, r2, r6
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	f04f 0400 	mov.w	r4, #0
 8005afa:	0194      	lsls	r4, r2, #6
 8005afc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b00:	018b      	lsls	r3, r1, #6
 8005b02:	1a5b      	subs	r3, r3, r1
 8005b04:	eb64 0402 	sbc.w	r4, r4, r2
 8005b08:	f04f 0100 	mov.w	r1, #0
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	00e2      	lsls	r2, r4, #3
 8005b12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b16:	00d9      	lsls	r1, r3, #3
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4614      	mov	r4, r2
 8005b1c:	195b      	adds	r3, r3, r5
 8005b1e:	eb44 0406 	adc.w	r4, r4, r6
 8005b22:	f04f 0100 	mov.w	r1, #0
 8005b26:	f04f 0200 	mov.w	r2, #0
 8005b2a:	0262      	lsls	r2, r4, #9
 8005b2c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005b30:	0259      	lsls	r1, r3, #9
 8005b32:	460b      	mov	r3, r1
 8005b34:	4614      	mov	r4, r2
 8005b36:	4618      	mov	r0, r3
 8005b38:	4621      	mov	r1, r4
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f04f 0400 	mov.w	r4, #0
 8005b40:	461a      	mov	r2, r3
 8005b42:	4623      	mov	r3, r4
 8005b44:	f7fa fbae 	bl	80002a4 <__aeabi_uldivmod>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	e049      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b50:	4b2f      	ldr	r3, [pc, #188]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	099b      	lsrs	r3, r3, #6
 8005b56:	f04f 0400 	mov.w	r4, #0
 8005b5a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	ea03 0501 	and.w	r5, r3, r1
 8005b66:	ea04 0602 	and.w	r6, r4, r2
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	4632      	mov	r2, r6
 8005b6e:	f04f 0300 	mov.w	r3, #0
 8005b72:	f04f 0400 	mov.w	r4, #0
 8005b76:	0154      	lsls	r4, r2, #5
 8005b78:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b7c:	014b      	lsls	r3, r1, #5
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4622      	mov	r2, r4
 8005b82:	1b49      	subs	r1, r1, r5
 8005b84:	eb62 0206 	sbc.w	r2, r2, r6
 8005b88:	f04f 0300 	mov.w	r3, #0
 8005b8c:	f04f 0400 	mov.w	r4, #0
 8005b90:	0194      	lsls	r4, r2, #6
 8005b92:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b96:	018b      	lsls	r3, r1, #6
 8005b98:	1a5b      	subs	r3, r3, r1
 8005b9a:	eb64 0402 	sbc.w	r4, r4, r2
 8005b9e:	f04f 0100 	mov.w	r1, #0
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	00e2      	lsls	r2, r4, #3
 8005ba8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005bac:	00d9      	lsls	r1, r3, #3
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4614      	mov	r4, r2
 8005bb2:	195b      	adds	r3, r3, r5
 8005bb4:	eb44 0406 	adc.w	r4, r4, r6
 8005bb8:	f04f 0100 	mov.w	r1, #0
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	02a2      	lsls	r2, r4, #10
 8005bc2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005bc6:	0299      	lsls	r1, r3, #10
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4614      	mov	r4, r2
 8005bcc:	4618      	mov	r0, r3
 8005bce:	4621      	mov	r1, r4
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f04f 0400 	mov.w	r4, #0
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	4623      	mov	r3, r4
 8005bda:	f7fa fb63 	bl	80002a4 <__aeabi_uldivmod>
 8005bde:	4603      	mov	r3, r0
 8005be0:	460c      	mov	r4, r1
 8005be2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005be4:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	0c1b      	lsrs	r3, r3, #16
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	3301      	adds	r3, #1
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfc:	60bb      	str	r3, [r7, #8]
      break;
 8005bfe:	e002      	b.n	8005c06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c00:	4b04      	ldr	r3, [pc, #16]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005c02:	60bb      	str	r3, [r7, #8]
      break;
 8005c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c06:	68bb      	ldr	r3, [r7, #8]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c10:	40023800 	.word	0x40023800
 8005c14:	00f42400 	.word	0x00f42400
 8005c18:	007a1200 	.word	0x007a1200

08005c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c20:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c22:	681b      	ldr	r3, [r3, #0]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	20000308 	.word	0x20000308

08005c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c38:	f7ff fff0 	bl	8005c1c <HAL_RCC_GetHCLKFreq>
 8005c3c:	4601      	mov	r1, r0
 8005c3e:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	0a9b      	lsrs	r3, r3, #10
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	4a03      	ldr	r2, [pc, #12]	; (8005c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c4a:	5cd3      	ldrb	r3, [r2, r3]
 8005c4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40023800 	.word	0x40023800
 8005c58:	08008dcc 	.word	0x08008dcc

08005c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c60:	f7ff ffdc 	bl	8005c1c <HAL_RCC_GetHCLKFreq>
 8005c64:	4601      	mov	r1, r0
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	0b5b      	lsrs	r3, r3, #13
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	4a03      	ldr	r2, [pc, #12]	; (8005c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c72:	5cd3      	ldrb	r3, [r2, r3]
 8005c74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	08008dcc 	.word	0x08008dcc

08005c84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	220f      	movs	r2, #15
 8005c92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c94:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 0203 	and.w	r2, r3, #3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ca0:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005cac:	4b0c      	ldr	r3, [pc, #48]	; (8005ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	08db      	lsrs	r3, r3, #3
 8005cbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cc6:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <HAL_RCC_GetClockConfig+0x60>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 020f 	and.w	r2, r3, #15
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	601a      	str	r2, [r3, #0]
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	40023c00 	.word	0x40023c00

08005ce8 <HAL_TIM_OC_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e01d      	b.n	8005d36 <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d106      	bne.n	8005d14 <HAL_TIM_OC_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f815 	bl	8005d3e <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3304      	adds	r3, #4
 8005d24:	4619      	mov	r1, r3
 8005d26:	4610      	mov	r0, r2
 8005d28:	f000 f83c 	bl	8005da4 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_TIM_OC_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2201      	movs	r2, #1
 8005d64:	6839      	ldr	r1, [r7, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 f8a0 	bl	8005eac <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a0b      	ldr	r2, [pc, #44]	; (8005da0 <HAL_TIM_OC_Start+0x4c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d107      	bne.n	8005d86 <HAL_TIM_OC_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d84:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim); 
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f042 0201 	orr.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40010000 	.word	0x40010000

08005da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a35      	ldr	r2, [pc, #212]	; (8005e90 <TIM_Base_SetConfig+0xec>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00f      	beq.n	8005de0 <TIM_Base_SetConfig+0x3c>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc6:	d00b      	beq.n	8005de0 <TIM_Base_SetConfig+0x3c>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a32      	ldr	r2, [pc, #200]	; (8005e94 <TIM_Base_SetConfig+0xf0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d007      	beq.n	8005de0 <TIM_Base_SetConfig+0x3c>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a31      	ldr	r2, [pc, #196]	; (8005e98 <TIM_Base_SetConfig+0xf4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d003      	beq.n	8005de0 <TIM_Base_SetConfig+0x3c>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a30      	ldr	r2, [pc, #192]	; (8005e9c <TIM_Base_SetConfig+0xf8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d101      	bne.n	8005de4 <TIM_Base_SetConfig+0x40>
 8005de0:	2301      	movs	r3, #1
 8005de2:	e000      	b.n	8005de6 <TIM_Base_SetConfig+0x42>
 8005de4:	2300      	movs	r3, #0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d008      	beq.n	8005dfc <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a24      	ldr	r2, [pc, #144]	; (8005e90 <TIM_Base_SetConfig+0xec>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d01b      	beq.n	8005e3c <TIM_Base_SetConfig+0x98>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0a:	d017      	beq.n	8005e3c <TIM_Base_SetConfig+0x98>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a21      	ldr	r2, [pc, #132]	; (8005e94 <TIM_Base_SetConfig+0xf0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d013      	beq.n	8005e3c <TIM_Base_SetConfig+0x98>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a20      	ldr	r2, [pc, #128]	; (8005e98 <TIM_Base_SetConfig+0xf4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00f      	beq.n	8005e3c <TIM_Base_SetConfig+0x98>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a1f      	ldr	r2, [pc, #124]	; (8005e9c <TIM_Base_SetConfig+0xf8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00b      	beq.n	8005e3c <TIM_Base_SetConfig+0x98>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a1e      	ldr	r2, [pc, #120]	; (8005ea0 <TIM_Base_SetConfig+0xfc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d007      	beq.n	8005e3c <TIM_Base_SetConfig+0x98>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ea4 <TIM_Base_SetConfig+0x100>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d003      	beq.n	8005e3c <TIM_Base_SetConfig+0x98>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a1c      	ldr	r2, [pc, #112]	; (8005ea8 <TIM_Base_SetConfig+0x104>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d101      	bne.n	8005e40 <TIM_Base_SetConfig+0x9c>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <TIM_Base_SetConfig+0x9e>
 8005e40:	2300      	movs	r3, #0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d008      	beq.n	8005e58 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	689a      	ldr	r2, [r3, #8]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a07      	ldr	r2, [pc, #28]	; (8005e90 <TIM_Base_SetConfig+0xec>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d103      	bne.n	8005e7e <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	615a      	str	r2, [r3, #20]
}
 8005e84:	bf00      	nop
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	40010000 	.word	0x40010000
 8005e94:	40000400 	.word	0x40000400
 8005e98:	40000800 	.word	0x40000800
 8005e9c:	40000c00 	.word	0x40000c00
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40014400 	.word	0x40014400
 8005ea8:	40014800 	.word	0x40014800

08005eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a1a      	ldr	r2, [r3, #32]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	401a      	ands	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a1a      	ldr	r2, [r3, #32]
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	621a      	str	r2, [r3, #32]
}
 8005ee6:	bf00      	nop
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e03f      	b.n	8005f84 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7fc fabb 	bl	8002494 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2224      	movs	r2, #36	; 0x24
 8005f22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f34:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f828 	bl	8005f8c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	691a      	ldr	r2, [r3, #16]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695a      	ldr	r2, [r3, #20]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f5a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f6a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f8c:	b5b0      	push	{r4, r5, r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005fc8:	f023 030c 	bic.w	r3, r3, #12
 8005fcc:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006000:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4313      	orrs	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800601c:	f040 80e4 	bne.w	80061e8 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4aab      	ldr	r2, [pc, #684]	; (80062d4 <UART_SetConfig+0x348>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <UART_SetConfig+0xa8>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4aaa      	ldr	r2, [pc, #680]	; (80062d8 <UART_SetConfig+0x34c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d16c      	bne.n	800610e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006034:	f7ff fe12 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 8006038:	4602      	mov	r2, r0
 800603a:	4613      	mov	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	009a      	lsls	r2, r3, #2
 8006042:	441a      	add	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	fbb2 f3f3 	udiv	r3, r2, r3
 800604e:	4aa3      	ldr	r2, [pc, #652]	; (80062dc <UART_SetConfig+0x350>)
 8006050:	fba2 2303 	umull	r2, r3, r2, r3
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	011c      	lsls	r4, r3, #4
 8006058:	f7ff fe00 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 800605c:	4602      	mov	r2, r0
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	009a      	lsls	r2, r3, #2
 8006066:	441a      	add	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006072:	f7ff fdf3 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 8006076:	4602      	mov	r2, r0
 8006078:	4613      	mov	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	009a      	lsls	r2, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	fbb2 f3f3 	udiv	r3, r2, r3
 800608c:	4a93      	ldr	r2, [pc, #588]	; (80062dc <UART_SetConfig+0x350>)
 800608e:	fba2 2303 	umull	r2, r3, r2, r3
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	2264      	movs	r2, #100	; 0x64
 8006096:	fb02 f303 	mul.w	r3, r2, r3
 800609a:	1aeb      	subs	r3, r5, r3
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	3332      	adds	r3, #50	; 0x32
 80060a0:	4a8e      	ldr	r2, [pc, #568]	; (80062dc <UART_SetConfig+0x350>)
 80060a2:	fba2 2303 	umull	r2, r3, r2, r3
 80060a6:	095b      	lsrs	r3, r3, #5
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060ae:	441c      	add	r4, r3
 80060b0:	f7ff fdd4 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 80060b4:	4602      	mov	r2, r0
 80060b6:	4613      	mov	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	009a      	lsls	r2, r3, #2
 80060be:	441a      	add	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	fbb2 f5f3 	udiv	r5, r2, r3
 80060ca:	f7ff fdc7 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 80060ce:	4602      	mov	r2, r0
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	009a      	lsls	r2, r3, #2
 80060d8:	441a      	add	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e4:	4a7d      	ldr	r2, [pc, #500]	; (80062dc <UART_SetConfig+0x350>)
 80060e6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ea:	095b      	lsrs	r3, r3, #5
 80060ec:	2264      	movs	r2, #100	; 0x64
 80060ee:	fb02 f303 	mul.w	r3, r2, r3
 80060f2:	1aeb      	subs	r3, r5, r3
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	3332      	adds	r3, #50	; 0x32
 80060f8:	4a78      	ldr	r2, [pc, #480]	; (80062dc <UART_SetConfig+0x350>)
 80060fa:	fba2 2303 	umull	r2, r3, r2, r3
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	f003 0207 	and.w	r2, r3, #7
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4422      	add	r2, r4
 800610a:	609a      	str	r2, [r3, #8]
 800610c:	e154      	b.n	80063b8 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800610e:	f7ff fd91 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 8006112:	4602      	mov	r2, r0
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	009a      	lsls	r2, r3, #2
 800611c:	441a      	add	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	fbb2 f3f3 	udiv	r3, r2, r3
 8006128:	4a6c      	ldr	r2, [pc, #432]	; (80062dc <UART_SetConfig+0x350>)
 800612a:	fba2 2303 	umull	r2, r3, r2, r3
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	011c      	lsls	r4, r3, #4
 8006132:	f7ff fd7f 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 8006136:	4602      	mov	r2, r0
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	009a      	lsls	r2, r3, #2
 8006140:	441a      	add	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	fbb2 f5f3 	udiv	r5, r2, r3
 800614c:	f7ff fd72 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 8006150:	4602      	mov	r2, r0
 8006152:	4613      	mov	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	009a      	lsls	r2, r3, #2
 800615a:	441a      	add	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	fbb2 f3f3 	udiv	r3, r2, r3
 8006166:	4a5d      	ldr	r2, [pc, #372]	; (80062dc <UART_SetConfig+0x350>)
 8006168:	fba2 2303 	umull	r2, r3, r2, r3
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	2264      	movs	r2, #100	; 0x64
 8006170:	fb02 f303 	mul.w	r3, r2, r3
 8006174:	1aeb      	subs	r3, r5, r3
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	3332      	adds	r3, #50	; 0x32
 800617a:	4a58      	ldr	r2, [pc, #352]	; (80062dc <UART_SetConfig+0x350>)
 800617c:	fba2 2303 	umull	r2, r3, r2, r3
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006188:	441c      	add	r4, r3
 800618a:	f7ff fd53 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 800618e:	4602      	mov	r2, r0
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	009a      	lsls	r2, r3, #2
 8006198:	441a      	add	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	fbb2 f5f3 	udiv	r5, r2, r3
 80061a4:	f7ff fd46 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 80061a8:	4602      	mov	r2, r0
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	009a      	lsls	r2, r3, #2
 80061b2:	441a      	add	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80061be:	4a47      	ldr	r2, [pc, #284]	; (80062dc <UART_SetConfig+0x350>)
 80061c0:	fba2 2303 	umull	r2, r3, r2, r3
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	2264      	movs	r2, #100	; 0x64
 80061c8:	fb02 f303 	mul.w	r3, r2, r3
 80061cc:	1aeb      	subs	r3, r5, r3
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	3332      	adds	r3, #50	; 0x32
 80061d2:	4a42      	ldr	r2, [pc, #264]	; (80062dc <UART_SetConfig+0x350>)
 80061d4:	fba2 2303 	umull	r2, r3, r2, r3
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	f003 0207 	and.w	r2, r3, #7
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4422      	add	r2, r4
 80061e4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80061e6:	e0e7      	b.n	80063b8 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a39      	ldr	r2, [pc, #228]	; (80062d4 <UART_SetConfig+0x348>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d004      	beq.n	80061fc <UART_SetConfig+0x270>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a38      	ldr	r2, [pc, #224]	; (80062d8 <UART_SetConfig+0x34c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d171      	bne.n	80062e0 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80061fc:	f7ff fd2e 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 8006200:	4602      	mov	r2, r0
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	009a      	lsls	r2, r3, #2
 800620a:	441a      	add	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	fbb2 f3f3 	udiv	r3, r2, r3
 8006216:	4a31      	ldr	r2, [pc, #196]	; (80062dc <UART_SetConfig+0x350>)
 8006218:	fba2 2303 	umull	r2, r3, r2, r3
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	011c      	lsls	r4, r3, #4
 8006220:	f7ff fd1c 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 8006224:	4602      	mov	r2, r0
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	009a      	lsls	r2, r3, #2
 800622e:	441a      	add	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	fbb2 f5f3 	udiv	r5, r2, r3
 800623a:	f7ff fd0f 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 800623e:	4602      	mov	r2, r0
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	009a      	lsls	r2, r3, #2
 8006248:	441a      	add	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	fbb2 f3f3 	udiv	r3, r2, r3
 8006254:	4a21      	ldr	r2, [pc, #132]	; (80062dc <UART_SetConfig+0x350>)
 8006256:	fba2 2303 	umull	r2, r3, r2, r3
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	2264      	movs	r2, #100	; 0x64
 800625e:	fb02 f303 	mul.w	r3, r2, r3
 8006262:	1aeb      	subs	r3, r5, r3
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	3332      	adds	r3, #50	; 0x32
 8006268:	4a1c      	ldr	r2, [pc, #112]	; (80062dc <UART_SetConfig+0x350>)
 800626a:	fba2 2303 	umull	r2, r3, r2, r3
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006274:	441c      	add	r4, r3
 8006276:	f7ff fcf1 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 800627a:	4602      	mov	r2, r0
 800627c:	4613      	mov	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	009a      	lsls	r2, r3, #2
 8006284:	441a      	add	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	fbb2 f5f3 	udiv	r5, r2, r3
 8006290:	f7ff fce4 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 8006294:	4602      	mov	r2, r0
 8006296:	4613      	mov	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	009a      	lsls	r2, r3, #2
 800629e:	441a      	add	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062aa:	4a0c      	ldr	r2, [pc, #48]	; (80062dc <UART_SetConfig+0x350>)
 80062ac:	fba2 2303 	umull	r2, r3, r2, r3
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	2264      	movs	r2, #100	; 0x64
 80062b4:	fb02 f303 	mul.w	r3, r2, r3
 80062b8:	1aeb      	subs	r3, r5, r3
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	3332      	adds	r3, #50	; 0x32
 80062be:	4a07      	ldr	r2, [pc, #28]	; (80062dc <UART_SetConfig+0x350>)
 80062c0:	fba2 2303 	umull	r2, r3, r2, r3
 80062c4:	095b      	lsrs	r3, r3, #5
 80062c6:	f003 020f 	and.w	r2, r3, #15
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4422      	add	r2, r4
 80062d0:	609a      	str	r2, [r3, #8]
 80062d2:	e071      	b.n	80063b8 <UART_SetConfig+0x42c>
 80062d4:	40011000 	.word	0x40011000
 80062d8:	40011400 	.word	0x40011400
 80062dc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80062e0:	f7ff fca8 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 80062e4:	4602      	mov	r2, r0
 80062e6:	4613      	mov	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	009a      	lsls	r2, r3, #2
 80062ee:	441a      	add	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fa:	4a31      	ldr	r2, [pc, #196]	; (80063c0 <UART_SetConfig+0x434>)
 80062fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006300:	095b      	lsrs	r3, r3, #5
 8006302:	011c      	lsls	r4, r3, #4
 8006304:	f7ff fc96 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 8006308:	4602      	mov	r2, r0
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009a      	lsls	r2, r3, #2
 8006312:	441a      	add	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	fbb2 f5f3 	udiv	r5, r2, r3
 800631e:	f7ff fc89 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 8006322:	4602      	mov	r2, r0
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	009a      	lsls	r2, r3, #2
 800632c:	441a      	add	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	fbb2 f3f3 	udiv	r3, r2, r3
 8006338:	4a21      	ldr	r2, [pc, #132]	; (80063c0 <UART_SetConfig+0x434>)
 800633a:	fba2 2303 	umull	r2, r3, r2, r3
 800633e:	095b      	lsrs	r3, r3, #5
 8006340:	2264      	movs	r2, #100	; 0x64
 8006342:	fb02 f303 	mul.w	r3, r2, r3
 8006346:	1aeb      	subs	r3, r5, r3
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	3332      	adds	r3, #50	; 0x32
 800634c:	4a1c      	ldr	r2, [pc, #112]	; (80063c0 <UART_SetConfig+0x434>)
 800634e:	fba2 2303 	umull	r2, r3, r2, r3
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006358:	441c      	add	r4, r3
 800635a:	f7ff fc6b 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 800635e:	4602      	mov	r2, r0
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009a      	lsls	r2, r3, #2
 8006368:	441a      	add	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	fbb2 f5f3 	udiv	r5, r2, r3
 8006374:	f7ff fc5e 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 8006378:	4602      	mov	r2, r0
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	009a      	lsls	r2, r3, #2
 8006382:	441a      	add	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	fbb2 f3f3 	udiv	r3, r2, r3
 800638e:	4a0c      	ldr	r2, [pc, #48]	; (80063c0 <UART_SetConfig+0x434>)
 8006390:	fba2 2303 	umull	r2, r3, r2, r3
 8006394:	095b      	lsrs	r3, r3, #5
 8006396:	2264      	movs	r2, #100	; 0x64
 8006398:	fb02 f303 	mul.w	r3, r2, r3
 800639c:	1aeb      	subs	r3, r5, r3
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	3332      	adds	r3, #50	; 0x32
 80063a2:	4a07      	ldr	r2, [pc, #28]	; (80063c0 <UART_SetConfig+0x434>)
 80063a4:	fba2 2303 	umull	r2, r3, r2, r3
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	f003 020f 	and.w	r2, r3, #15
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4422      	add	r2, r4
 80063b4:	609a      	str	r2, [r3, #8]
}
 80063b6:	e7ff      	b.n	80063b8 <UART_SetConfig+0x42c>
 80063b8:	bf00      	nop
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bdb0      	pop	{r4, r5, r7, pc}
 80063c0:	51eb851f 	.word	0x51eb851f

080063c4 <LL_GPIO_SetPinMode>:
{
    MODIFY_REG(GPIOx->AFR[1], (0xFU << (POSITION_VAL(Pin >> 8U) * 4U)),
               (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b089      	sub	sp, #36	; 0x24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
    MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	fa93 f3a3 	rbit	r3, r3
 80063de:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	fab3 f383 	clz	r3, r3
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	2103      	movs	r1, #3
 80063ec:	fa01 f303 	lsl.w	r3, r1, r3
 80063f0:	43db      	mvns	r3, r3
 80063f2:	401a      	ands	r2, r3
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	fa93 f3a3 	rbit	r3, r3
 80063fe:	61bb      	str	r3, [r7, #24]
  return result;
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	fab3 f383 	clz	r3, r3
 8006406:	b2db      	uxtb	r3, r3
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	fa01 f303 	lsl.w	r3, r1, r3
 8006410:	431a      	orrs	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	601a      	str	r2, [r3, #0]
}
 8006416:	bf00      	nop
 8006418:	3724      	adds	r7, #36	; 0x24
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <Set_GPIO_Clock>:

extern const uint32_t ll_pin_defines[16];

// Enable GPIO clock and return GPIO base address
GPIO_TypeDef *Set_GPIO_Clock(uint32_t port_idx)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08a      	sub	sp, #40	; 0x28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
    uint32_t gpio_add = 0;
 800642c:	2300      	movs	r3, #0
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
    switch (port_idx) {
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b07      	cmp	r3, #7
 8006434:	d878      	bhi.n	8006528 <Set_GPIO_Clock+0x104>
 8006436:	a201      	add	r2, pc, #4	; (adr r2, 800643c <Set_GPIO_Clock+0x18>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	0800645d 	.word	0x0800645d
 8006440:	0800647f 	.word	0x0800647f
 8006444:	080064a1 	.word	0x080064a1
 8006448:	080064c3 	.word	0x080064c3
 800644c:	080064e5 	.word	0x080064e5
 8006450:	08006529 	.word	0x08006529
 8006454:	08006529 	.word	0x08006529
 8006458:	08006507 	.word	0x08006507
        case PortA:
            gpio_add = GPIOA_BASE;
 800645c:	4b37      	ldr	r3, [pc, #220]	; (800653c <Set_GPIO_Clock+0x118>)
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
            __HAL_RCC_GPIOA_CLK_ENABLE();
 8006460:	2300      	movs	r3, #0
 8006462:	623b      	str	r3, [r7, #32]
 8006464:	4b36      	ldr	r3, [pc, #216]	; (8006540 <Set_GPIO_Clock+0x11c>)
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	4a35      	ldr	r2, [pc, #212]	; (8006540 <Set_GPIO_Clock+0x11c>)
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	6313      	str	r3, [r2, #48]	; 0x30
 8006470:	4b33      	ldr	r3, [pc, #204]	; (8006540 <Set_GPIO_Clock+0x11c>)
 8006472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	623b      	str	r3, [r7, #32]
 800647a:	6a3b      	ldr	r3, [r7, #32]
            break;
 800647c:	e058      	b.n	8006530 <Set_GPIO_Clock+0x10c>
        case PortB:
            gpio_add = GPIOB_BASE;
 800647e:	4b31      	ldr	r3, [pc, #196]	; (8006544 <Set_GPIO_Clock+0x120>)
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
            __HAL_RCC_GPIOB_CLK_ENABLE();
 8006482:	2300      	movs	r3, #0
 8006484:	61fb      	str	r3, [r7, #28]
 8006486:	4b2e      	ldr	r3, [pc, #184]	; (8006540 <Set_GPIO_Clock+0x11c>)
 8006488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648a:	4a2d      	ldr	r2, [pc, #180]	; (8006540 <Set_GPIO_Clock+0x11c>)
 800648c:	f043 0302 	orr.w	r3, r3, #2
 8006490:	6313      	str	r3, [r2, #48]	; 0x30
 8006492:	4b2b      	ldr	r3, [pc, #172]	; (8006540 <Set_GPIO_Clock+0x11c>)
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	61fb      	str	r3, [r7, #28]
 800649c:	69fb      	ldr	r3, [r7, #28]
            break;
 800649e:	e047      	b.n	8006530 <Set_GPIO_Clock+0x10c>
#if defined(GPIOC_BASE)
        case PortC:
            gpio_add = GPIOC_BASE;
 80064a0:	4b29      	ldr	r3, [pc, #164]	; (8006548 <Set_GPIO_Clock+0x124>)
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
            __HAL_RCC_GPIOC_CLK_ENABLE();
 80064a4:	2300      	movs	r3, #0
 80064a6:	61bb      	str	r3, [r7, #24]
 80064a8:	4b25      	ldr	r3, [pc, #148]	; (8006540 <Set_GPIO_Clock+0x11c>)
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	4a24      	ldr	r2, [pc, #144]	; (8006540 <Set_GPIO_Clock+0x11c>)
 80064ae:	f043 0304 	orr.w	r3, r3, #4
 80064b2:	6313      	str	r3, [r2, #48]	; 0x30
 80064b4:	4b22      	ldr	r3, [pc, #136]	; (8006540 <Set_GPIO_Clock+0x11c>)
 80064b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	61bb      	str	r3, [r7, #24]
 80064be:	69bb      	ldr	r3, [r7, #24]
            break;
 80064c0:	e036      	b.n	8006530 <Set_GPIO_Clock+0x10c>
#endif
#if defined GPIOD_BASE
        case PortD:
            gpio_add = GPIOD_BASE;
 80064c2:	4b22      	ldr	r3, [pc, #136]	; (800654c <Set_GPIO_Clock+0x128>)
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
            __HAL_RCC_GPIOD_CLK_ENABLE();
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]
 80064ca:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <Set_GPIO_Clock+0x11c>)
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	4a1c      	ldr	r2, [pc, #112]	; (8006540 <Set_GPIO_Clock+0x11c>)
 80064d0:	f043 0308 	orr.w	r3, r3, #8
 80064d4:	6313      	str	r3, [r2, #48]	; 0x30
 80064d6:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <Set_GPIO_Clock+0x11c>)
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	697b      	ldr	r3, [r7, #20]
            break;
 80064e2:	e025      	b.n	8006530 <Set_GPIO_Clock+0x10c>
#endif
#if defined GPIOE_BASE
        case PortE:
            gpio_add = GPIOE_BASE;
 80064e4:	4b1a      	ldr	r3, [pc, #104]	; (8006550 <Set_GPIO_Clock+0x12c>)
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
            __HAL_RCC_GPIOE_CLK_ENABLE();
 80064e8:	2300      	movs	r3, #0
 80064ea:	613b      	str	r3, [r7, #16]
 80064ec:	4b14      	ldr	r3, [pc, #80]	; (8006540 <Set_GPIO_Clock+0x11c>)
 80064ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f0:	4a13      	ldr	r2, [pc, #76]	; (8006540 <Set_GPIO_Clock+0x11c>)
 80064f2:	f043 0310 	orr.w	r3, r3, #16
 80064f6:	6313      	str	r3, [r2, #48]	; 0x30
 80064f8:	4b11      	ldr	r3, [pc, #68]	; (8006540 <Set_GPIO_Clock+0x11c>)
 80064fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fc:	f003 0310 	and.w	r3, r3, #16
 8006500:	613b      	str	r3, [r7, #16]
 8006502:	693b      	ldr	r3, [r7, #16]
            break;
 8006504:	e014      	b.n	8006530 <Set_GPIO_Clock+0x10c>
            __HAL_RCC_GPIOG_CLK_ENABLE();
            break;
#endif
#if defined GPIOH_BASE
        case PortH:
            gpio_add = GPIOH_BASE;
 8006506:	4b13      	ldr	r3, [pc, #76]	; (8006554 <Set_GPIO_Clock+0x130>)
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
            __HAL_RCC_GPIOH_CLK_ENABLE();
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	4b0c      	ldr	r3, [pc, #48]	; (8006540 <Set_GPIO_Clock+0x11c>)
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	4a0b      	ldr	r2, [pc, #44]	; (8006540 <Set_GPIO_Clock+0x11c>)
 8006514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006518:	6313      	str	r3, [r2, #48]	; 0x30
 800651a:	4b09      	ldr	r3, [pc, #36]	; (8006540 <Set_GPIO_Clock+0x11c>)
 800651c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]
            break;
 8006526:	e003      	b.n	8006530 <Set_GPIO_Clock+0x10c>
            gpio_add = GPIOK_BASE;
            __HAL_RCC_GPIOK_CLK_ENABLE();
            break;
#endif
        default:
            error("Pinmap error: wrong port number.");
 8006528:	480b      	ldr	r0, [pc, #44]	; (8006558 <Set_GPIO_Clock+0x134>)
 800652a:	f7fd fdc7 	bl	80040bc <error>
            break;
 800652e:	bf00      	nop
    }
    return (GPIO_TypeDef *) gpio_add;
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006532:	4618      	mov	r0, r3
 8006534:	3728      	adds	r7, #40	; 0x28
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	40020000 	.word	0x40020000
 8006540:	40023800 	.word	0x40023800
 8006544:	40020400 	.word	0x40020400
 8006548:	40020800 	.word	0x40020800
 800654c:	40020c00 	.word	0x40020c00
 8006550:	40021000 	.word	0x40021000
 8006554:	40021c00 	.word	0x40021c00
 8006558:	08008928 	.word	0x08008928

0800655c <gpio_set>:

uint32_t gpio_set(PinName pin)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	4603      	mov	r3, r0
 8006564:	80fb      	strh	r3, [r7, #6]
    MBED_ASSERT(pin != (PinName)NC);

    pin_function(pin, STM_PIN_DATA(STM_MODE_INPUT, GPIO_NOPULL, 0));
 8006566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800656a:	2100      	movs	r1, #0
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fa1f 	bl	80069b0 <pin_function>

    return (uint32_t)(1 << ((uint32_t)pin & 0xF)); // Return the pin mask
 8006572:	88fb      	ldrh	r3, [r7, #6]
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	2201      	movs	r2, #1
 800657a:	fa02 f303 	lsl.w	r3, r2, r3
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <gpio_init>:


void gpio_init(gpio_t *obj, PinName pin)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	807b      	strh	r3, [r7, #2]
    obj->pin = pin;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	887a      	ldrh	r2, [r7, #2]
 8006598:	821a      	strh	r2, [r3, #16]
    if (pin == (PinName)NC) {
 800659a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800659e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a2:	d02f      	beq.n	8006604 <gpio_init+0x7c>
        return;
    }

    uint32_t port_index = STM_PORT(pin);
 80065a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065a8:	091b      	lsrs	r3, r3, #4
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	60fb      	str	r3, [r7, #12]

    // Enable GPIO clock
    GPIO_TypeDef *gpio = Set_GPIO_Clock(port_index);
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f7ff ff37 	bl	8006424 <Set_GPIO_Clock>
 80065b6:	60b8      	str	r0, [r7, #8]

    // Fill GPIO object structure for future use
    obj->mask    = gpio_set(pin);
 80065b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff ffcd 	bl	800655c <gpio_set>
 80065c2:	4602      	mov	r2, r0
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	601a      	str	r2, [r3, #0]
    obj->gpio  = gpio;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	615a      	str	r2, [r3, #20]
    obj->ll_pin  = ll_pin_defines[STM_PIN(obj->pin)];
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	4a0c      	ldr	r2, [pc, #48]	; (800660c <gpio_init+0x84>)
 80065dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	619a      	str	r2, [r3, #24]
    obj->reg_in  = &gpio->IDR;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f103 0210 	add.w	r2, r3, #16
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	605a      	str	r2, [r3, #4]
    obj->reg_set = &gpio->BSRR;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f103 0218 	add.w	r2, r3, #24
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	609a      	str	r2, [r3, #8]
#ifdef GPIO_IP_WITHOUT_BRR
    obj->reg_clr = &gpio->BSRR;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f103 0218 	add.w	r2, r3, #24
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	60da      	str	r2, [r3, #12]
 8006602:	e000      	b.n	8006606 <gpio_init+0x7e>
        return;
 8006604:	bf00      	nop
#else
    obj->reg_clr = &gpio->BRR;
#endif
}
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	08008dd4 	.word	0x08008dd4

08006610 <gpio_mode>:

void gpio_mode(gpio_t *obj, PinMode mode)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	460b      	mov	r3, r1
 800661a:	70fb      	strb	r3, [r7, #3]
    pin_mode(obj->pin, mode);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006622:	78fa      	ldrb	r2, [r7, #3]
 8006624:	4611      	mov	r1, r2
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fa3c 	bl	8006aa4 <pin_mode>
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <gpio_dir>:

inline void gpio_dir(gpio_t *obj, PinDirection direction)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	70fb      	strb	r3, [r7, #3]
    if (direction == PIN_INPUT) {
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d108      	bne.n	8006658 <gpio_dir+0x24>
        LL_GPIO_SetPinMode(obj->gpio, obj->ll_pin, LL_GPIO_MODE_INPUT);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6958      	ldr	r0, [r3, #20]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	2200      	movs	r2, #0
 8006650:	4619      	mov	r1, r3
 8006652:	f7ff feb7 	bl	80063c4 <LL_GPIO_SetPinMode>
    } else {
        LL_GPIO_SetPinMode(obj->gpio, obj->ll_pin, LL_GPIO_MODE_OUTPUT);
    }
}
 8006656:	e007      	b.n	8006668 <gpio_dir+0x34>
        LL_GPIO_SetPinMode(obj->gpio, obj->ll_pin, LL_GPIO_MODE_OUTPUT);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6958      	ldr	r0, [r3, #20]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	2201      	movs	r2, #1
 8006662:	4619      	mov	r1, r3
 8006664:	f7ff feae 	bl	80063c4 <LL_GPIO_SetPinMode>
}
 8006668:	bf00      	nop
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_InitTick>:
#endif

// Overwrite default HAL functions defined as "weak"

HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
#if TIM_MST_BIT_WIDTH == 16
    init_16bit_timer();
#else
    init_32bit_timer();
 8006678:	f000 fc9a 	bl	8006fb0 <init_32bit_timer>
#endif
    return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <HAL_GetTick>:

uint32_t HAL_GetTick()
{
 8006688:	b598      	push	{r3, r4, r7, lr}
 800668a:	af00      	add	r7, sp, #0
        elapsed_time += (new_time - prev_time) & 0xFFFF; // Only use the lower 16 bits
        prev_time = new_time;
        return (elapsed_time / 1000);
    }
#else // 32-bit timer
    if (mbed_sdk_inited) {
 800668c:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <HAL_GetTick+0x3c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00e      	beq.n	80066b2 <HAL_GetTick+0x2a>
        return (ticker_read_us(get_us_ticker_data()) / 1000);
 8006694:	f7fd f868 	bl	8003768 <get_us_ticker_data>
 8006698:	4603      	mov	r3, r0
 800669a:	4618      	mov	r0, r3
 800669c:	f7fd f84c 	bl	8003738 <ticker_read_us>
 80066a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	f7f9 fdfc 	bl	80002a4 <__aeabi_uldivmod>
 80066ac:	4603      	mov	r3, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	e006      	b.n	80066c0 <HAL_GetTick+0x38>
    }
    else {
        return (us_ticker_read() / 1000);
 80066b2:	f000 fd07 	bl	80070c4 <us_ticker_read>
 80066b6:	4602      	mov	r2, r0
 80066b8:	4b03      	ldr	r3, [pc, #12]	; (80066c8 <HAL_GetTick+0x40>)
 80066ba:	fba3 2302 	umull	r2, r3, r3, r2
 80066be:	099b      	lsrs	r3, r3, #6
    }
#endif
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	bd98      	pop	{r3, r4, r7, pc}
 80066c4:	2000054c 	.word	0x2000054c
 80066c8:	10624dd3 	.word	0x10624dd3

080066cc <LL_GPIO_SetAFPin_0_7>:
{
 80066cc:	b480      	push	{r7}
 80066ce:	b089      	sub	sp, #36	; 0x24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
    MODIFY_REG(GPIOx->AFR[0], (0xFU << (POSITION_VAL(Pin) * 4U)),
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a1a      	ldr	r2, [r3, #32]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	fa93 f3a3 	rbit	r3, r3
 80066e6:	613b      	str	r3, [r7, #16]
  return result;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	fab3 f383 	clz	r3, r3
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	210f      	movs	r1, #15
 80066f4:	fa01 f303 	lsl.w	r3, r1, r3
 80066f8:	43db      	mvns	r3, r3
 80066fa:	401a      	ands	r2, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	fa93 f3a3 	rbit	r3, r3
 8006706:	61bb      	str	r3, [r7, #24]
  return result;
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	fab3 f383 	clz	r3, r3
 800670e:	b2db      	uxtb	r3, r3
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	6879      	ldr	r1, [r7, #4]
 8006714:	fa01 f303 	lsl.w	r3, r1, r3
 8006718:	431a      	orrs	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	621a      	str	r2, [r3, #32]
}
 800671e:	bf00      	nop
 8006720:	3724      	adds	r7, #36	; 0x24
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <LL_GPIO_SetAFPin_8_15>:
{
 800672a:	b480      	push	{r7}
 800672c:	b089      	sub	sp, #36	; 0x24
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
    MODIFY_REG(GPIOx->AFR[1], (0xFU << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	0a1b      	lsrs	r3, r3, #8
 800673e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	fa93 f3a3 	rbit	r3, r3
 8006746:	613b      	str	r3, [r7, #16]
  return result;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	fab3 f383 	clz	r3, r3
 800674e:	b2db      	uxtb	r3, r3
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	210f      	movs	r1, #15
 8006754:	fa01 f303 	lsl.w	r3, r1, r3
 8006758:	43db      	mvns	r3, r3
 800675a:	401a      	ands	r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	0a1b      	lsrs	r3, r3, #8
 8006760:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	fa93 f3a3 	rbit	r3, r3
 8006768:	61bb      	str	r3, [r7, #24]
  return result;
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	fab3 f383 	clz	r3, r3
 8006770:	b2db      	uxtb	r3, r3
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	fa01 f303 	lsl.w	r3, r1, r3
 800677a:	431a      	orrs	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006780:	bf00      	nop
 8006782:	3724      	adds	r7, #36	; 0x24
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <LL_GPIO_SetPinMode>:
{
 800678c:	b480      	push	{r7}
 800678e:	b089      	sub	sp, #36	; 0x24
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
    MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	fa93 f3a3 	rbit	r3, r3
 80067a6:	613b      	str	r3, [r7, #16]
  return result;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	fab3 f383 	clz	r3, r3
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	2103      	movs	r1, #3
 80067b4:	fa01 f303 	lsl.w	r3, r1, r3
 80067b8:	43db      	mvns	r3, r3
 80067ba:	401a      	ands	r2, r3
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	fa93 f3a3 	rbit	r3, r3
 80067c6:	61bb      	str	r3, [r7, #24]
  return result;
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	fab3 f383 	clz	r3, r3
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	fa01 f303 	lsl.w	r3, r1, r3
 80067d8:	431a      	orrs	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	601a      	str	r2, [r3, #0]
}
 80067de:	bf00      	nop
 80067e0:	3724      	adds	r7, #36	; 0x24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <LL_GPIO_GetPinMode>:
__STATIC_INLINE uint32_t LL_GPIO_GetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	6039      	str	r1, [r7, #0]
    return (uint32_t)(READ_BIT(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0)) / (Pin * Pin));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6819      	ldr	r1, [r3, #0]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	fb02 f203 	mul.w	r2, r2, r3
 8006800:	4613      	mov	r3, r2
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	4413      	add	r3, r2
 8006806:	ea01 0203 	and.w	r2, r1, r3
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	fb01 f303 	mul.w	r3, r1, r3
 8006812:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8006816:	4618      	mov	r0, r3
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <LL_GPIO_SetPinPull>:
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006822:	b480      	push	{r7}
 8006824:	b089      	sub	sp, #36	; 0x24
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	607a      	str	r2, [r7, #4]
    MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	fa93 f3a3 	rbit	r3, r3
 800683c:	613b      	str	r3, [r7, #16]
  return result;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	fab3 f383 	clz	r3, r3
 8006844:	b2db      	uxtb	r3, r3
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	2103      	movs	r1, #3
 800684a:	fa01 f303 	lsl.w	r3, r1, r3
 800684e:	43db      	mvns	r3, r3
 8006850:	401a      	ands	r2, r3
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	fa93 f3a3 	rbit	r3, r3
 800685c:	61bb      	str	r3, [r7, #24]
  return result;
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	fab3 f383 	clz	r3, r3
 8006864:	b2db      	uxtb	r3, r3
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	fa01 f303 	lsl.w	r3, r1, r3
 800686e:	431a      	orrs	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	60da      	str	r2, [r3, #12]
}
 8006874:	bf00      	nop
 8006876:	3724      	adds	r7, #36	; 0x24
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <LL_GPIO_SetPinOutputType>:
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
    MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	43db      	mvns	r3, r3
 8006894:	401a      	ands	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	fb01 f303 	mul.w	r3, r1, r3
 800689e:	431a      	orrs	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	605a      	str	r2, [r3, #4]
}
 80068a4:	bf00      	nop
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <LL_GPIO_SetPinSpeed>:
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b089      	sub	sp, #36	; 0x24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
    MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	fa93 f3a3 	rbit	r3, r3
 80068ca:	613b      	str	r3, [r7, #16]
  return result;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	fab3 f383 	clz	r3, r3
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	2103      	movs	r1, #3
 80068d8:	fa01 f303 	lsl.w	r3, r1, r3
 80068dc:	43db      	mvns	r3, r3
 80068de:	401a      	ands	r2, r3
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	fa93 f3a3 	rbit	r3, r3
 80068ea:	61bb      	str	r3, [r7, #24]
  return result;
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	fab3 f383 	clz	r3, r3
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	fa01 f303 	lsl.w	r3, r1, r3
 80068fc:	431a      	orrs	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	609a      	str	r2, [r3, #8]
               (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006902:	bf00      	nop
 8006904:	3724      	adds	r7, #36	; 0x24
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <stm_pin_DisconnectDebug>:

extern const uint32_t ll_pin_defines[16];

/* Family specific implementations */
static inline void stm_pin_DisconnectDebug(PinName pin)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	4603      	mov	r3, r0
 8006916:	80fb      	strh	r3, [r7, #6]
    /* empty for now */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <stm_pin_PullConfig>:

static inline void stm_pin_PullConfig(GPIO_TypeDef *gpio, uint32_t ll_pin, uint32_t pull_config)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
    switch (pull_config) {
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d002      	beq.n	800693c <stm_pin_PullConfig+0x18>
 8006936:	2b02      	cmp	r3, #2
 8006938:	d006      	beq.n	8006948 <stm_pin_PullConfig+0x24>
 800693a:	e00b      	b.n	8006954 <stm_pin_PullConfig+0x30>
        case GPIO_PULLUP:
            LL_GPIO_SetPinPull(gpio, ll_pin, LL_GPIO_PULL_UP);
 800693c:	2201      	movs	r2, #1
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f7ff ff6e 	bl	8006822 <LL_GPIO_SetPinPull>
            break;
 8006946:	e00b      	b.n	8006960 <stm_pin_PullConfig+0x3c>
        case GPIO_PULLDOWN:
            LL_GPIO_SetPinPull(gpio, ll_pin, LL_GPIO_PULL_DOWN);
 8006948:	2202      	movs	r2, #2
 800694a:	68b9      	ldr	r1, [r7, #8]
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f7ff ff68 	bl	8006822 <LL_GPIO_SetPinPull>
            break;
 8006952:	e005      	b.n	8006960 <stm_pin_PullConfig+0x3c>
        default:
            LL_GPIO_SetPinPull(gpio, ll_pin, LL_GPIO_PULL_NO);
 8006954:	2200      	movs	r2, #0
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f7ff ff62 	bl	8006822 <LL_GPIO_SetPinPull>
            break;
 800695e:	bf00      	nop
    }
}
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <stm_pin_SetAFPin>:

static inline void stm_pin_SetAFPin(GPIO_TypeDef *gpio, PinName pin, uint32_t afnum)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	460b      	mov	r3, r1
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	817b      	strh	r3, [r7, #10]
    uint32_t ll_pin  = ll_pin_defines[STM_PIN(pin)];
 8006976:	897b      	ldrh	r3, [r7, #10]
 8006978:	f003 030f 	and.w	r3, r3, #15
 800697c:	4a0b      	ldr	r2, [pc, #44]	; (80069ac <stm_pin_SetAFPin+0x44>)
 800697e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006982:	617b      	str	r3, [r7, #20]

    if (STM_PIN(pin) > 7) {
 8006984:	897b      	ldrh	r3, [r7, #10]
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	2b07      	cmp	r3, #7
 800698c:	d905      	bls.n	800699a <stm_pin_SetAFPin+0x32>
        LL_GPIO_SetAFPin_8_15(gpio, ll_pin, afnum);
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6979      	ldr	r1, [r7, #20]
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f7ff fec9 	bl	800672a <LL_GPIO_SetAFPin_8_15>
    } else {
        LL_GPIO_SetAFPin_0_7(gpio, ll_pin, afnum);
    }
}
 8006998:	e004      	b.n	80069a4 <stm_pin_SetAFPin+0x3c>
        LL_GPIO_SetAFPin_0_7(gpio, ll_pin, afnum);
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6979      	ldr	r1, [r7, #20]
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7ff fe94 	bl	80066cc <LL_GPIO_SetAFPin_0_7>
}
 80069a4:	bf00      	nop
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	08008dd4 	.word	0x08008dd4

080069b0 <pin_function>:

/**
 * Configure pin (mode, speed, output type and pull-up/pull-down)
 */
void pin_function(PinName pin, int data)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4603      	mov	r3, r0
 80069b8:	6039      	str	r1, [r7, #0]
 80069ba:	80fb      	strh	r3, [r7, #6]
    MBED_ASSERT(pin != (PinName)NC);

    // Get the pin informations
    uint32_t mode  = STM_PIN_FUNCTION(data);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	61bb      	str	r3, [r7, #24]
    uint32_t afnum = STM_PIN_AFNUM(data);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	121b      	asrs	r3, r3, #8
 80069c8:	f003 030f 	and.w	r3, r3, #15
 80069cc:	617b      	str	r3, [r7, #20]
    uint32_t port = STM_PORT(pin);
 80069ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069d2:	091b      	lsrs	r3, r3, #4
 80069d4:	f003 030f 	and.w	r3, r3, #15
 80069d8:	613b      	str	r3, [r7, #16]
    uint32_t ll_pin  = ll_pin_defines[STM_PIN(pin)];
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	4a2f      	ldr	r2, [pc, #188]	; (8006aa0 <pin_function+0xf0>)
 80069e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069e6:	60fb      	str	r3, [r7, #12]
    uint32_t ll_mode = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	61fb      	str	r3, [r7, #28]

    // Enable GPIO clock
    GPIO_TypeDef *gpio = Set_GPIO_Clock(port);
 80069ec:	6938      	ldr	r0, [r7, #16]
 80069ee:	f7ff fd19 	bl	8006424 <Set_GPIO_Clock>
 80069f2:	60b8      	str	r0, [r7, #8]
     *  But for families like F1, speed only applies to output.
     */
#if defined (TARGET_STM32F1)
    if (mode == STM_PIN_OUTPUT) {
#endif
        LL_GPIO_SetPinSpeed(gpio, ll_pin, LL_GPIO_SPEED_FREQ_HIGH);
 80069f4:	2202      	movs	r2, #2
 80069f6:	68f9      	ldr	r1, [r7, #12]
 80069f8:	68b8      	ldr	r0, [r7, #8]
 80069fa:	f7ff ff59 	bl	80068b0 <LL_GPIO_SetPinSpeed>
#if defined (TARGET_STM32F1)
    }
#endif

    switch (mode) {
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d81e      	bhi.n	8006a42 <pin_function+0x92>
 8006a04:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <pin_function+0x5c>)
 8006a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0a:	bf00      	nop
 8006a0c:	08006a1d 	.word	0x08006a1d
 8006a10:	08006a23 	.word	0x08006a23
 8006a14:	08006a29 	.word	0x08006a29
 8006a18:	08006a3d 	.word	0x08006a3d
        case STM_PIN_INPUT:
            ll_mode = LL_GPIO_MODE_INPUT;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61fb      	str	r3, [r7, #28]
            break;
 8006a20:	e010      	b.n	8006a44 <pin_function+0x94>
        case STM_PIN_OUTPUT:
            ll_mode = LL_GPIO_MODE_OUTPUT;
 8006a22:	2301      	movs	r3, #1
 8006a24:	61fb      	str	r3, [r7, #28]
            break;
 8006a26:	e00d      	b.n	8006a44 <pin_function+0x94>
        case STM_PIN_ALTERNATE:
            ll_mode = LL_GPIO_MODE_ALTERNATE;
 8006a28:	2302      	movs	r3, #2
 8006a2a:	61fb      	str	r3, [r7, #28]
            // In case of ALT function, also set he afnum
            stm_pin_SetAFPin(gpio, pin, afnum);
 8006a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	4619      	mov	r1, r3
 8006a34:	68b8      	ldr	r0, [r7, #8]
 8006a36:	f7ff ff97 	bl	8006968 <stm_pin_SetAFPin>
            break;
 8006a3a:	e003      	b.n	8006a44 <pin_function+0x94>
        case STM_PIN_ANALOG:
            ll_mode = LL_GPIO_MODE_ANALOG;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	61fb      	str	r3, [r7, #28]
            break;
 8006a40:	e000      	b.n	8006a44 <pin_function+0x94>
        default:
            MBED_ASSERT(0);
            break;
 8006a42:	bf00      	nop
    }
    LL_GPIO_SetPinMode(gpio, ll_pin, ll_mode);
 8006a44:	69fa      	ldr	r2, [r7, #28]
 8006a46:	68f9      	ldr	r1, [r7, #12]
 8006a48:	68b8      	ldr	r0, [r7, #8]
 8006a4a:	f7ff fe9f 	bl	800678c <LL_GPIO_SetPinMode>
        LL_GPIO_DisablePinAnalogControl(gpio, ll_pin);
    }
#endif

    /*  For now by default use Speed HIGH for output or alt modes */
    if ((mode == STM_PIN_OUTPUT) || (mode == STM_PIN_ALTERNATE)) {
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d002      	beq.n	8006a5a <pin_function+0xaa>
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d10f      	bne.n	8006a7a <pin_function+0xca>
        if (STM_PIN_OD(data)) {
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	f003 0308 	and.w	r3, r3, #8
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <pin_function+0xc0>
            LL_GPIO_SetPinOutputType(gpio, ll_pin, LL_GPIO_OUTPUT_OPENDRAIN);
 8006a64:	2201      	movs	r2, #1
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	68b8      	ldr	r0, [r7, #8]
 8006a6a:	f7ff ff09 	bl	8006880 <LL_GPIO_SetPinOutputType>
 8006a6e:	e004      	b.n	8006a7a <pin_function+0xca>
        } else {
            LL_GPIO_SetPinOutputType(gpio, ll_pin, LL_GPIO_OUTPUT_PUSHPULL);
 8006a70:	2200      	movs	r2, #0
 8006a72:	68f9      	ldr	r1, [r7, #12]
 8006a74:	68b8      	ldr	r0, [r7, #8]
 8006a76:	f7ff ff03 	bl	8006880 <LL_GPIO_SetPinOutputType>
        }
    }

    stm_pin_PullConfig(gpio, ll_pin, STM_PIN_PUPD(data));
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	111b      	asrs	r3, r3, #4
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	461a      	mov	r2, r3
 8006a84:	68f9      	ldr	r1, [r7, #12]
 8006a86:	68b8      	ldr	r0, [r7, #8]
 8006a88:	f7ff ff4c 	bl	8006924 <stm_pin_PullConfig>

    stm_pin_DisconnectDebug(pin);
 8006a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff ff3c 	bl	800690e <stm_pin_DisconnectDebug>
}
 8006a96:	bf00      	nop
 8006a98:	3720      	adds	r7, #32
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	08008dd4 	.word	0x08008dd4

08006aa4 <pin_mode>:

/**
 * Configure pin pull-up/pull-down
 */
void pin_mode(PinName pin, PinMode mode)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	4603      	mov	r3, r0
 8006aac:	460a      	mov	r2, r1
 8006aae:	80fb      	strh	r3, [r7, #6]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	717b      	strb	r3, [r7, #5]
    MBED_ASSERT(pin != (PinName)NC);

    uint32_t port_index = STM_PORT(pin);
 8006ab4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ab8:	091b      	lsrs	r3, r3, #4
 8006aba:	f003 030f 	and.w	r3, r3, #15
 8006abe:	617b      	str	r3, [r7, #20]
    uint32_t ll_pin  = ll_pin_defines[STM_PIN(pin)];
 8006ac0:	88fb      	ldrh	r3, [r7, #6]
 8006ac2:	f003 030f 	and.w	r3, r3, #15
 8006ac6:	4a24      	ldr	r2, [pc, #144]	; (8006b58 <pin_mode+0xb4>)
 8006ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006acc:	613b      	str	r3, [r7, #16]
    // Enable GPIO clock
    GPIO_TypeDef *gpio = Set_GPIO_Clock(port_index);
 8006ace:	6978      	ldr	r0, [r7, #20]
 8006ad0:	f7ff fca8 	bl	8006424 <Set_GPIO_Clock>
 8006ad4:	60f8      	str	r0, [r7, #12]
    uint32_t function = LL_GPIO_GetPinMode(gpio, ll_pin);
 8006ad6:	6939      	ldr	r1, [r7, #16]
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f7ff fe86 	bl	80067ea <LL_GPIO_GetPinMode>
 8006ade:	60b8      	str	r0, [r7, #8]

    if ((function == LL_GPIO_MODE_OUTPUT) || (function == LL_GPIO_MODE_ALTERNATE)) {
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d002      	beq.n	8006aec <pin_mode+0x48>
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d113      	bne.n	8006b14 <pin_mode+0x70>
        if ((mode == OpenDrainNoPull) || (mode == OpenDrainPullUp) || (mode == OpenDrainPullDown)) {
 8006aec:	797b      	ldrb	r3, [r7, #5]
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d005      	beq.n	8006afe <pin_mode+0x5a>
 8006af2:	797b      	ldrb	r3, [r7, #5]
 8006af4:	2b03      	cmp	r3, #3
 8006af6:	d002      	beq.n	8006afe <pin_mode+0x5a>
 8006af8:	797b      	ldrb	r3, [r7, #5]
 8006afa:	2b05      	cmp	r3, #5
 8006afc:	d105      	bne.n	8006b0a <pin_mode+0x66>
            LL_GPIO_SetPinOutputType(gpio, ll_pin, LL_GPIO_OUTPUT_OPENDRAIN);
 8006afe:	2201      	movs	r2, #1
 8006b00:	6939      	ldr	r1, [r7, #16]
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f7ff febc 	bl	8006880 <LL_GPIO_SetPinOutputType>
 8006b08:	e004      	b.n	8006b14 <pin_mode+0x70>
        } else {
            LL_GPIO_SetPinOutputType(gpio, ll_pin, LL_GPIO_OUTPUT_PUSHPULL);
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	6939      	ldr	r1, [r7, #16]
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f7ff feb6 	bl	8006880 <LL_GPIO_SetPinOutputType>
        }
    }

    if ((mode == OpenDrainPullUp) || (mode == PullUp)) {
 8006b14:	797b      	ldrb	r3, [r7, #5]
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d002      	beq.n	8006b20 <pin_mode+0x7c>
 8006b1a:	797b      	ldrb	r3, [r7, #5]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d105      	bne.n	8006b2c <pin_mode+0x88>
        stm_pin_PullConfig(gpio, ll_pin, GPIO_PULLUP);
 8006b20:	2201      	movs	r2, #1
 8006b22:	6939      	ldr	r1, [r7, #16]
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff fefd 	bl	8006924 <stm_pin_PullConfig>
 8006b2a:	e010      	b.n	8006b4e <pin_mode+0xaa>
    } else if ((mode == OpenDrainPullDown) || (mode == PullDown)) {
 8006b2c:	797b      	ldrb	r3, [r7, #5]
 8006b2e:	2b05      	cmp	r3, #5
 8006b30:	d002      	beq.n	8006b38 <pin_mode+0x94>
 8006b32:	797b      	ldrb	r3, [r7, #5]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d105      	bne.n	8006b44 <pin_mode+0xa0>
        stm_pin_PullConfig(gpio, ll_pin, GPIO_PULLDOWN);
 8006b38:	2202      	movs	r2, #2
 8006b3a:	6939      	ldr	r1, [r7, #16]
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f7ff fef1 	bl	8006924 <stm_pin_PullConfig>
 8006b42:	e004      	b.n	8006b4e <pin_mode+0xaa>
    } else {
        stm_pin_PullConfig(gpio, ll_pin, GPIO_NOPULL);
 8006b44:	2200      	movs	r2, #0
 8006b46:	6939      	ldr	r1, [r7, #16]
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f7ff feeb 	bl	8006924 <stm_pin_PullConfig>
    }
}
 8006b4e:	bf00      	nop
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	08008dd4 	.word	0x08008dd4

08006b5c <debug>:
/** Output a debug message
 *
 * @param format printf-style format string, followed by variables
 */
static inline void debug(const char *format, ...)
{
 8006b5c:	b40f      	push	{r0, r1, r2, r3}
 8006b5e:	b480      	push	{r7}
 8006b60:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
    vfprintf(stderr, format, args);
    va_end(args);
#endif
}
 8006b62:	bf00      	nop
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	b004      	add	sp, #16
 8006b6c:	4770      	bx	lr
	...

08006b70 <serial_init>:
// Utility functions
HAL_StatusTypeDef init_uart(serial_t *obj);
int8_t get_uart_index(UARTName uart_name);

void serial_init(serial_t *obj, PinName tx, PinName rx)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08a      	sub	sp, #40	; 0x28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	807b      	strh	r3, [r7, #2]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	803b      	strh	r3, [r7, #0]
    struct serial_s *obj_s = SERIAL_S(obj);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	623b      	str	r3, [r7, #32]
    uint8_t stdio_config = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Determine the UART to use (UART_1, UART_2, ...)
    UARTName uart_tx = (UARTName)pinmap_peripheral(tx, PinMap_UART_TX);
 8006b8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b8e:	495b      	ldr	r1, [pc, #364]	; (8006cfc <serial_init+0x18c>)
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fc f9cf 	bl	8002f34 <pinmap_peripheral>
 8006b96:	61f8      	str	r0, [r7, #28]
    UARTName uart_rx = (UARTName)pinmap_peripheral(rx, PinMap_UART_RX);
 8006b98:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006b9c:	4958      	ldr	r1, [pc, #352]	; (8006d00 <serial_init+0x190>)
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fc f9c8 	bl	8002f34 <pinmap_peripheral>
 8006ba4:	61b8      	str	r0, [r7, #24]

    // Get the peripheral name (UART_1, UART_2, ...) from the pin and assign it to the object
    obj_s->uart = (UARTName)pinmap_merge(uart_tx, uart_rx);
 8006ba6:	69b9      	ldr	r1, [r7, #24]
 8006ba8:	69f8      	ldr	r0, [r7, #28]
 8006baa:	f7fc f979 	bl	8002ea0 <pinmap_merge>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	601a      	str	r2, [r3, #0]
    MBED_ASSERT(obj_s->uart != (UARTName)NC);

    if ((tx == STDIO_UART_TX) || (rx == STDIO_UART_RX)) {
 8006bb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d003      	beq.n	8006bc4 <serial_init+0x54>
 8006bbc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d103      	bne.n	8006bcc <serial_init+0x5c>
        stdio_config = 1;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006bca:	e00a      	b.n	8006be2 <serial_init+0x72>
    } else {
        if (uart_tx == pinmap_peripheral(STDIO_UART_TX, PinMap_UART_TX)) {
 8006bcc:	494b      	ldr	r1, [pc, #300]	; (8006cfc <serial_init+0x18c>)
 8006bce:	2002      	movs	r0, #2
 8006bd0:	f7fc f9b0 	bl	8002f34 <pinmap_peripheral>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d102      	bne.n	8006be2 <serial_init+0x72>
            error("Error: new serial object is using same UART as STDIO");
 8006bdc:	4849      	ldr	r0, [pc, #292]	; (8006d04 <serial_init+0x194>)
 8006bde:	f7fd fa6d 	bl	80040bc <error>
        }
    }

    // Reset and enable clock
#if defined(USART1_BASE)
    if (obj_s->uart == UART_1) {
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a48      	ldr	r2, [pc, #288]	; (8006d08 <serial_init+0x198>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d10d      	bne.n	8006c08 <serial_init+0x98>
        __HAL_RCC_USART1_CLK_ENABLE();
 8006bec:	2300      	movs	r3, #0
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	4b46      	ldr	r3, [pc, #280]	; (8006d0c <serial_init+0x19c>)
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf4:	4a45      	ldr	r2, [pc, #276]	; (8006d0c <serial_init+0x19c>)
 8006bf6:	f043 0310 	orr.w	r3, r3, #16
 8006bfa:	6453      	str	r3, [r2, #68]	; 0x44
 8006bfc:	4b43      	ldr	r3, [pc, #268]	; (8006d0c <serial_init+0x19c>)
 8006bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c00:	f003 0310 	and.w	r3, r3, #16
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	697b      	ldr	r3, [r7, #20]
    }
#endif

#if defined (USART2_BASE)
    if (obj_s->uart == UART_2) {
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a40      	ldr	r2, [pc, #256]	; (8006d10 <serial_init+0x1a0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d10d      	bne.n	8006c2e <serial_init+0xbe>
        __HAL_RCC_USART2_CLK_ENABLE();
 8006c12:	2300      	movs	r3, #0
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	4b3d      	ldr	r3, [pc, #244]	; (8006d0c <serial_init+0x19c>)
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	4a3c      	ldr	r2, [pc, #240]	; (8006d0c <serial_init+0x19c>)
 8006c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c20:	6413      	str	r3, [r2, #64]	; 0x40
 8006c22:	4b3a      	ldr	r3, [pc, #232]	; (8006d0c <serial_init+0x19c>)
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2a:	613b      	str	r3, [r7, #16]
 8006c2c:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_USART5_CLK_ENABLE();
    }
#endif

#if defined(USART6_BASE)
    if (obj_s->uart == UART_6) {
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a38      	ldr	r2, [pc, #224]	; (8006d14 <serial_init+0x1a4>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d10d      	bne.n	8006c54 <serial_init+0xe4>
        __HAL_RCC_USART6_CLK_ENABLE();
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	4b33      	ldr	r3, [pc, #204]	; (8006d0c <serial_init+0x19c>)
 8006c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c40:	4a32      	ldr	r2, [pc, #200]	; (8006d0c <serial_init+0x19c>)
 8006c42:	f043 0320 	orr.w	r3, r3, #32
 8006c46:	6453      	str	r3, [r2, #68]	; 0x44
 8006c48:	4b30      	ldr	r3, [pc, #192]	; (8006d0c <serial_init+0x19c>)
 8006c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_LPUART1_CLK_ENABLE();
    }
#endif

    // Assign serial object index
    obj_s->index = get_uart_index(obj_s->uart);
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 f91f 	bl	8006e9c <get_uart_index>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	461a      	mov	r2, r3
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	605a      	str	r2, [r3, #4]
    MBED_ASSERT(obj_s->index >= 0);

    // Configure UART pins
    pinmap_pinout(tx, PinMap_UART_TX);
 8006c66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c6a:	4924      	ldr	r1, [pc, #144]	; (8006cfc <serial_init+0x18c>)
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fc f8db 	bl	8002e28 <pinmap_pinout>
    pinmap_pinout(rx, PinMap_UART_RX);
 8006c72:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006c76:	4922      	ldr	r1, [pc, #136]	; (8006d00 <serial_init+0x190>)
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fc f8d5 	bl	8002e28 <pinmap_pinout>

    if (tx != NC) {
 8006c7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c86:	d005      	beq.n	8006c94 <serial_init+0x124>
        pin_mode(tx, PullUp);
 8006c88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff ff08 	bl	8006aa4 <pin_mode>
    }
    if (rx != NC) {
 8006c94:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d005      	beq.n	8006caa <serial_init+0x13a>
        pin_mode(rx, PullUp);
 8006c9e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff fefd 	bl	8006aa4 <pin_mode>
    }

    // Configure UART
    obj_s->baudrate = 9600; // baudrate default value
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006cb0:	609a      	str	r2, [r3, #8]
    } else {
#if MBED_CONF_PLATFORM_DEFAULT_SERIAL_BAUD_RATE
        obj_s->baudrate = MBED_CONF_PLATFORM_DEFAULT_SERIAL_BAUD_RATE; // baudrate takes value from platform/mbed_lib.json
#endif /* MBED_CONF_PLATFORM_DEFAULT_SERIAL_BAUD_RATE */
    }
    obj_s->databits = UART_WORDLENGTH_8B;
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	60da      	str	r2, [r3, #12]
    obj_s->stopbits = UART_STOPBITS_1;
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	611a      	str	r2, [r3, #16]
    obj_s->parity   = UART_PARITY_NONE;
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	615a      	str	r2, [r3, #20]

#if DEVICE_SERIAL_FC
    obj_s->hw_flow_ctl = UART_HWCONTROL_NONE;
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	621a      	str	r2, [r3, #32]
#endif

    obj_s->pin_tx = tx;
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	887a      	ldrh	r2, [r7, #2]
 8006cce:	831a      	strh	r2, [r3, #24]
    obj_s->pin_rx = rx;
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	883a      	ldrh	r2, [r7, #0]
 8006cd4:	835a      	strh	r2, [r3, #26]

    init_uart(obj); /* init_uart will be called again in serial_baud function, so don't worry if init_uart returns HAL_ERROR */
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f88a 	bl	8006df0 <init_uart>

    // For stdio management in platform/mbed_board.c and platform/mbed_retarget.cpp
    if (stdio_config) {
 8006cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d007      	beq.n	8006cf4 <serial_init+0x184>
        stdio_uart_inited = 1;
 8006ce4:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <serial_init+0x1a8>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
        memcpy(&stdio_uart, obj, sizeof(serial_t));
 8006cea:	224c      	movs	r2, #76	; 0x4c
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	480b      	ldr	r0, [pc, #44]	; (8006d1c <serial_init+0x1ac>)
 8006cf0:	f000 fdc6 	bl	8007880 <memcpy>
    }
}
 8006cf4:	bf00      	nop
 8006cf6:	3728      	adds	r7, #40	; 0x28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	08008d2c 	.word	0x08008d2c
 8006d00:	08008d74 	.word	0x08008d74
 8006d04:	0800894c 	.word	0x0800894c
 8006d08:	40011000 	.word	0x40011000
 8006d0c:	40023800 	.word	0x40023800
 8006d10:	40004400 	.word	0x40004400
 8006d14:	40011400 	.word	0x40011400
 8006d18:	20000550 	.word	0x20000550
 8006d1c:	200006b0 	.word	0x200006b0

08006d20 <serial_baud>:

    serial_irq_ids[obj_s->index] = 0;
}

void serial_baud(serial_t *obj, int baudrate)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
    struct serial_s *obj_s = SERIAL_S(obj);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	60fb      	str	r3, [r7, #12]

    obj_s->baudrate = baudrate;
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	609a      	str	r2, [r3, #8]
        PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
        HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
    }
#endif /* LPUART1_BASE */

    if (init_uart(obj) != HAL_OK) {
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f85b 	bl	8006df0 <init_uart>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <serial_baud+0x28>
        debug("Cannot initialize UART with baud rate %u\n", baudrate);
 8006d40:	6839      	ldr	r1, [r7, #0]
 8006d42:	4803      	ldr	r0, [pc, #12]	; (8006d50 <serial_baud+0x30>)
 8006d44:	f7ff ff0a 	bl	8006b5c <debug>
    }
}
 8006d48:	bf00      	nop
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	08008984 	.word	0x08008984

08006d54 <serial_readable>:
/******************************************************************************
 * READ/WRITE
 ******************************************************************************/

int serial_readable(serial_t *obj)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
    struct serial_s *obj_s = SERIAL_S(obj);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	617b      	str	r3, [r7, #20]
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	019b      	lsls	r3, r3, #6
 8006d66:	4a12      	ldr	r2, [pc, #72]	; (8006db0 <serial_readable+0x5c>)
 8006d68:	4413      	add	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]
    /*  To avoid a target blocking case, let's check for
     *  possible OVERRUN error and discard it
     */
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	d10a      	bne.n	8006d90 <serial_readable+0x3c>
        __HAL_UART_CLEAR_OREFLAG(huart);
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
    }
    // Check if data is received
    return (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE) != RESET) ? 1 : 0;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	bf0c      	ite	eq
 8006d9e:	2301      	moveq	r3, #1
 8006da0:	2300      	movne	r3, #0
 8006da2:	b2db      	uxtb	r3, r3
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	200005ec 	.word	0x200005ec

08006db4 <serial_writable>:

int serial_writable(serial_t *obj)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
    struct serial_s *obj_s = SERIAL_S(obj);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	019b      	lsls	r3, r3, #6
 8006dc6:	4a09      	ldr	r2, [pc, #36]	; (8006dec <serial_writable+0x38>)
 8006dc8:	4413      	add	r3, r2
 8006dca:	60bb      	str	r3, [r7, #8]

    // Check if data is transmitted
    return (__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE) != RESET) ? 1 : 0;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd6:	2b80      	cmp	r3, #128	; 0x80
 8006dd8:	bf0c      	ite	eq
 8006dda:	2301      	moveq	r3, #1
 8006ddc:	2300      	movne	r3, #0
 8006dde:	b2db      	uxtb	r3, r3
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	200005ec 	.word	0x200005ec

08006df0 <init_uart>:
/******************************************************************************
 * UTILITY FUNCTIONS
 ******************************************************************************/

HAL_StatusTypeDef init_uart(serial_t *obj)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
    struct serial_s *obj_s = SERIAL_S(obj);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	019b      	lsls	r3, r3, #6
 8006e02:	4a25      	ldr	r2, [pc, #148]	; (8006e98 <init_uart+0xa8>)
 8006e04:	4413      	add	r3, r2
 8006e06:	60bb      	str	r3, [r7, #8]
    huart->Instance = (USART_TypeDef *)(obj_s->uart);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	601a      	str	r2, [r3, #0]

    huart->Init.BaudRate     = obj_s->baudrate;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	689a      	ldr	r2, [r3, #8]
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	605a      	str	r2, [r3, #4]
    huart->Init.WordLength   = obj_s->databits;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	609a      	str	r2, [r3, #8]
    huart->Init.StopBits     = obj_s->stopbits;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	691a      	ldr	r2, [r3, #16]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	60da      	str	r2, [r3, #12]
    huart->Init.Parity       = obj_s->parity;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	695a      	ldr	r2, [r3, #20]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	611a      	str	r2, [r3, #16]
#if DEVICE_SERIAL_FC
    huart->Init.HwFlowCtl    = obj_s->hw_flow_ctl;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a1a      	ldr	r2, [r3, #32]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	619a      	str	r2, [r3, #24]
#else
    huart->Init.HwFlowCtl    = UART_HWCONTROL_NONE;
#endif
    huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	61da      	str	r2, [r3, #28]
    huart->TxXferCount       = 0;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2200      	movs	r2, #0
 8006e44:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->TxXferSize        = 0;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->RxXferCount       = 0;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	85da      	strh	r2, [r3, #46]	; 0x2e
    huart->RxXferSize        = 0;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2200      	movs	r2, #0
 8006e56:	859a      	strh	r2, [r3, #44]	; 0x2c

    if (obj_s->pin_rx == NC) {
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8006e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e62:	d103      	bne.n	8006e6c <init_uart+0x7c>
        huart->Init.Mode = UART_MODE_TX;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2208      	movs	r2, #8
 8006e68:	615a      	str	r2, [r3, #20]
 8006e6a:	e00c      	b.n	8006e86 <init_uart+0x96>
    } else if (obj_s->pin_tx == NC) {
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e76:	d103      	bne.n	8006e80 <init_uart+0x90>
        huart->Init.Mode = UART_MODE_RX;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	615a      	str	r2, [r3, #20]
 8006e7e:	e002      	b.n	8006e86 <init_uart+0x96>
    } else {
        huart->Init.Mode = UART_MODE_TX_RX;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	220c      	movs	r2, #12
 8006e84:	615a      	str	r2, [r3, #20]
            HAL_UARTEx_DisableStopMode(huart);
        }
    }
#endif

    return HAL_UART_Init(huart);
 8006e86:	68b8      	ldr	r0, [r7, #8]
 8006e88:	f7ff f833 	bl	8005ef2 <HAL_UART_Init>
 8006e8c:	4603      	mov	r3, r0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	200005ec 	.word	0x200005ec

08006e9c <get_uart_index>:

int8_t get_uart_index(UARTName uart_name)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
    uint8_t index = 0;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	73fb      	strb	r3, [r7, #15]

#if defined(USART1_BASE)
    if (uart_name == UART_1) {
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a12      	ldr	r2, [pc, #72]	; (8006ef4 <get_uart_index+0x58>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d102      	bne.n	8006eb6 <get_uart_index+0x1a>
        return index;
 8006eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eb4:	e018      	b.n	8006ee8 <get_uart_index+0x4c>
    }
    index++;
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	73fb      	strb	r3, [r7, #15]
#endif

#if defined(USART2_BASE)
    if (uart_name == UART_2) {
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a0e      	ldr	r2, [pc, #56]	; (8006ef8 <get_uart_index+0x5c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d102      	bne.n	8006eca <get_uart_index+0x2e>
        return index;
 8006ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ec8:	e00e      	b.n	8006ee8 <get_uart_index+0x4c>
    }
    index++;
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	73fb      	strb	r3, [r7, #15]
    }
    index++;
#endif

#if defined(USART6_BASE)
    if (uart_name == UART_6) {
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a0a      	ldr	r2, [pc, #40]	; (8006efc <get_uart_index+0x60>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d102      	bne.n	8006ede <get_uart_index+0x42>
        return index;
 8006ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006edc:	e004      	b.n	8006ee8 <get_uart_index+0x4c>
    }
    index++;
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	73fb      	strb	r3, [r7, #15]
        return index;
    }
    index++;
#endif

    return -1;
 8006ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	40011000 	.word	0x40011000
 8006ef8:	40004400 	.word	0x40004400
 8006efc:	40011400 	.word	0x40011400

08006f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	db0b      	blt.n	8006f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f12:	79fb      	ldrb	r3, [r7, #7]
 8006f14:	f003 021f 	and.w	r2, r3, #31
 8006f18:	4907      	ldr	r1, [pc, #28]	; (8006f38 <__NVIC_EnableIRQ+0x38>)
 8006f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	2001      	movs	r0, #1
 8006f22:	fa00 f202 	lsl.w	r2, r0, r2
 8006f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	e000e100 	.word	0xe000e100

08006f3c <LL_TIM_GenerateEvent_CC1>:
  * @rmtoll EGR          CC1G          LL_TIM_GenerateEvent_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_CC1(TIM_TypeDef *TIMx)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_CC1G);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	f043 0202 	orr.w	r2, r3, #2
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	615a      	str	r2, [r3, #20]
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <us_ticker_get_info>:
uint32_t timer_cnt_reg;
uint32_t timer_ccr1_reg;
uint32_t timer_dier_reg;

const ticker_info_t *us_ticker_get_info()
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
    static const ticker_info_t info = {
        1000000,
        TIM_MST_BIT_WIDTH
    };
    return &info;
 8006f60:	4b02      	ldr	r3, [pc, #8]	; (8006f6c <us_ticker_get_info+0x10>)
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	08008e14 	.word	0x08008e14

08006f70 <timer_irq_handler>:

// ************************************ 32-bit timer ************************************
#else

void timer_irq_handler(void)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
    TimMasterHandle.Instance = TIM_MST;
 8006f74:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <timer_irq_handler+0x38>)
 8006f76:	4a0d      	ldr	r2, [pc, #52]	; (8006fac <timer_irq_handler+0x3c>)
 8006f78:	601a      	str	r2, [r3, #0]
    if (__HAL_TIM_GET_FLAG(&TimMasterHandle, TIM_FLAG_CC1) == SET) {
 8006f7a:	4b0b      	ldr	r3, [pc, #44]	; (8006fa8 <timer_irq_handler+0x38>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d10d      	bne.n	8006fa4 <timer_irq_handler+0x34>
        if (__HAL_TIM_GET_IT_SOURCE(&TimMasterHandle, TIM_IT_CC1) == SET) {
 8006f88:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <timer_irq_handler+0x38>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d106      	bne.n	8006fa4 <timer_irq_handler+0x34>
            __HAL_TIM_CLEAR_IT(&TimMasterHandle, TIM_IT_CC1);
 8006f96:	4b04      	ldr	r3, [pc, #16]	; (8006fa8 <timer_irq_handler+0x38>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f06f 0202 	mvn.w	r2, #2
 8006f9e:	611a      	str	r2, [r3, #16]
            us_ticker_irq_handler();
 8006fa0:	f7fc fbec 	bl	800377c <us_ticker_irq_handler>
        }
    }
}
 8006fa4:	bf00      	nop
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	20000700 	.word	0x20000700
 8006fac:	40000c00 	.word	0x40000c00

08006fb0 <init_32bit_timer>:

void init_32bit_timer(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af00      	add	r7, sp, #0
    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    uint32_t PclkFreq;

    // Get clock configuration
    // Note: PclkFreq contains here the Latency (not used after)
    HAL_RCC_GetClockConfig(&RCC_ClkInitStruct, &PclkFreq);
 8006fb6:	f107 0208 	add.w	r2, r7, #8
 8006fba:	f107 030c 	add.w	r3, r7, #12
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fe fe5f 	bl	8005c84 <HAL_RCC_GetClockConfig>

    // Get timer clock value
#if TIM_MST_PCLK == 1
    PclkFreq = HAL_RCC_GetPCLK1Freq();
 8006fc6:	f7fe fe35 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	60bb      	str	r3, [r7, #8]
#else
    PclkFreq = HAL_RCC_GetPCLK2Freq();
#endif

    // Enable timer clock
    TIM_MST_RCC;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	607b      	str	r3, [r7, #4]
 8006fd2:	4b2e      	ldr	r3, [pc, #184]	; (800708c <init_32bit_timer+0xdc>)
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	4a2d      	ldr	r2, [pc, #180]	; (800708c <init_32bit_timer+0xdc>)
 8006fd8:	f043 0308 	orr.w	r3, r3, #8
 8006fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8006fde:	4b2b      	ldr	r3, [pc, #172]	; (800708c <init_32bit_timer+0xdc>)
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	f003 0308 	and.w	r3, r3, #8
 8006fe6:	607b      	str	r3, [r7, #4]
 8006fe8:	687b      	ldr	r3, [r7, #4]

    // Reset timer
    TIM_MST_RESET_ON;
 8006fea:	4b28      	ldr	r3, [pc, #160]	; (800708c <init_32bit_timer+0xdc>)
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	4a27      	ldr	r2, [pc, #156]	; (800708c <init_32bit_timer+0xdc>)
 8006ff0:	f043 0308 	orr.w	r3, r3, #8
 8006ff4:	6213      	str	r3, [r2, #32]
    TIM_MST_RESET_OFF;
 8006ff6:	4b25      	ldr	r3, [pc, #148]	; (800708c <init_32bit_timer+0xdc>)
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	4a24      	ldr	r2, [pc, #144]	; (800708c <init_32bit_timer+0xdc>)
 8006ffc:	f023 0308 	bic.w	r3, r3, #8
 8007000:	6213      	str	r3, [r2, #32]

    // Configure time base
    TimMasterHandle.Instance    = TIM_MST;
 8007002:	4b23      	ldr	r3, [pc, #140]	; (8007090 <init_32bit_timer+0xe0>)
 8007004:	4a23      	ldr	r2, [pc, #140]	; (8007094 <init_32bit_timer+0xe4>)
 8007006:	601a      	str	r2, [r3, #0]
    TimMasterHandle.Init.Period = 0xFFFFFFFF;
 8007008:	4b21      	ldr	r3, [pc, #132]	; (8007090 <init_32bit_timer+0xe0>)
 800700a:	f04f 32ff 	mov.w	r2, #4294967295
 800700e:	60da      	str	r2, [r3, #12]

    // TIMxCLK = PCLKx when the APB prescaler = 1 else TIMxCLK = 2 * PCLKx
#if TIM_MST_PCLK == 1
    if (RCC_ClkInitStruct.APB1CLKDivider == RCC_HCLK_DIV1) {
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10a      	bne.n	800702c <init_32bit_timer+0x7c>
#else
    if (RCC_ClkInitStruct.APB2CLKDivider == RCC_HCLK_DIV1) {
#endif
        TimMasterHandle.Init.Prescaler   = (uint16_t)((PclkFreq) / 1000000) - 1; // 1 us tick
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	4a1f      	ldr	r2, [pc, #124]	; (8007098 <init_32bit_timer+0xe8>)
 800701a:	fba2 2303 	umull	r2, r3, r2, r3
 800701e:	0c9b      	lsrs	r3, r3, #18
 8007020:	b29b      	uxth	r3, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	461a      	mov	r2, r3
 8007026:	4b1a      	ldr	r3, [pc, #104]	; (8007090 <init_32bit_timer+0xe0>)
 8007028:	605a      	str	r2, [r3, #4]
 800702a:	e00a      	b.n	8007042 <init_32bit_timer+0x92>
    } else {
        TimMasterHandle.Init.Prescaler   = (uint16_t)((PclkFreq * 2) / 1000000) - 1; // 1 us tick
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	4a19      	ldr	r2, [pc, #100]	; (8007098 <init_32bit_timer+0xe8>)
 8007032:	fba2 2303 	umull	r2, r3, r2, r3
 8007036:	0c9b      	lsrs	r3, r3, #18
 8007038:	b29b      	uxth	r3, r3
 800703a:	3b01      	subs	r3, #1
 800703c:	461a      	mov	r2, r3
 800703e:	4b14      	ldr	r3, [pc, #80]	; (8007090 <init_32bit_timer+0xe0>)
 8007040:	605a      	str	r2, [r3, #4]
    }

    TimMasterHandle.Init.ClockDivision     = 0;
 8007042:	4b13      	ldr	r3, [pc, #76]	; (8007090 <init_32bit_timer+0xe0>)
 8007044:	2200      	movs	r2, #0
 8007046:	611a      	str	r2, [r3, #16]
    TimMasterHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8007048:	4b11      	ldr	r3, [pc, #68]	; (8007090 <init_32bit_timer+0xe0>)
 800704a:	2200      	movs	r2, #0
 800704c:	609a      	str	r2, [r3, #8]
#if !TARGET_STM32L1
    TimMasterHandle.Init.RepetitionCounter = 0;
 800704e:	4b10      	ldr	r3, [pc, #64]	; (8007090 <init_32bit_timer+0xe0>)
 8007050:	2200      	movs	r2, #0
 8007052:	615a      	str	r2, [r3, #20]
#endif
#ifdef TIM_AUTORELOAD_PRELOAD_DISABLE
    TimMasterHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
#endif
    HAL_TIM_OC_Init(&TimMasterHandle);
 8007054:	480e      	ldr	r0, [pc, #56]	; (8007090 <init_32bit_timer+0xe0>)
 8007056:	f7fe fe47 	bl	8005ce8 <HAL_TIM_OC_Init>

    NVIC_SetVector(TIM_MST_IRQ, (uint32_t)timer_irq_handler);
 800705a:	4b10      	ldr	r3, [pc, #64]	; (800709c <init_32bit_timer+0xec>)
 800705c:	4619      	mov	r1, r3
 800705e:	2032      	movs	r0, #50	; 0x32
 8007060:	f7fd ff80 	bl	8004f64 <NVIC_SetVector>
    NVIC_EnableIRQ(TIM_MST_IRQ);
 8007064:	2032      	movs	r0, #50	; 0x32
 8007066:	f7ff ff4b 	bl	8006f00 <__NVIC_EnableIRQ>

    // Channel 1 for mbed timeout
    HAL_TIM_OC_Start(&TimMasterHandle, TIM_CHANNEL_1);
 800706a:	2100      	movs	r1, #0
 800706c:	4808      	ldr	r0, [pc, #32]	; (8007090 <init_32bit_timer+0xe0>)
 800706e:	f7fe fe71 	bl	8005d54 <HAL_TIM_OC_Start>
    // Define the FREEZE_TIMER_ON_DEBUG macro in mbed_app.json for example
#if !defined(NDEBUG) && defined(FREEZE_TIMER_ON_DEBUG) && defined(TIM_MST_DBGMCU_FREEZE)
    TIM_MST_DBGMCU_FREEZE;
#endif

    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 8007072:	4b07      	ldr	r3, [pc, #28]	; (8007090 <init_32bit_timer+0xe0>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68da      	ldr	r2, [r3, #12]
 8007078:	4b05      	ldr	r3, [pc, #20]	; (8007090 <init_32bit_timer+0xe0>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0202 	bic.w	r2, r2, #2
 8007080:	60da      	str	r2, [r3, #12]
}
 8007082:	bf00      	nop
 8007084:	3720      	adds	r7, #32
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	40023800 	.word	0x40023800
 8007090:	20000700 	.word	0x20000700
 8007094:	40000c00 	.word	0x40000c00
 8007098:	431bde83 	.word	0x431bde83
 800709c:	08006f71 	.word	0x08006f71

080070a0 <us_ticker_init>:

#endif // 16-bit/32-bit timer

void us_ticker_init(void)
{
 80070a0:	b480      	push	{r7}
 80070a2:	af00      	add	r7, sp, #0
    // Timer is already initialized in HAL_InitTick()
    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 80070a4:	4b06      	ldr	r3, [pc, #24]	; (80070c0 <us_ticker_init+0x20>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <us_ticker_init+0x20>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0202 	bic.w	r2, r2, #2
 80070b2:	60da      	str	r2, [r3, #12]
}
 80070b4:	bf00      	nop
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	20000700 	.word	0x20000700

080070c4 <us_ticker_read>:

uint32_t us_ticker_read()
{
 80070c4:	b480      	push	{r7}
 80070c6:	af00      	add	r7, sp, #0
    return TIM_MST->CNT;
 80070c8:	4b03      	ldr	r3, [pc, #12]	; (80070d8 <us_ticker_read+0x14>)
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	40000c00 	.word	0x40000c00

080070dc <us_ticker_set_interrupt>:

void us_ticker_set_interrupt(timestamp_t timestamp)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
    // NOTE: This function must be called with interrupts disabled to keep our
    //       timer interrupt setup atomic
    // Set new output compare value
    __HAL_TIM_SET_COMPARE(&TimMasterHandle, TIM_CHANNEL_1, (uint32_t)timestamp);
 80070e4:	4b0b      	ldr	r3, [pc, #44]	; (8007114 <us_ticker_set_interrupt+0x38>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	635a      	str	r2, [r3, #52]	; 0x34
    // Ensure the compare event starts clear
    __HAL_TIM_CLEAR_FLAG(&TimMasterHandle, TIM_FLAG_CC1);
 80070ec:	4b09      	ldr	r3, [pc, #36]	; (8007114 <us_ticker_set_interrupt+0x38>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f06f 0202 	mvn.w	r2, #2
 80070f4:	611a      	str	r2, [r3, #16]
    // Enable IT
    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 80070f6:	4b07      	ldr	r3, [pc, #28]	; (8007114 <us_ticker_set_interrupt+0x38>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	4b05      	ldr	r3, [pc, #20]	; (8007114 <us_ticker_set_interrupt+0x38>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f042 0202 	orr.w	r2, r2, #2
 8007104:	60da      	str	r2, [r3, #12]
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	20000700 	.word	0x20000700

08007118 <us_ticker_fire_interrupt>:

void us_ticker_fire_interrupt(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
    __HAL_TIM_CLEAR_FLAG(&TimMasterHandle, TIM_FLAG_CC1);
 800711c:	4b09      	ldr	r3, [pc, #36]	; (8007144 <us_ticker_fire_interrupt+0x2c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f06f 0202 	mvn.w	r2, #2
 8007124:	611a      	str	r2, [r3, #16]
    LL_TIM_GenerateEvent_CC1(TimMasterHandle.Instance);
 8007126:	4b07      	ldr	r3, [pc, #28]	; (8007144 <us_ticker_fire_interrupt+0x2c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4618      	mov	r0, r3
 800712c:	f7ff ff06 	bl	8006f3c <LL_TIM_GenerateEvent_CC1>
    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 8007130:	4b04      	ldr	r3, [pc, #16]	; (8007144 <us_ticker_fire_interrupt+0x2c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	4b03      	ldr	r3, [pc, #12]	; (8007144 <us_ticker_fire_interrupt+0x2c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0202 	orr.w	r2, r2, #2
 800713e:	60da      	str	r2, [r3, #12]
}
 8007140:	bf00      	nop
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20000700 	.word	0x20000700

08007148 <us_ticker_disable_interrupt>:

void us_ticker_disable_interrupt(void)
{
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0
    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 800714c:	4b06      	ldr	r3, [pc, #24]	; (8007168 <us_ticker_disable_interrupt+0x20>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68da      	ldr	r2, [r3, #12]
 8007152:	4b05      	ldr	r3, [pc, #20]	; (8007168 <us_ticker_disable_interrupt+0x20>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0202 	bic.w	r2, r2, #2
 800715a:	60da      	str	r2, [r3, #12]
}
 800715c:	bf00      	nop
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	20000700 	.word	0x20000700

0800716c <us_ticker_clear_interrupt>:

/* NOTE: must be called with interrupts disabled! */
void us_ticker_clear_interrupt(void)
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
    __HAL_TIM_CLEAR_FLAG(&TimMasterHandle, TIM_FLAG_CC1);
 8007170:	4b04      	ldr	r3, [pc, #16]	; (8007184 <us_ticker_clear_interrupt+0x18>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f06f 0202 	mvn.w	r2, #2
 8007178:	611a      	str	r2, [r3, #16]
}
 800717a:	bf00      	nop
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	20000700 	.word	0x20000700

08007188 <_ZdlPvj>:
 8007188:	f7fd be5e 	b.w	8004e48 <_ZdlPv>

0800718c <atexit>:
 800718c:	2300      	movs	r3, #0
 800718e:	4601      	mov	r1, r0
 8007190:	461a      	mov	r2, r3
 8007192:	4618      	mov	r0, r3
 8007194:	f001 b914 	b.w	80083c0 <__register_exitproc>

08007198 <__errno>:
 8007198:	4b01      	ldr	r3, [pc, #4]	; (80071a0 <__errno+0x8>)
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	2000030c 	.word	0x2000030c

080071a4 <exit>:
 80071a4:	b508      	push	{r3, lr}
 80071a6:	4b07      	ldr	r3, [pc, #28]	; (80071c4 <exit+0x20>)
 80071a8:	4604      	mov	r4, r0
 80071aa:	b113      	cbz	r3, 80071b2 <exit+0xe>
 80071ac:	2100      	movs	r1, #0
 80071ae:	f001 f96b 	bl	8008488 <__call_exitprocs>
 80071b2:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <exit+0x24>)
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80071b8:	b103      	cbz	r3, 80071bc <exit+0x18>
 80071ba:	4798      	blx	r3
 80071bc:	4620      	mov	r0, r4
 80071be:	f7fd fde6 	bl	8004d8e <_exit>
 80071c2:	bf00      	nop
 80071c4:	08008489 	.word	0x08008489
 80071c8:	08008e7c 	.word	0x08008e7c

080071cc <_fclose_r>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	4605      	mov	r5, r0
 80071d0:	460c      	mov	r4, r1
 80071d2:	b911      	cbnz	r1, 80071da <_fclose_r+0xe>
 80071d4:	2600      	movs	r6, #0
 80071d6:	4630      	mov	r0, r6
 80071d8:	bd70      	pop	{r4, r5, r6, pc}
 80071da:	b118      	cbz	r0, 80071e4 <_fclose_r+0x18>
 80071dc:	6983      	ldr	r3, [r0, #24]
 80071de:	b90b      	cbnz	r3, 80071e4 <_fclose_r+0x18>
 80071e0:	f000 f950 	bl	8007484 <__sinit>
 80071e4:	4b1f      	ldr	r3, [pc, #124]	; (8007264 <_fclose_r+0x98>)
 80071e6:	429c      	cmp	r4, r3
 80071e8:	d132      	bne.n	8007250 <_fclose_r+0x84>
 80071ea:	686c      	ldr	r4, [r5, #4]
 80071ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d0ef      	beq.n	80071d4 <_fclose_r+0x8>
 80071f4:	4621      	mov	r1, r4
 80071f6:	4628      	mov	r0, r5
 80071f8:	f000 f842 	bl	8007280 <__sflush_r>
 80071fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80071fe:	4606      	mov	r6, r0
 8007200:	b133      	cbz	r3, 8007210 <_fclose_r+0x44>
 8007202:	6a21      	ldr	r1, [r4, #32]
 8007204:	4628      	mov	r0, r5
 8007206:	4798      	blx	r3
 8007208:	2800      	cmp	r0, #0
 800720a:	bfb8      	it	lt
 800720c:	f04f 36ff 	movlt.w	r6, #4294967295
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	061b      	lsls	r3, r3, #24
 8007214:	d503      	bpl.n	800721e <_fclose_r+0x52>
 8007216:	6921      	ldr	r1, [r4, #16]
 8007218:	4628      	mov	r0, r5
 800721a:	f000 fb45 	bl	80078a8 <_free_r>
 800721e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007220:	b141      	cbz	r1, 8007234 <_fclose_r+0x68>
 8007222:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007226:	4299      	cmp	r1, r3
 8007228:	d002      	beq.n	8007230 <_fclose_r+0x64>
 800722a:	4628      	mov	r0, r5
 800722c:	f000 fb3c 	bl	80078a8 <_free_r>
 8007230:	2300      	movs	r3, #0
 8007232:	6363      	str	r3, [r4, #52]	; 0x34
 8007234:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007236:	b121      	cbz	r1, 8007242 <_fclose_r+0x76>
 8007238:	4628      	mov	r0, r5
 800723a:	f000 fb35 	bl	80078a8 <_free_r>
 800723e:	2300      	movs	r3, #0
 8007240:	64a3      	str	r3, [r4, #72]	; 0x48
 8007242:	f000 f98b 	bl	800755c <__sfp_lock_acquire>
 8007246:	2300      	movs	r3, #0
 8007248:	81a3      	strh	r3, [r4, #12]
 800724a:	f000 f988 	bl	800755e <__sfp_lock_release>
 800724e:	e7c2      	b.n	80071d6 <_fclose_r+0xa>
 8007250:	4b05      	ldr	r3, [pc, #20]	; (8007268 <_fclose_r+0x9c>)
 8007252:	429c      	cmp	r4, r3
 8007254:	d101      	bne.n	800725a <_fclose_r+0x8e>
 8007256:	68ac      	ldr	r4, [r5, #8]
 8007258:	e7c8      	b.n	80071ec <_fclose_r+0x20>
 800725a:	4b04      	ldr	r3, [pc, #16]	; (800726c <_fclose_r+0xa0>)
 800725c:	429c      	cmp	r4, r3
 800725e:	bf08      	it	eq
 8007260:	68ec      	ldreq	r4, [r5, #12]
 8007262:	e7c3      	b.n	80071ec <_fclose_r+0x20>
 8007264:	08008e3c 	.word	0x08008e3c
 8007268:	08008e5c 	.word	0x08008e5c
 800726c:	08008e1c 	.word	0x08008e1c

08007270 <fclose>:
 8007270:	4b02      	ldr	r3, [pc, #8]	; (800727c <fclose+0xc>)
 8007272:	4601      	mov	r1, r0
 8007274:	6818      	ldr	r0, [r3, #0]
 8007276:	f7ff bfa9 	b.w	80071cc <_fclose_r>
 800727a:	bf00      	nop
 800727c:	2000030c 	.word	0x2000030c

08007280 <__sflush_r>:
 8007280:	898a      	ldrh	r2, [r1, #12]
 8007282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007286:	4605      	mov	r5, r0
 8007288:	0710      	lsls	r0, r2, #28
 800728a:	460c      	mov	r4, r1
 800728c:	d458      	bmi.n	8007340 <__sflush_r+0xc0>
 800728e:	684b      	ldr	r3, [r1, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	dc05      	bgt.n	80072a0 <__sflush_r+0x20>
 8007294:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007296:	2b00      	cmp	r3, #0
 8007298:	dc02      	bgt.n	80072a0 <__sflush_r+0x20>
 800729a:	2000      	movs	r0, #0
 800729c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072a2:	2e00      	cmp	r6, #0
 80072a4:	d0f9      	beq.n	800729a <__sflush_r+0x1a>
 80072a6:	2300      	movs	r3, #0
 80072a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072ac:	682f      	ldr	r7, [r5, #0]
 80072ae:	6a21      	ldr	r1, [r4, #32]
 80072b0:	602b      	str	r3, [r5, #0]
 80072b2:	d032      	beq.n	800731a <__sflush_r+0x9a>
 80072b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072b6:	89a3      	ldrh	r3, [r4, #12]
 80072b8:	075a      	lsls	r2, r3, #29
 80072ba:	d505      	bpl.n	80072c8 <__sflush_r+0x48>
 80072bc:	6863      	ldr	r3, [r4, #4]
 80072be:	1ac0      	subs	r0, r0, r3
 80072c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072c2:	b10b      	cbz	r3, 80072c8 <__sflush_r+0x48>
 80072c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072c6:	1ac0      	subs	r0, r0, r3
 80072c8:	2300      	movs	r3, #0
 80072ca:	4602      	mov	r2, r0
 80072cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072ce:	6a21      	ldr	r1, [r4, #32]
 80072d0:	4628      	mov	r0, r5
 80072d2:	47b0      	blx	r6
 80072d4:	1c43      	adds	r3, r0, #1
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	d106      	bne.n	80072e8 <__sflush_r+0x68>
 80072da:	6829      	ldr	r1, [r5, #0]
 80072dc:	291d      	cmp	r1, #29
 80072de:	d848      	bhi.n	8007372 <__sflush_r+0xf2>
 80072e0:	4a29      	ldr	r2, [pc, #164]	; (8007388 <__sflush_r+0x108>)
 80072e2:	40ca      	lsrs	r2, r1
 80072e4:	07d6      	lsls	r6, r2, #31
 80072e6:	d544      	bpl.n	8007372 <__sflush_r+0xf2>
 80072e8:	2200      	movs	r2, #0
 80072ea:	6062      	str	r2, [r4, #4]
 80072ec:	04d9      	lsls	r1, r3, #19
 80072ee:	6922      	ldr	r2, [r4, #16]
 80072f0:	6022      	str	r2, [r4, #0]
 80072f2:	d504      	bpl.n	80072fe <__sflush_r+0x7e>
 80072f4:	1c42      	adds	r2, r0, #1
 80072f6:	d101      	bne.n	80072fc <__sflush_r+0x7c>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	b903      	cbnz	r3, 80072fe <__sflush_r+0x7e>
 80072fc:	6560      	str	r0, [r4, #84]	; 0x54
 80072fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007300:	602f      	str	r7, [r5, #0]
 8007302:	2900      	cmp	r1, #0
 8007304:	d0c9      	beq.n	800729a <__sflush_r+0x1a>
 8007306:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800730a:	4299      	cmp	r1, r3
 800730c:	d002      	beq.n	8007314 <__sflush_r+0x94>
 800730e:	4628      	mov	r0, r5
 8007310:	f000 faca 	bl	80078a8 <_free_r>
 8007314:	2000      	movs	r0, #0
 8007316:	6360      	str	r0, [r4, #52]	; 0x34
 8007318:	e7c0      	b.n	800729c <__sflush_r+0x1c>
 800731a:	2301      	movs	r3, #1
 800731c:	4628      	mov	r0, r5
 800731e:	47b0      	blx	r6
 8007320:	1c41      	adds	r1, r0, #1
 8007322:	d1c8      	bne.n	80072b6 <__sflush_r+0x36>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0c5      	beq.n	80072b6 <__sflush_r+0x36>
 800732a:	2b1d      	cmp	r3, #29
 800732c:	d001      	beq.n	8007332 <__sflush_r+0xb2>
 800732e:	2b16      	cmp	r3, #22
 8007330:	d101      	bne.n	8007336 <__sflush_r+0xb6>
 8007332:	602f      	str	r7, [r5, #0]
 8007334:	e7b1      	b.n	800729a <__sflush_r+0x1a>
 8007336:	89a3      	ldrh	r3, [r4, #12]
 8007338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800733c:	81a3      	strh	r3, [r4, #12]
 800733e:	e7ad      	b.n	800729c <__sflush_r+0x1c>
 8007340:	690f      	ldr	r7, [r1, #16]
 8007342:	2f00      	cmp	r7, #0
 8007344:	d0a9      	beq.n	800729a <__sflush_r+0x1a>
 8007346:	0793      	lsls	r3, r2, #30
 8007348:	680e      	ldr	r6, [r1, #0]
 800734a:	bf08      	it	eq
 800734c:	694b      	ldreq	r3, [r1, #20]
 800734e:	600f      	str	r7, [r1, #0]
 8007350:	bf18      	it	ne
 8007352:	2300      	movne	r3, #0
 8007354:	eba6 0807 	sub.w	r8, r6, r7
 8007358:	608b      	str	r3, [r1, #8]
 800735a:	f1b8 0f00 	cmp.w	r8, #0
 800735e:	dd9c      	ble.n	800729a <__sflush_r+0x1a>
 8007360:	4643      	mov	r3, r8
 8007362:	463a      	mov	r2, r7
 8007364:	6a21      	ldr	r1, [r4, #32]
 8007366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007368:	4628      	mov	r0, r5
 800736a:	47b0      	blx	r6
 800736c:	2800      	cmp	r0, #0
 800736e:	dc06      	bgt.n	800737e <__sflush_r+0xfe>
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007376:	81a3      	strh	r3, [r4, #12]
 8007378:	f04f 30ff 	mov.w	r0, #4294967295
 800737c:	e78e      	b.n	800729c <__sflush_r+0x1c>
 800737e:	4407      	add	r7, r0
 8007380:	eba8 0800 	sub.w	r8, r8, r0
 8007384:	e7e9      	b.n	800735a <__sflush_r+0xda>
 8007386:	bf00      	nop
 8007388:	20400001 	.word	0x20400001

0800738c <_fflush_r>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	690b      	ldr	r3, [r1, #16]
 8007390:	4605      	mov	r5, r0
 8007392:	460c      	mov	r4, r1
 8007394:	b1db      	cbz	r3, 80073ce <_fflush_r+0x42>
 8007396:	b118      	cbz	r0, 80073a0 <_fflush_r+0x14>
 8007398:	6983      	ldr	r3, [r0, #24]
 800739a:	b90b      	cbnz	r3, 80073a0 <_fflush_r+0x14>
 800739c:	f000 f872 	bl	8007484 <__sinit>
 80073a0:	4b0c      	ldr	r3, [pc, #48]	; (80073d4 <_fflush_r+0x48>)
 80073a2:	429c      	cmp	r4, r3
 80073a4:	d109      	bne.n	80073ba <_fflush_r+0x2e>
 80073a6:	686c      	ldr	r4, [r5, #4]
 80073a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ac:	b17b      	cbz	r3, 80073ce <_fflush_r+0x42>
 80073ae:	4621      	mov	r1, r4
 80073b0:	4628      	mov	r0, r5
 80073b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073b6:	f7ff bf63 	b.w	8007280 <__sflush_r>
 80073ba:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <_fflush_r+0x4c>)
 80073bc:	429c      	cmp	r4, r3
 80073be:	d101      	bne.n	80073c4 <_fflush_r+0x38>
 80073c0:	68ac      	ldr	r4, [r5, #8]
 80073c2:	e7f1      	b.n	80073a8 <_fflush_r+0x1c>
 80073c4:	4b05      	ldr	r3, [pc, #20]	; (80073dc <_fflush_r+0x50>)
 80073c6:	429c      	cmp	r4, r3
 80073c8:	bf08      	it	eq
 80073ca:	68ec      	ldreq	r4, [r5, #12]
 80073cc:	e7ec      	b.n	80073a8 <_fflush_r+0x1c>
 80073ce:	2000      	movs	r0, #0
 80073d0:	bd38      	pop	{r3, r4, r5, pc}
 80073d2:	bf00      	nop
 80073d4:	08008e3c 	.word	0x08008e3c
 80073d8:	08008e5c 	.word	0x08008e5c
 80073dc:	08008e1c 	.word	0x08008e1c

080073e0 <fflush>:
 80073e0:	4601      	mov	r1, r0
 80073e2:	b920      	cbnz	r0, 80073ee <fflush+0xe>
 80073e4:	4b04      	ldr	r3, [pc, #16]	; (80073f8 <fflush+0x18>)
 80073e6:	4905      	ldr	r1, [pc, #20]	; (80073fc <fflush+0x1c>)
 80073e8:	6818      	ldr	r0, [r3, #0]
 80073ea:	f000 b993 	b.w	8007714 <_fwalk_reent>
 80073ee:	4b04      	ldr	r3, [pc, #16]	; (8007400 <fflush+0x20>)
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	f7ff bfcb 	b.w	800738c <_fflush_r>
 80073f6:	bf00      	nop
 80073f8:	08008e7c 	.word	0x08008e7c
 80073fc:	0800738d 	.word	0x0800738d
 8007400:	2000030c 	.word	0x2000030c

08007404 <std>:
 8007404:	2300      	movs	r3, #0
 8007406:	b510      	push	{r4, lr}
 8007408:	4604      	mov	r4, r0
 800740a:	e9c0 3300 	strd	r3, r3, [r0]
 800740e:	6083      	str	r3, [r0, #8]
 8007410:	8181      	strh	r1, [r0, #12]
 8007412:	6643      	str	r3, [r0, #100]	; 0x64
 8007414:	81c2      	strh	r2, [r0, #14]
 8007416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800741a:	6183      	str	r3, [r0, #24]
 800741c:	4619      	mov	r1, r3
 800741e:	2208      	movs	r2, #8
 8007420:	305c      	adds	r0, #92	; 0x5c
 8007422:	f000 fa38 	bl	8007896 <memset>
 8007426:	4b05      	ldr	r3, [pc, #20]	; (800743c <std+0x38>)
 8007428:	6263      	str	r3, [r4, #36]	; 0x24
 800742a:	4b05      	ldr	r3, [pc, #20]	; (8007440 <std+0x3c>)
 800742c:	62a3      	str	r3, [r4, #40]	; 0x28
 800742e:	4b05      	ldr	r3, [pc, #20]	; (8007444 <std+0x40>)
 8007430:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007432:	4b05      	ldr	r3, [pc, #20]	; (8007448 <std+0x44>)
 8007434:	6224      	str	r4, [r4, #32]
 8007436:	6323      	str	r3, [r4, #48]	; 0x30
 8007438:	bd10      	pop	{r4, pc}
 800743a:	bf00      	nop
 800743c:	0800814d 	.word	0x0800814d
 8007440:	0800816f 	.word	0x0800816f
 8007444:	080081a7 	.word	0x080081a7
 8007448:	080081cb 	.word	0x080081cb

0800744c <_cleanup_r>:
 800744c:	4901      	ldr	r1, [pc, #4]	; (8007454 <_cleanup_r+0x8>)
 800744e:	f000 b961 	b.w	8007714 <_fwalk_reent>
 8007452:	bf00      	nop
 8007454:	0800738d 	.word	0x0800738d

08007458 <__sfmoreglue>:
 8007458:	b570      	push	{r4, r5, r6, lr}
 800745a:	1e4a      	subs	r2, r1, #1
 800745c:	2568      	movs	r5, #104	; 0x68
 800745e:	4355      	muls	r5, r2
 8007460:	460e      	mov	r6, r1
 8007462:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007466:	f000 fa6d 	bl	8007944 <_malloc_r>
 800746a:	4604      	mov	r4, r0
 800746c:	b140      	cbz	r0, 8007480 <__sfmoreglue+0x28>
 800746e:	2100      	movs	r1, #0
 8007470:	e9c0 1600 	strd	r1, r6, [r0]
 8007474:	300c      	adds	r0, #12
 8007476:	60a0      	str	r0, [r4, #8]
 8007478:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800747c:	f000 fa0b 	bl	8007896 <memset>
 8007480:	4620      	mov	r0, r4
 8007482:	bd70      	pop	{r4, r5, r6, pc}

08007484 <__sinit>:
 8007484:	6983      	ldr	r3, [r0, #24]
 8007486:	b510      	push	{r4, lr}
 8007488:	4604      	mov	r4, r0
 800748a:	bb33      	cbnz	r3, 80074da <__sinit+0x56>
 800748c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007490:	6503      	str	r3, [r0, #80]	; 0x50
 8007492:	4b12      	ldr	r3, [pc, #72]	; (80074dc <__sinit+0x58>)
 8007494:	4a12      	ldr	r2, [pc, #72]	; (80074e0 <__sinit+0x5c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6282      	str	r2, [r0, #40]	; 0x28
 800749a:	4298      	cmp	r0, r3
 800749c:	bf04      	itt	eq
 800749e:	2301      	moveq	r3, #1
 80074a0:	6183      	streq	r3, [r0, #24]
 80074a2:	f000 f81f 	bl	80074e4 <__sfp>
 80074a6:	6060      	str	r0, [r4, #4]
 80074a8:	4620      	mov	r0, r4
 80074aa:	f000 f81b 	bl	80074e4 <__sfp>
 80074ae:	60a0      	str	r0, [r4, #8]
 80074b0:	4620      	mov	r0, r4
 80074b2:	f000 f817 	bl	80074e4 <__sfp>
 80074b6:	2200      	movs	r2, #0
 80074b8:	60e0      	str	r0, [r4, #12]
 80074ba:	2104      	movs	r1, #4
 80074bc:	6860      	ldr	r0, [r4, #4]
 80074be:	f7ff ffa1 	bl	8007404 <std>
 80074c2:	2201      	movs	r2, #1
 80074c4:	2109      	movs	r1, #9
 80074c6:	68a0      	ldr	r0, [r4, #8]
 80074c8:	f7ff ff9c 	bl	8007404 <std>
 80074cc:	2202      	movs	r2, #2
 80074ce:	2112      	movs	r1, #18
 80074d0:	68e0      	ldr	r0, [r4, #12]
 80074d2:	f7ff ff97 	bl	8007404 <std>
 80074d6:	2301      	movs	r3, #1
 80074d8:	61a3      	str	r3, [r4, #24]
 80074da:	bd10      	pop	{r4, pc}
 80074dc:	08008e7c 	.word	0x08008e7c
 80074e0:	0800744d 	.word	0x0800744d

080074e4 <__sfp>:
 80074e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e6:	4b1b      	ldr	r3, [pc, #108]	; (8007554 <__sfp+0x70>)
 80074e8:	681e      	ldr	r6, [r3, #0]
 80074ea:	69b3      	ldr	r3, [r6, #24]
 80074ec:	4607      	mov	r7, r0
 80074ee:	b913      	cbnz	r3, 80074f6 <__sfp+0x12>
 80074f0:	4630      	mov	r0, r6
 80074f2:	f7ff ffc7 	bl	8007484 <__sinit>
 80074f6:	3648      	adds	r6, #72	; 0x48
 80074f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	d503      	bpl.n	8007508 <__sfp+0x24>
 8007500:	6833      	ldr	r3, [r6, #0]
 8007502:	b133      	cbz	r3, 8007512 <__sfp+0x2e>
 8007504:	6836      	ldr	r6, [r6, #0]
 8007506:	e7f7      	b.n	80074f8 <__sfp+0x14>
 8007508:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800750c:	b16d      	cbz	r5, 800752a <__sfp+0x46>
 800750e:	3468      	adds	r4, #104	; 0x68
 8007510:	e7f4      	b.n	80074fc <__sfp+0x18>
 8007512:	2104      	movs	r1, #4
 8007514:	4638      	mov	r0, r7
 8007516:	f7ff ff9f 	bl	8007458 <__sfmoreglue>
 800751a:	6030      	str	r0, [r6, #0]
 800751c:	2800      	cmp	r0, #0
 800751e:	d1f1      	bne.n	8007504 <__sfp+0x20>
 8007520:	230c      	movs	r3, #12
 8007522:	603b      	str	r3, [r7, #0]
 8007524:	4604      	mov	r4, r0
 8007526:	4620      	mov	r0, r4
 8007528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800752a:	4b0b      	ldr	r3, [pc, #44]	; (8007558 <__sfp+0x74>)
 800752c:	6665      	str	r5, [r4, #100]	; 0x64
 800752e:	e9c4 5500 	strd	r5, r5, [r4]
 8007532:	60a5      	str	r5, [r4, #8]
 8007534:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007538:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800753c:	2208      	movs	r2, #8
 800753e:	4629      	mov	r1, r5
 8007540:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007544:	f000 f9a7 	bl	8007896 <memset>
 8007548:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800754c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007550:	e7e9      	b.n	8007526 <__sfp+0x42>
 8007552:	bf00      	nop
 8007554:	08008e7c 	.word	0x08008e7c
 8007558:	ffff0001 	.word	0xffff0001

0800755c <__sfp_lock_acquire>:
 800755c:	4770      	bx	lr

0800755e <__sfp_lock_release>:
 800755e:	4770      	bx	lr

08007560 <_fopen_r>:
 8007560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007562:	460f      	mov	r7, r1
 8007564:	4611      	mov	r1, r2
 8007566:	aa01      	add	r2, sp, #4
 8007568:	4605      	mov	r5, r0
 800756a:	f001 f807 	bl	800857c <__sflags>
 800756e:	4606      	mov	r6, r0
 8007570:	b918      	cbnz	r0, 800757a <_fopen_r+0x1a>
 8007572:	2400      	movs	r4, #0
 8007574:	4620      	mov	r0, r4
 8007576:	b003      	add	sp, #12
 8007578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800757a:	4628      	mov	r0, r5
 800757c:	f7ff ffb2 	bl	80074e4 <__sfp>
 8007580:	4604      	mov	r4, r0
 8007582:	2800      	cmp	r0, #0
 8007584:	d0f5      	beq.n	8007572 <_fopen_r+0x12>
 8007586:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 800758a:	9a01      	ldr	r2, [sp, #4]
 800758c:	4639      	mov	r1, r7
 800758e:	4628      	mov	r0, r5
 8007590:	f000 fd04 	bl	8007f9c <_open_r>
 8007594:	2800      	cmp	r0, #0
 8007596:	da06      	bge.n	80075a6 <_fopen_r+0x46>
 8007598:	2500      	movs	r5, #0
 800759a:	f7ff ffdf 	bl	800755c <__sfp_lock_acquire>
 800759e:	81a5      	strh	r5, [r4, #12]
 80075a0:	f7ff ffdd 	bl	800755e <__sfp_lock_release>
 80075a4:	e7e5      	b.n	8007572 <_fopen_r+0x12>
 80075a6:	4b0a      	ldr	r3, [pc, #40]	; (80075d0 <_fopen_r+0x70>)
 80075a8:	6263      	str	r3, [r4, #36]	; 0x24
 80075aa:	4b0a      	ldr	r3, [pc, #40]	; (80075d4 <_fopen_r+0x74>)
 80075ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80075ae:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <_fopen_r+0x78>)
 80075b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075b2:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <_fopen_r+0x7c>)
 80075b4:	6323      	str	r3, [r4, #48]	; 0x30
 80075b6:	05f3      	lsls	r3, r6, #23
 80075b8:	81e0      	strh	r0, [r4, #14]
 80075ba:	81a6      	strh	r6, [r4, #12]
 80075bc:	6224      	str	r4, [r4, #32]
 80075be:	d5d9      	bpl.n	8007574 <_fopen_r+0x14>
 80075c0:	2302      	movs	r3, #2
 80075c2:	2200      	movs	r2, #0
 80075c4:	4621      	mov	r1, r4
 80075c6:	4628      	mov	r0, r5
 80075c8:	f000 f812 	bl	80075f0 <_fseek_r>
 80075cc:	e7d2      	b.n	8007574 <_fopen_r+0x14>
 80075ce:	bf00      	nop
 80075d0:	0800814d 	.word	0x0800814d
 80075d4:	0800816f 	.word	0x0800816f
 80075d8:	080081a7 	.word	0x080081a7
 80075dc:	080081cb 	.word	0x080081cb

080075e0 <fopen>:
 80075e0:	4b02      	ldr	r3, [pc, #8]	; (80075ec <fopen+0xc>)
 80075e2:	460a      	mov	r2, r1
 80075e4:	4601      	mov	r1, r0
 80075e6:	6818      	ldr	r0, [r3, #0]
 80075e8:	f7ff bfba 	b.w	8007560 <_fopen_r>
 80075ec:	2000030c 	.word	0x2000030c

080075f0 <_fseek_r>:
 80075f0:	f000 b800 	b.w	80075f4 <_fseeko_r>

080075f4 <_fseeko_r>:
 80075f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075f8:	460c      	mov	r4, r1
 80075fa:	4691      	mov	r9, r2
 80075fc:	461e      	mov	r6, r3
 80075fe:	4605      	mov	r5, r0
 8007600:	b118      	cbz	r0, 800760a <_fseeko_r+0x16>
 8007602:	6983      	ldr	r3, [r0, #24]
 8007604:	b90b      	cbnz	r3, 800760a <_fseeko_r+0x16>
 8007606:	f7ff ff3d 	bl	8007484 <__sinit>
 800760a:	4b3f      	ldr	r3, [pc, #252]	; (8007708 <_fseeko_r+0x114>)
 800760c:	429c      	cmp	r4, r3
 800760e:	d112      	bne.n	8007636 <_fseeko_r+0x42>
 8007610:	686c      	ldr	r4, [r5, #4]
 8007612:	89a3      	ldrh	r3, [r4, #12]
 8007614:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8007618:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800761c:	d103      	bne.n	8007626 <_fseeko_r+0x32>
 800761e:	4621      	mov	r1, r4
 8007620:	4628      	mov	r0, r5
 8007622:	f7ff feb3 	bl	800738c <_fflush_r>
 8007626:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 800762a:	f1b8 0f00 	cmp.w	r8, #0
 800762e:	d10c      	bne.n	800764a <_fseeko_r+0x56>
 8007630:	231d      	movs	r3, #29
 8007632:	602b      	str	r3, [r5, #0]
 8007634:	e057      	b.n	80076e6 <_fseeko_r+0xf2>
 8007636:	4b35      	ldr	r3, [pc, #212]	; (800770c <_fseeko_r+0x118>)
 8007638:	429c      	cmp	r4, r3
 800763a:	d101      	bne.n	8007640 <_fseeko_r+0x4c>
 800763c:	68ac      	ldr	r4, [r5, #8]
 800763e:	e7e8      	b.n	8007612 <_fseeko_r+0x1e>
 8007640:	4b33      	ldr	r3, [pc, #204]	; (8007710 <_fseeko_r+0x11c>)
 8007642:	429c      	cmp	r4, r3
 8007644:	bf08      	it	eq
 8007646:	68ec      	ldreq	r4, [r5, #12]
 8007648:	e7e3      	b.n	8007612 <_fseeko_r+0x1e>
 800764a:	2e01      	cmp	r6, #1
 800764c:	d030      	beq.n	80076b0 <_fseeko_r+0xbc>
 800764e:	2e02      	cmp	r6, #2
 8007650:	d001      	beq.n	8007656 <_fseeko_r+0x62>
 8007652:	2e00      	cmp	r6, #0
 8007654:	d155      	bne.n	8007702 <_fseeko_r+0x10e>
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	b91b      	cbnz	r3, 8007662 <_fseeko_r+0x6e>
 800765a:	4621      	mov	r1, r4
 800765c:	4628      	mov	r0, r5
 800765e:	f000 f8bf 	bl	80077e0 <__smakebuf_r>
 8007662:	4621      	mov	r1, r4
 8007664:	4628      	mov	r0, r5
 8007666:	f7ff fe91 	bl	800738c <_fflush_r>
 800766a:	4607      	mov	r7, r0
 800766c:	2800      	cmp	r0, #0
 800766e:	d13a      	bne.n	80076e6 <_fseeko_r+0xf2>
 8007670:	4633      	mov	r3, r6
 8007672:	464a      	mov	r2, r9
 8007674:	6a21      	ldr	r1, [r4, #32]
 8007676:	4628      	mov	r0, r5
 8007678:	47c0      	blx	r8
 800767a:	3001      	adds	r0, #1
 800767c:	d033      	beq.n	80076e6 <_fseeko_r+0xf2>
 800767e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007680:	b141      	cbz	r1, 8007694 <_fseeko_r+0xa0>
 8007682:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007686:	4299      	cmp	r1, r3
 8007688:	d002      	beq.n	8007690 <_fseeko_r+0x9c>
 800768a:	4628      	mov	r0, r5
 800768c:	f000 f90c 	bl	80078a8 <_free_r>
 8007690:	2300      	movs	r3, #0
 8007692:	6363      	str	r3, [r4, #52]	; 0x34
 8007694:	6923      	ldr	r3, [r4, #16]
 8007696:	6023      	str	r3, [r4, #0]
 8007698:	89a3      	ldrh	r3, [r4, #12]
 800769a:	2100      	movs	r1, #0
 800769c:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 80076a0:	6061      	str	r1, [r4, #4]
 80076a2:	81a3      	strh	r3, [r4, #12]
 80076a4:	2208      	movs	r2, #8
 80076a6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076aa:	f000 f8f4 	bl	8007896 <memset>
 80076ae:	e01c      	b.n	80076ea <_fseeko_r+0xf6>
 80076b0:	4621      	mov	r1, r4
 80076b2:	4628      	mov	r0, r5
 80076b4:	f7ff fe6a 	bl	800738c <_fflush_r>
 80076b8:	89a2      	ldrh	r2, [r4, #12]
 80076ba:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076be:	d00c      	beq.n	80076da <_fseeko_r+0xe6>
 80076c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076c2:	89a3      	ldrh	r3, [r4, #12]
 80076c4:	075a      	lsls	r2, r3, #29
 80076c6:	d513      	bpl.n	80076f0 <_fseeko_r+0xfc>
 80076c8:	6863      	ldr	r3, [r4, #4]
 80076ca:	1ac0      	subs	r0, r0, r3
 80076cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076ce:	b10b      	cbz	r3, 80076d4 <_fseeko_r+0xe0>
 80076d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076d2:	1ac0      	subs	r0, r0, r3
 80076d4:	4481      	add	r9, r0
 80076d6:	2600      	movs	r6, #0
 80076d8:	e7bd      	b.n	8007656 <_fseeko_r+0x62>
 80076da:	6a21      	ldr	r1, [r4, #32]
 80076dc:	4633      	mov	r3, r6
 80076de:	4628      	mov	r0, r5
 80076e0:	47c0      	blx	r8
 80076e2:	1c41      	adds	r1, r0, #1
 80076e4:	d1ed      	bne.n	80076c2 <_fseeko_r+0xce>
 80076e6:	f04f 37ff 	mov.w	r7, #4294967295
 80076ea:	4638      	mov	r0, r7
 80076ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f0:	071b      	lsls	r3, r3, #28
 80076f2:	d5ef      	bpl.n	80076d4 <_fseeko_r+0xe0>
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	6922      	ldr	r2, [r4, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0eb      	beq.n	80076d4 <_fseeko_r+0xe0>
 80076fc:	1a9b      	subs	r3, r3, r2
 80076fe:	4418      	add	r0, r3
 8007700:	e7e8      	b.n	80076d4 <_fseeko_r+0xe0>
 8007702:	2316      	movs	r3, #22
 8007704:	e795      	b.n	8007632 <_fseeko_r+0x3e>
 8007706:	bf00      	nop
 8007708:	08008e3c 	.word	0x08008e3c
 800770c:	08008e5c 	.word	0x08008e5c
 8007710:	08008e1c 	.word	0x08008e1c

08007714 <_fwalk_reent>:
 8007714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007718:	4680      	mov	r8, r0
 800771a:	4689      	mov	r9, r1
 800771c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007720:	2600      	movs	r6, #0
 8007722:	b914      	cbnz	r4, 800772a <_fwalk_reent+0x16>
 8007724:	4630      	mov	r0, r6
 8007726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800772a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800772e:	3f01      	subs	r7, #1
 8007730:	d501      	bpl.n	8007736 <_fwalk_reent+0x22>
 8007732:	6824      	ldr	r4, [r4, #0]
 8007734:	e7f5      	b.n	8007722 <_fwalk_reent+0xe>
 8007736:	89ab      	ldrh	r3, [r5, #12]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d907      	bls.n	800774c <_fwalk_reent+0x38>
 800773c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007740:	3301      	adds	r3, #1
 8007742:	d003      	beq.n	800774c <_fwalk_reent+0x38>
 8007744:	4629      	mov	r1, r5
 8007746:	4640      	mov	r0, r8
 8007748:	47c8      	blx	r9
 800774a:	4306      	orrs	r6, r0
 800774c:	3568      	adds	r5, #104	; 0x68
 800774e:	e7ee      	b.n	800772e <_fwalk_reent+0x1a>

08007750 <__libc_init_array>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	4e0d      	ldr	r6, [pc, #52]	; (8007788 <__libc_init_array+0x38>)
 8007754:	4c0d      	ldr	r4, [pc, #52]	; (800778c <__libc_init_array+0x3c>)
 8007756:	1ba4      	subs	r4, r4, r6
 8007758:	10a4      	asrs	r4, r4, #2
 800775a:	2500      	movs	r5, #0
 800775c:	42a5      	cmp	r5, r4
 800775e:	d109      	bne.n	8007774 <__libc_init_array+0x24>
 8007760:	4e0b      	ldr	r6, [pc, #44]	; (8007790 <__libc_init_array+0x40>)
 8007762:	4c0c      	ldr	r4, [pc, #48]	; (8007794 <__libc_init_array+0x44>)
 8007764:	f000 ff86 	bl	8008674 <_init>
 8007768:	1ba4      	subs	r4, r4, r6
 800776a:	10a4      	asrs	r4, r4, #2
 800776c:	2500      	movs	r5, #0
 800776e:	42a5      	cmp	r5, r4
 8007770:	d105      	bne.n	800777e <__libc_init_array+0x2e>
 8007772:	bd70      	pop	{r4, r5, r6, pc}
 8007774:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007778:	4798      	blx	r3
 800777a:	3501      	adds	r5, #1
 800777c:	e7ee      	b.n	800775c <__libc_init_array+0xc>
 800777e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007782:	4798      	blx	r3
 8007784:	3501      	adds	r5, #1
 8007786:	e7f2      	b.n	800776e <__libc_init_array+0x1e>
 8007788:	08008ebc 	.word	0x08008ebc
 800778c:	08008ebc 	.word	0x08008ebc
 8007790:	08008ebc 	.word	0x08008ebc
 8007794:	08008ec4 	.word	0x08008ec4

08007798 <__swhatbuf_r>:
 8007798:	b570      	push	{r4, r5, r6, lr}
 800779a:	460e      	mov	r6, r1
 800779c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a0:	2900      	cmp	r1, #0
 80077a2:	b096      	sub	sp, #88	; 0x58
 80077a4:	4614      	mov	r4, r2
 80077a6:	461d      	mov	r5, r3
 80077a8:	da07      	bge.n	80077ba <__swhatbuf_r+0x22>
 80077aa:	2300      	movs	r3, #0
 80077ac:	602b      	str	r3, [r5, #0]
 80077ae:	89b3      	ldrh	r3, [r6, #12]
 80077b0:	061a      	lsls	r2, r3, #24
 80077b2:	d410      	bmi.n	80077d6 <__swhatbuf_r+0x3e>
 80077b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077b8:	e00e      	b.n	80077d8 <__swhatbuf_r+0x40>
 80077ba:	466a      	mov	r2, sp
 80077bc:	f000 ff14 	bl	80085e8 <_fstat_r>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	dbf2      	blt.n	80077aa <__swhatbuf_r+0x12>
 80077c4:	9a01      	ldr	r2, [sp, #4]
 80077c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077ce:	425a      	negs	r2, r3
 80077d0:	415a      	adcs	r2, r3
 80077d2:	602a      	str	r2, [r5, #0]
 80077d4:	e7ee      	b.n	80077b4 <__swhatbuf_r+0x1c>
 80077d6:	2340      	movs	r3, #64	; 0x40
 80077d8:	2000      	movs	r0, #0
 80077da:	6023      	str	r3, [r4, #0]
 80077dc:	b016      	add	sp, #88	; 0x58
 80077de:	bd70      	pop	{r4, r5, r6, pc}

080077e0 <__smakebuf_r>:
 80077e0:	898b      	ldrh	r3, [r1, #12]
 80077e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077e4:	079d      	lsls	r5, r3, #30
 80077e6:	4606      	mov	r6, r0
 80077e8:	460c      	mov	r4, r1
 80077ea:	d507      	bpl.n	80077fc <__smakebuf_r+0x1c>
 80077ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	6123      	str	r3, [r4, #16]
 80077f4:	2301      	movs	r3, #1
 80077f6:	6163      	str	r3, [r4, #20]
 80077f8:	b002      	add	sp, #8
 80077fa:	bd70      	pop	{r4, r5, r6, pc}
 80077fc:	ab01      	add	r3, sp, #4
 80077fe:	466a      	mov	r2, sp
 8007800:	f7ff ffca 	bl	8007798 <__swhatbuf_r>
 8007804:	9900      	ldr	r1, [sp, #0]
 8007806:	4605      	mov	r5, r0
 8007808:	4630      	mov	r0, r6
 800780a:	f000 f89b 	bl	8007944 <_malloc_r>
 800780e:	b948      	cbnz	r0, 8007824 <__smakebuf_r+0x44>
 8007810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007814:	059a      	lsls	r2, r3, #22
 8007816:	d4ef      	bmi.n	80077f8 <__smakebuf_r+0x18>
 8007818:	f023 0303 	bic.w	r3, r3, #3
 800781c:	f043 0302 	orr.w	r3, r3, #2
 8007820:	81a3      	strh	r3, [r4, #12]
 8007822:	e7e3      	b.n	80077ec <__smakebuf_r+0xc>
 8007824:	4b0d      	ldr	r3, [pc, #52]	; (800785c <__smakebuf_r+0x7c>)
 8007826:	62b3      	str	r3, [r6, #40]	; 0x28
 8007828:	89a3      	ldrh	r3, [r4, #12]
 800782a:	6020      	str	r0, [r4, #0]
 800782c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007830:	81a3      	strh	r3, [r4, #12]
 8007832:	9b00      	ldr	r3, [sp, #0]
 8007834:	6163      	str	r3, [r4, #20]
 8007836:	9b01      	ldr	r3, [sp, #4]
 8007838:	6120      	str	r0, [r4, #16]
 800783a:	b15b      	cbz	r3, 8007854 <__smakebuf_r+0x74>
 800783c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007840:	4630      	mov	r0, r6
 8007842:	f000 fee3 	bl	800860c <_isatty_r>
 8007846:	b128      	cbz	r0, 8007854 <__smakebuf_r+0x74>
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	f023 0303 	bic.w	r3, r3, #3
 800784e:	f043 0301 	orr.w	r3, r3, #1
 8007852:	81a3      	strh	r3, [r4, #12]
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	431d      	orrs	r5, r3
 8007858:	81a5      	strh	r5, [r4, #12]
 800785a:	e7cd      	b.n	80077f8 <__smakebuf_r+0x18>
 800785c:	0800744d 	.word	0x0800744d

08007860 <malloc>:
 8007860:	4b02      	ldr	r3, [pc, #8]	; (800786c <malloc+0xc>)
 8007862:	4601      	mov	r1, r0
 8007864:	6818      	ldr	r0, [r3, #0]
 8007866:	f000 b86d 	b.w	8007944 <_malloc_r>
 800786a:	bf00      	nop
 800786c:	2000030c 	.word	0x2000030c

08007870 <free>:
 8007870:	4b02      	ldr	r3, [pc, #8]	; (800787c <free+0xc>)
 8007872:	4601      	mov	r1, r0
 8007874:	6818      	ldr	r0, [r3, #0]
 8007876:	f000 b817 	b.w	80078a8 <_free_r>
 800787a:	bf00      	nop
 800787c:	2000030c 	.word	0x2000030c

08007880 <memcpy>:
 8007880:	b510      	push	{r4, lr}
 8007882:	1e43      	subs	r3, r0, #1
 8007884:	440a      	add	r2, r1
 8007886:	4291      	cmp	r1, r2
 8007888:	d100      	bne.n	800788c <memcpy+0xc>
 800788a:	bd10      	pop	{r4, pc}
 800788c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007890:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007894:	e7f7      	b.n	8007886 <memcpy+0x6>

08007896 <memset>:
 8007896:	4402      	add	r2, r0
 8007898:	4603      	mov	r3, r0
 800789a:	4293      	cmp	r3, r2
 800789c:	d100      	bne.n	80078a0 <memset+0xa>
 800789e:	4770      	bx	lr
 80078a0:	f803 1b01 	strb.w	r1, [r3], #1
 80078a4:	e7f9      	b.n	800789a <memset+0x4>
	...

080078a8 <_free_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4605      	mov	r5, r0
 80078ac:	2900      	cmp	r1, #0
 80078ae:	d045      	beq.n	800793c <_free_r+0x94>
 80078b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078b4:	1f0c      	subs	r4, r1, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	bfb8      	it	lt
 80078ba:	18e4      	addlt	r4, r4, r3
 80078bc:	f7fd fa91 	bl	8004de2 <__malloc_lock>
 80078c0:	4a1f      	ldr	r2, [pc, #124]	; (8007940 <_free_r+0x98>)
 80078c2:	6813      	ldr	r3, [r2, #0]
 80078c4:	4610      	mov	r0, r2
 80078c6:	b933      	cbnz	r3, 80078d6 <_free_r+0x2e>
 80078c8:	6063      	str	r3, [r4, #4]
 80078ca:	6014      	str	r4, [r2, #0]
 80078cc:	4628      	mov	r0, r5
 80078ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078d2:	f7fd ba91 	b.w	8004df8 <__malloc_unlock>
 80078d6:	42a3      	cmp	r3, r4
 80078d8:	d90c      	bls.n	80078f4 <_free_r+0x4c>
 80078da:	6821      	ldr	r1, [r4, #0]
 80078dc:	1862      	adds	r2, r4, r1
 80078de:	4293      	cmp	r3, r2
 80078e0:	bf04      	itt	eq
 80078e2:	681a      	ldreq	r2, [r3, #0]
 80078e4:	685b      	ldreq	r3, [r3, #4]
 80078e6:	6063      	str	r3, [r4, #4]
 80078e8:	bf04      	itt	eq
 80078ea:	1852      	addeq	r2, r2, r1
 80078ec:	6022      	streq	r2, [r4, #0]
 80078ee:	6004      	str	r4, [r0, #0]
 80078f0:	e7ec      	b.n	80078cc <_free_r+0x24>
 80078f2:	4613      	mov	r3, r2
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	b10a      	cbz	r2, 80078fc <_free_r+0x54>
 80078f8:	42a2      	cmp	r2, r4
 80078fa:	d9fa      	bls.n	80078f2 <_free_r+0x4a>
 80078fc:	6819      	ldr	r1, [r3, #0]
 80078fe:	1858      	adds	r0, r3, r1
 8007900:	42a0      	cmp	r0, r4
 8007902:	d10b      	bne.n	800791c <_free_r+0x74>
 8007904:	6820      	ldr	r0, [r4, #0]
 8007906:	4401      	add	r1, r0
 8007908:	1858      	adds	r0, r3, r1
 800790a:	4282      	cmp	r2, r0
 800790c:	6019      	str	r1, [r3, #0]
 800790e:	d1dd      	bne.n	80078cc <_free_r+0x24>
 8007910:	6810      	ldr	r0, [r2, #0]
 8007912:	6852      	ldr	r2, [r2, #4]
 8007914:	605a      	str	r2, [r3, #4]
 8007916:	4401      	add	r1, r0
 8007918:	6019      	str	r1, [r3, #0]
 800791a:	e7d7      	b.n	80078cc <_free_r+0x24>
 800791c:	d902      	bls.n	8007924 <_free_r+0x7c>
 800791e:	230c      	movs	r3, #12
 8007920:	602b      	str	r3, [r5, #0]
 8007922:	e7d3      	b.n	80078cc <_free_r+0x24>
 8007924:	6820      	ldr	r0, [r4, #0]
 8007926:	1821      	adds	r1, r4, r0
 8007928:	428a      	cmp	r2, r1
 800792a:	bf04      	itt	eq
 800792c:	6811      	ldreq	r1, [r2, #0]
 800792e:	6852      	ldreq	r2, [r2, #4]
 8007930:	6062      	str	r2, [r4, #4]
 8007932:	bf04      	itt	eq
 8007934:	1809      	addeq	r1, r1, r0
 8007936:	6021      	streq	r1, [r4, #0]
 8007938:	605c      	str	r4, [r3, #4]
 800793a:	e7c7      	b.n	80078cc <_free_r+0x24>
 800793c:	bd38      	pop	{r3, r4, r5, pc}
 800793e:	bf00      	nop
 8007940:	20000554 	.word	0x20000554

08007944 <_malloc_r>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	1ccd      	adds	r5, r1, #3
 8007948:	f025 0503 	bic.w	r5, r5, #3
 800794c:	3508      	adds	r5, #8
 800794e:	2d0c      	cmp	r5, #12
 8007950:	bf38      	it	cc
 8007952:	250c      	movcc	r5, #12
 8007954:	2d00      	cmp	r5, #0
 8007956:	4606      	mov	r6, r0
 8007958:	db01      	blt.n	800795e <_malloc_r+0x1a>
 800795a:	42a9      	cmp	r1, r5
 800795c:	d903      	bls.n	8007966 <_malloc_r+0x22>
 800795e:	230c      	movs	r3, #12
 8007960:	6033      	str	r3, [r6, #0]
 8007962:	2000      	movs	r0, #0
 8007964:	bd70      	pop	{r4, r5, r6, pc}
 8007966:	f7fd fa3c 	bl	8004de2 <__malloc_lock>
 800796a:	4a21      	ldr	r2, [pc, #132]	; (80079f0 <_malloc_r+0xac>)
 800796c:	6814      	ldr	r4, [r2, #0]
 800796e:	4621      	mov	r1, r4
 8007970:	b991      	cbnz	r1, 8007998 <_malloc_r+0x54>
 8007972:	4c20      	ldr	r4, [pc, #128]	; (80079f4 <_malloc_r+0xb0>)
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	b91b      	cbnz	r3, 8007980 <_malloc_r+0x3c>
 8007978:	4630      	mov	r0, r6
 800797a:	f000 fb21 	bl	8007fc0 <_sbrk_r>
 800797e:	6020      	str	r0, [r4, #0]
 8007980:	4629      	mov	r1, r5
 8007982:	4630      	mov	r0, r6
 8007984:	f000 fb1c 	bl	8007fc0 <_sbrk_r>
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	d124      	bne.n	80079d6 <_malloc_r+0x92>
 800798c:	230c      	movs	r3, #12
 800798e:	6033      	str	r3, [r6, #0]
 8007990:	4630      	mov	r0, r6
 8007992:	f7fd fa31 	bl	8004df8 <__malloc_unlock>
 8007996:	e7e4      	b.n	8007962 <_malloc_r+0x1e>
 8007998:	680b      	ldr	r3, [r1, #0]
 800799a:	1b5b      	subs	r3, r3, r5
 800799c:	d418      	bmi.n	80079d0 <_malloc_r+0x8c>
 800799e:	2b0b      	cmp	r3, #11
 80079a0:	d90f      	bls.n	80079c2 <_malloc_r+0x7e>
 80079a2:	600b      	str	r3, [r1, #0]
 80079a4:	50cd      	str	r5, [r1, r3]
 80079a6:	18cc      	adds	r4, r1, r3
 80079a8:	4630      	mov	r0, r6
 80079aa:	f7fd fa25 	bl	8004df8 <__malloc_unlock>
 80079ae:	f104 000b 	add.w	r0, r4, #11
 80079b2:	1d23      	adds	r3, r4, #4
 80079b4:	f020 0007 	bic.w	r0, r0, #7
 80079b8:	1ac3      	subs	r3, r0, r3
 80079ba:	d0d3      	beq.n	8007964 <_malloc_r+0x20>
 80079bc:	425a      	negs	r2, r3
 80079be:	50e2      	str	r2, [r4, r3]
 80079c0:	e7d0      	b.n	8007964 <_malloc_r+0x20>
 80079c2:	428c      	cmp	r4, r1
 80079c4:	684b      	ldr	r3, [r1, #4]
 80079c6:	bf16      	itet	ne
 80079c8:	6063      	strne	r3, [r4, #4]
 80079ca:	6013      	streq	r3, [r2, #0]
 80079cc:	460c      	movne	r4, r1
 80079ce:	e7eb      	b.n	80079a8 <_malloc_r+0x64>
 80079d0:	460c      	mov	r4, r1
 80079d2:	6849      	ldr	r1, [r1, #4]
 80079d4:	e7cc      	b.n	8007970 <_malloc_r+0x2c>
 80079d6:	1cc4      	adds	r4, r0, #3
 80079d8:	f024 0403 	bic.w	r4, r4, #3
 80079dc:	42a0      	cmp	r0, r4
 80079de:	d005      	beq.n	80079ec <_malloc_r+0xa8>
 80079e0:	1a21      	subs	r1, r4, r0
 80079e2:	4630      	mov	r0, r6
 80079e4:	f000 faec 	bl	8007fc0 <_sbrk_r>
 80079e8:	3001      	adds	r0, #1
 80079ea:	d0cf      	beq.n	800798c <_malloc_r+0x48>
 80079ec:	6025      	str	r5, [r4, #0]
 80079ee:	e7db      	b.n	80079a8 <_malloc_r+0x64>
 80079f0:	20000554 	.word	0x20000554
 80079f4:	20000558 	.word	0x20000558

080079f8 <__sfputc_r>:
 80079f8:	6893      	ldr	r3, [r2, #8]
 80079fa:	3b01      	subs	r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	b410      	push	{r4}
 8007a00:	6093      	str	r3, [r2, #8]
 8007a02:	da08      	bge.n	8007a16 <__sfputc_r+0x1e>
 8007a04:	6994      	ldr	r4, [r2, #24]
 8007a06:	42a3      	cmp	r3, r4
 8007a08:	db01      	blt.n	8007a0e <__sfputc_r+0x16>
 8007a0a:	290a      	cmp	r1, #10
 8007a0c:	d103      	bne.n	8007a16 <__sfputc_r+0x1e>
 8007a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a12:	f000 bc03 	b.w	800821c <__swbuf_r>
 8007a16:	6813      	ldr	r3, [r2, #0]
 8007a18:	1c58      	adds	r0, r3, #1
 8007a1a:	6010      	str	r0, [r2, #0]
 8007a1c:	7019      	strb	r1, [r3, #0]
 8007a1e:	4608      	mov	r0, r1
 8007a20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <__sfputs_r>:
 8007a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a28:	4606      	mov	r6, r0
 8007a2a:	460f      	mov	r7, r1
 8007a2c:	4614      	mov	r4, r2
 8007a2e:	18d5      	adds	r5, r2, r3
 8007a30:	42ac      	cmp	r4, r5
 8007a32:	d101      	bne.n	8007a38 <__sfputs_r+0x12>
 8007a34:	2000      	movs	r0, #0
 8007a36:	e007      	b.n	8007a48 <__sfputs_r+0x22>
 8007a38:	463a      	mov	r2, r7
 8007a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a3e:	4630      	mov	r0, r6
 8007a40:	f7ff ffda 	bl	80079f8 <__sfputc_r>
 8007a44:	1c43      	adds	r3, r0, #1
 8007a46:	d1f3      	bne.n	8007a30 <__sfputs_r+0xa>
 8007a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a4c <_vfiprintf_r>:
 8007a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a50:	460c      	mov	r4, r1
 8007a52:	b09d      	sub	sp, #116	; 0x74
 8007a54:	4617      	mov	r7, r2
 8007a56:	461d      	mov	r5, r3
 8007a58:	4606      	mov	r6, r0
 8007a5a:	b118      	cbz	r0, 8007a64 <_vfiprintf_r+0x18>
 8007a5c:	6983      	ldr	r3, [r0, #24]
 8007a5e:	b90b      	cbnz	r3, 8007a64 <_vfiprintf_r+0x18>
 8007a60:	f7ff fd10 	bl	8007484 <__sinit>
 8007a64:	4b7c      	ldr	r3, [pc, #496]	; (8007c58 <_vfiprintf_r+0x20c>)
 8007a66:	429c      	cmp	r4, r3
 8007a68:	d158      	bne.n	8007b1c <_vfiprintf_r+0xd0>
 8007a6a:	6874      	ldr	r4, [r6, #4]
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	0718      	lsls	r0, r3, #28
 8007a70:	d55e      	bpl.n	8007b30 <_vfiprintf_r+0xe4>
 8007a72:	6923      	ldr	r3, [r4, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d05b      	beq.n	8007b30 <_vfiprintf_r+0xe4>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a7c:	2320      	movs	r3, #32
 8007a7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a82:	2330      	movs	r3, #48	; 0x30
 8007a84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a88:	9503      	str	r5, [sp, #12]
 8007a8a:	f04f 0b01 	mov.w	fp, #1
 8007a8e:	46b8      	mov	r8, r7
 8007a90:	4645      	mov	r5, r8
 8007a92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007a96:	b10b      	cbz	r3, 8007a9c <_vfiprintf_r+0x50>
 8007a98:	2b25      	cmp	r3, #37	; 0x25
 8007a9a:	d154      	bne.n	8007b46 <_vfiprintf_r+0xfa>
 8007a9c:	ebb8 0a07 	subs.w	sl, r8, r7
 8007aa0:	d00b      	beq.n	8007aba <_vfiprintf_r+0x6e>
 8007aa2:	4653      	mov	r3, sl
 8007aa4:	463a      	mov	r2, r7
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f7ff ffbc 	bl	8007a26 <__sfputs_r>
 8007aae:	3001      	adds	r0, #1
 8007ab0:	f000 80c2 	beq.w	8007c38 <_vfiprintf_r+0x1ec>
 8007ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab6:	4453      	add	r3, sl
 8007ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8007aba:	f898 3000 	ldrb.w	r3, [r8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 80ba 	beq.w	8007c38 <_vfiprintf_r+0x1ec>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ace:	9304      	str	r3, [sp, #16]
 8007ad0:	9307      	str	r3, [sp, #28]
 8007ad2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ad6:	931a      	str	r3, [sp, #104]	; 0x68
 8007ad8:	46a8      	mov	r8, r5
 8007ada:	2205      	movs	r2, #5
 8007adc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007ae0:	485e      	ldr	r0, [pc, #376]	; (8007c5c <_vfiprintf_r+0x210>)
 8007ae2:	f7f8 fb7d 	bl	80001e0 <memchr>
 8007ae6:	9b04      	ldr	r3, [sp, #16]
 8007ae8:	bb78      	cbnz	r0, 8007b4a <_vfiprintf_r+0xfe>
 8007aea:	06d9      	lsls	r1, r3, #27
 8007aec:	bf44      	itt	mi
 8007aee:	2220      	movmi	r2, #32
 8007af0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007af4:	071a      	lsls	r2, r3, #28
 8007af6:	bf44      	itt	mi
 8007af8:	222b      	movmi	r2, #43	; 0x2b
 8007afa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007afe:	782a      	ldrb	r2, [r5, #0]
 8007b00:	2a2a      	cmp	r2, #42	; 0x2a
 8007b02:	d02a      	beq.n	8007b5a <_vfiprintf_r+0x10e>
 8007b04:	9a07      	ldr	r2, [sp, #28]
 8007b06:	46a8      	mov	r8, r5
 8007b08:	2000      	movs	r0, #0
 8007b0a:	250a      	movs	r5, #10
 8007b0c:	4641      	mov	r1, r8
 8007b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b12:	3b30      	subs	r3, #48	; 0x30
 8007b14:	2b09      	cmp	r3, #9
 8007b16:	d969      	bls.n	8007bec <_vfiprintf_r+0x1a0>
 8007b18:	b360      	cbz	r0, 8007b74 <_vfiprintf_r+0x128>
 8007b1a:	e024      	b.n	8007b66 <_vfiprintf_r+0x11a>
 8007b1c:	4b50      	ldr	r3, [pc, #320]	; (8007c60 <_vfiprintf_r+0x214>)
 8007b1e:	429c      	cmp	r4, r3
 8007b20:	d101      	bne.n	8007b26 <_vfiprintf_r+0xda>
 8007b22:	68b4      	ldr	r4, [r6, #8]
 8007b24:	e7a2      	b.n	8007a6c <_vfiprintf_r+0x20>
 8007b26:	4b4f      	ldr	r3, [pc, #316]	; (8007c64 <_vfiprintf_r+0x218>)
 8007b28:	429c      	cmp	r4, r3
 8007b2a:	bf08      	it	eq
 8007b2c:	68f4      	ldreq	r4, [r6, #12]
 8007b2e:	e79d      	b.n	8007a6c <_vfiprintf_r+0x20>
 8007b30:	4621      	mov	r1, r4
 8007b32:	4630      	mov	r0, r6
 8007b34:	f000 fbd6 	bl	80082e4 <__swsetup_r>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d09d      	beq.n	8007a78 <_vfiprintf_r+0x2c>
 8007b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b40:	b01d      	add	sp, #116	; 0x74
 8007b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b46:	46a8      	mov	r8, r5
 8007b48:	e7a2      	b.n	8007a90 <_vfiprintf_r+0x44>
 8007b4a:	4a44      	ldr	r2, [pc, #272]	; (8007c5c <_vfiprintf_r+0x210>)
 8007b4c:	1a80      	subs	r0, r0, r2
 8007b4e:	fa0b f000 	lsl.w	r0, fp, r0
 8007b52:	4318      	orrs	r0, r3
 8007b54:	9004      	str	r0, [sp, #16]
 8007b56:	4645      	mov	r5, r8
 8007b58:	e7be      	b.n	8007ad8 <_vfiprintf_r+0x8c>
 8007b5a:	9a03      	ldr	r2, [sp, #12]
 8007b5c:	1d11      	adds	r1, r2, #4
 8007b5e:	6812      	ldr	r2, [r2, #0]
 8007b60:	9103      	str	r1, [sp, #12]
 8007b62:	2a00      	cmp	r2, #0
 8007b64:	db01      	blt.n	8007b6a <_vfiprintf_r+0x11e>
 8007b66:	9207      	str	r2, [sp, #28]
 8007b68:	e004      	b.n	8007b74 <_vfiprintf_r+0x128>
 8007b6a:	4252      	negs	r2, r2
 8007b6c:	f043 0302 	orr.w	r3, r3, #2
 8007b70:	9207      	str	r2, [sp, #28]
 8007b72:	9304      	str	r3, [sp, #16]
 8007b74:	f898 3000 	ldrb.w	r3, [r8]
 8007b78:	2b2e      	cmp	r3, #46	; 0x2e
 8007b7a:	d10e      	bne.n	8007b9a <_vfiprintf_r+0x14e>
 8007b7c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007b80:	2b2a      	cmp	r3, #42	; 0x2a
 8007b82:	d138      	bne.n	8007bf6 <_vfiprintf_r+0x1aa>
 8007b84:	9b03      	ldr	r3, [sp, #12]
 8007b86:	1d1a      	adds	r2, r3, #4
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	9203      	str	r2, [sp, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	bfb8      	it	lt
 8007b90:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b94:	f108 0802 	add.w	r8, r8, #2
 8007b98:	9305      	str	r3, [sp, #20]
 8007b9a:	4d33      	ldr	r5, [pc, #204]	; (8007c68 <_vfiprintf_r+0x21c>)
 8007b9c:	f898 1000 	ldrb.w	r1, [r8]
 8007ba0:	2203      	movs	r2, #3
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f7f8 fb1c 	bl	80001e0 <memchr>
 8007ba8:	b140      	cbz	r0, 8007bbc <_vfiprintf_r+0x170>
 8007baa:	2340      	movs	r3, #64	; 0x40
 8007bac:	1b40      	subs	r0, r0, r5
 8007bae:	fa03 f000 	lsl.w	r0, r3, r0
 8007bb2:	9b04      	ldr	r3, [sp, #16]
 8007bb4:	4303      	orrs	r3, r0
 8007bb6:	f108 0801 	add.w	r8, r8, #1
 8007bba:	9304      	str	r3, [sp, #16]
 8007bbc:	f898 1000 	ldrb.w	r1, [r8]
 8007bc0:	482a      	ldr	r0, [pc, #168]	; (8007c6c <_vfiprintf_r+0x220>)
 8007bc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bc6:	2206      	movs	r2, #6
 8007bc8:	f108 0701 	add.w	r7, r8, #1
 8007bcc:	f7f8 fb08 	bl	80001e0 <memchr>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d037      	beq.n	8007c44 <_vfiprintf_r+0x1f8>
 8007bd4:	4b26      	ldr	r3, [pc, #152]	; (8007c70 <_vfiprintf_r+0x224>)
 8007bd6:	bb1b      	cbnz	r3, 8007c20 <_vfiprintf_r+0x1d4>
 8007bd8:	9b03      	ldr	r3, [sp, #12]
 8007bda:	3307      	adds	r3, #7
 8007bdc:	f023 0307 	bic.w	r3, r3, #7
 8007be0:	3308      	adds	r3, #8
 8007be2:	9303      	str	r3, [sp, #12]
 8007be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be6:	444b      	add	r3, r9
 8007be8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bea:	e750      	b.n	8007a8e <_vfiprintf_r+0x42>
 8007bec:	fb05 3202 	mla	r2, r5, r2, r3
 8007bf0:	2001      	movs	r0, #1
 8007bf2:	4688      	mov	r8, r1
 8007bf4:	e78a      	b.n	8007b0c <_vfiprintf_r+0xc0>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f108 0801 	add.w	r8, r8, #1
 8007bfc:	9305      	str	r3, [sp, #20]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	250a      	movs	r5, #10
 8007c02:	4640      	mov	r0, r8
 8007c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c08:	3a30      	subs	r2, #48	; 0x30
 8007c0a:	2a09      	cmp	r2, #9
 8007c0c:	d903      	bls.n	8007c16 <_vfiprintf_r+0x1ca>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0c3      	beq.n	8007b9a <_vfiprintf_r+0x14e>
 8007c12:	9105      	str	r1, [sp, #20]
 8007c14:	e7c1      	b.n	8007b9a <_vfiprintf_r+0x14e>
 8007c16:	fb05 2101 	mla	r1, r5, r1, r2
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	4680      	mov	r8, r0
 8007c1e:	e7f0      	b.n	8007c02 <_vfiprintf_r+0x1b6>
 8007c20:	ab03      	add	r3, sp, #12
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	4622      	mov	r2, r4
 8007c26:	4b13      	ldr	r3, [pc, #76]	; (8007c74 <_vfiprintf_r+0x228>)
 8007c28:	a904      	add	r1, sp, #16
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f3af 8000 	nop.w
 8007c30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c34:	4681      	mov	r9, r0
 8007c36:	d1d5      	bne.n	8007be4 <_vfiprintf_r+0x198>
 8007c38:	89a3      	ldrh	r3, [r4, #12]
 8007c3a:	065b      	lsls	r3, r3, #25
 8007c3c:	f53f af7e 	bmi.w	8007b3c <_vfiprintf_r+0xf0>
 8007c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c42:	e77d      	b.n	8007b40 <_vfiprintf_r+0xf4>
 8007c44:	ab03      	add	r3, sp, #12
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	4622      	mov	r2, r4
 8007c4a:	4b0a      	ldr	r3, [pc, #40]	; (8007c74 <_vfiprintf_r+0x228>)
 8007c4c:	a904      	add	r1, sp, #16
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f000 f892 	bl	8007d78 <_printf_i>
 8007c54:	e7ec      	b.n	8007c30 <_vfiprintf_r+0x1e4>
 8007c56:	bf00      	nop
 8007c58:	08008e3c 	.word	0x08008e3c
 8007c5c:	08008e80 	.word	0x08008e80
 8007c60:	08008e5c 	.word	0x08008e5c
 8007c64:	08008e1c 	.word	0x08008e1c
 8007c68:	08008e86 	.word	0x08008e86
 8007c6c:	08008e8a 	.word	0x08008e8a
 8007c70:	00000000 	.word	0x00000000
 8007c74:	08007a27 	.word	0x08007a27

08007c78 <vfiprintf>:
 8007c78:	4613      	mov	r3, r2
 8007c7a:	460a      	mov	r2, r1
 8007c7c:	4601      	mov	r1, r0
 8007c7e:	4802      	ldr	r0, [pc, #8]	; (8007c88 <vfiprintf+0x10>)
 8007c80:	6800      	ldr	r0, [r0, #0]
 8007c82:	f7ff bee3 	b.w	8007a4c <_vfiprintf_r>
 8007c86:	bf00      	nop
 8007c88:	2000030c 	.word	0x2000030c

08007c8c <_printf_common>:
 8007c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c90:	4691      	mov	r9, r2
 8007c92:	461f      	mov	r7, r3
 8007c94:	688a      	ldr	r2, [r1, #8]
 8007c96:	690b      	ldr	r3, [r1, #16]
 8007c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	bfb8      	it	lt
 8007ca0:	4613      	movlt	r3, r2
 8007ca2:	f8c9 3000 	str.w	r3, [r9]
 8007ca6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007caa:	4606      	mov	r6, r0
 8007cac:	460c      	mov	r4, r1
 8007cae:	b112      	cbz	r2, 8007cb6 <_printf_common+0x2a>
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	f8c9 3000 	str.w	r3, [r9]
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	0699      	lsls	r1, r3, #26
 8007cba:	bf42      	ittt	mi
 8007cbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007cc0:	3302      	addmi	r3, #2
 8007cc2:	f8c9 3000 	strmi.w	r3, [r9]
 8007cc6:	6825      	ldr	r5, [r4, #0]
 8007cc8:	f015 0506 	ands.w	r5, r5, #6
 8007ccc:	d107      	bne.n	8007cde <_printf_common+0x52>
 8007cce:	f104 0a19 	add.w	sl, r4, #25
 8007cd2:	68e3      	ldr	r3, [r4, #12]
 8007cd4:	f8d9 2000 	ldr.w	r2, [r9]
 8007cd8:	1a9b      	subs	r3, r3, r2
 8007cda:	42ab      	cmp	r3, r5
 8007cdc:	dc28      	bgt.n	8007d30 <_printf_common+0xa4>
 8007cde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ce2:	6822      	ldr	r2, [r4, #0]
 8007ce4:	3300      	adds	r3, #0
 8007ce6:	bf18      	it	ne
 8007ce8:	2301      	movne	r3, #1
 8007cea:	0692      	lsls	r2, r2, #26
 8007cec:	d42d      	bmi.n	8007d4a <_printf_common+0xbe>
 8007cee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	47c0      	blx	r8
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	d020      	beq.n	8007d3e <_printf_common+0xb2>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	68e5      	ldr	r5, [r4, #12]
 8007d00:	f8d9 2000 	ldr.w	r2, [r9]
 8007d04:	f003 0306 	and.w	r3, r3, #6
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	bf08      	it	eq
 8007d0c:	1aad      	subeq	r5, r5, r2
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	6922      	ldr	r2, [r4, #16]
 8007d12:	bf0c      	ite	eq
 8007d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d18:	2500      	movne	r5, #0
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	bfc4      	itt	gt
 8007d1e:	1a9b      	subgt	r3, r3, r2
 8007d20:	18ed      	addgt	r5, r5, r3
 8007d22:	f04f 0900 	mov.w	r9, #0
 8007d26:	341a      	adds	r4, #26
 8007d28:	454d      	cmp	r5, r9
 8007d2a:	d11a      	bne.n	8007d62 <_printf_common+0xd6>
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	e008      	b.n	8007d42 <_printf_common+0xb6>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4652      	mov	r2, sl
 8007d34:	4639      	mov	r1, r7
 8007d36:	4630      	mov	r0, r6
 8007d38:	47c0      	blx	r8
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	d103      	bne.n	8007d46 <_printf_common+0xba>
 8007d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d46:	3501      	adds	r5, #1
 8007d48:	e7c3      	b.n	8007cd2 <_printf_common+0x46>
 8007d4a:	18e1      	adds	r1, r4, r3
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	2030      	movs	r0, #48	; 0x30
 8007d50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d54:	4422      	add	r2, r4
 8007d56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d5e:	3302      	adds	r3, #2
 8007d60:	e7c5      	b.n	8007cee <_printf_common+0x62>
 8007d62:	2301      	movs	r3, #1
 8007d64:	4622      	mov	r2, r4
 8007d66:	4639      	mov	r1, r7
 8007d68:	4630      	mov	r0, r6
 8007d6a:	47c0      	blx	r8
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d0e6      	beq.n	8007d3e <_printf_common+0xb2>
 8007d70:	f109 0901 	add.w	r9, r9, #1
 8007d74:	e7d8      	b.n	8007d28 <_printf_common+0x9c>
	...

08007d78 <_printf_i>:
 8007d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007d80:	460c      	mov	r4, r1
 8007d82:	7e09      	ldrb	r1, [r1, #24]
 8007d84:	b085      	sub	sp, #20
 8007d86:	296e      	cmp	r1, #110	; 0x6e
 8007d88:	4617      	mov	r7, r2
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	4698      	mov	r8, r3
 8007d8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d90:	f000 80b3 	beq.w	8007efa <_printf_i+0x182>
 8007d94:	d822      	bhi.n	8007ddc <_printf_i+0x64>
 8007d96:	2963      	cmp	r1, #99	; 0x63
 8007d98:	d036      	beq.n	8007e08 <_printf_i+0x90>
 8007d9a:	d80a      	bhi.n	8007db2 <_printf_i+0x3a>
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	f000 80b9 	beq.w	8007f14 <_printf_i+0x19c>
 8007da2:	2958      	cmp	r1, #88	; 0x58
 8007da4:	f000 8083 	beq.w	8007eae <_printf_i+0x136>
 8007da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007db0:	e032      	b.n	8007e18 <_printf_i+0xa0>
 8007db2:	2964      	cmp	r1, #100	; 0x64
 8007db4:	d001      	beq.n	8007dba <_printf_i+0x42>
 8007db6:	2969      	cmp	r1, #105	; 0x69
 8007db8:	d1f6      	bne.n	8007da8 <_printf_i+0x30>
 8007dba:	6820      	ldr	r0, [r4, #0]
 8007dbc:	6813      	ldr	r3, [r2, #0]
 8007dbe:	0605      	lsls	r5, r0, #24
 8007dc0:	f103 0104 	add.w	r1, r3, #4
 8007dc4:	d52a      	bpl.n	8007e1c <_printf_i+0xa4>
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6011      	str	r1, [r2, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	da03      	bge.n	8007dd6 <_printf_i+0x5e>
 8007dce:	222d      	movs	r2, #45	; 0x2d
 8007dd0:	425b      	negs	r3, r3
 8007dd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007dd6:	486f      	ldr	r0, [pc, #444]	; (8007f94 <_printf_i+0x21c>)
 8007dd8:	220a      	movs	r2, #10
 8007dda:	e039      	b.n	8007e50 <_printf_i+0xd8>
 8007ddc:	2973      	cmp	r1, #115	; 0x73
 8007dde:	f000 809d 	beq.w	8007f1c <_printf_i+0x1a4>
 8007de2:	d808      	bhi.n	8007df6 <_printf_i+0x7e>
 8007de4:	296f      	cmp	r1, #111	; 0x6f
 8007de6:	d020      	beq.n	8007e2a <_printf_i+0xb2>
 8007de8:	2970      	cmp	r1, #112	; 0x70
 8007dea:	d1dd      	bne.n	8007da8 <_printf_i+0x30>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	f043 0320 	orr.w	r3, r3, #32
 8007df2:	6023      	str	r3, [r4, #0]
 8007df4:	e003      	b.n	8007dfe <_printf_i+0x86>
 8007df6:	2975      	cmp	r1, #117	; 0x75
 8007df8:	d017      	beq.n	8007e2a <_printf_i+0xb2>
 8007dfa:	2978      	cmp	r1, #120	; 0x78
 8007dfc:	d1d4      	bne.n	8007da8 <_printf_i+0x30>
 8007dfe:	2378      	movs	r3, #120	; 0x78
 8007e00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e04:	4864      	ldr	r0, [pc, #400]	; (8007f98 <_printf_i+0x220>)
 8007e06:	e055      	b.n	8007eb4 <_printf_i+0x13c>
 8007e08:	6813      	ldr	r3, [r2, #0]
 8007e0a:	1d19      	adds	r1, r3, #4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6011      	str	r1, [r2, #0]
 8007e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e08c      	b.n	8007f36 <_printf_i+0x1be>
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6011      	str	r1, [r2, #0]
 8007e20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e24:	bf18      	it	ne
 8007e26:	b21b      	sxthne	r3, r3
 8007e28:	e7cf      	b.n	8007dca <_printf_i+0x52>
 8007e2a:	6813      	ldr	r3, [r2, #0]
 8007e2c:	6825      	ldr	r5, [r4, #0]
 8007e2e:	1d18      	adds	r0, r3, #4
 8007e30:	6010      	str	r0, [r2, #0]
 8007e32:	0628      	lsls	r0, r5, #24
 8007e34:	d501      	bpl.n	8007e3a <_printf_i+0xc2>
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	e002      	b.n	8007e40 <_printf_i+0xc8>
 8007e3a:	0668      	lsls	r0, r5, #25
 8007e3c:	d5fb      	bpl.n	8007e36 <_printf_i+0xbe>
 8007e3e:	881b      	ldrh	r3, [r3, #0]
 8007e40:	4854      	ldr	r0, [pc, #336]	; (8007f94 <_printf_i+0x21c>)
 8007e42:	296f      	cmp	r1, #111	; 0x6f
 8007e44:	bf14      	ite	ne
 8007e46:	220a      	movne	r2, #10
 8007e48:	2208      	moveq	r2, #8
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e50:	6865      	ldr	r5, [r4, #4]
 8007e52:	60a5      	str	r5, [r4, #8]
 8007e54:	2d00      	cmp	r5, #0
 8007e56:	f2c0 8095 	blt.w	8007f84 <_printf_i+0x20c>
 8007e5a:	6821      	ldr	r1, [r4, #0]
 8007e5c:	f021 0104 	bic.w	r1, r1, #4
 8007e60:	6021      	str	r1, [r4, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d13d      	bne.n	8007ee2 <_printf_i+0x16a>
 8007e66:	2d00      	cmp	r5, #0
 8007e68:	f040 808e 	bne.w	8007f88 <_printf_i+0x210>
 8007e6c:	4665      	mov	r5, ip
 8007e6e:	2a08      	cmp	r2, #8
 8007e70:	d10b      	bne.n	8007e8a <_printf_i+0x112>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	07db      	lsls	r3, r3, #31
 8007e76:	d508      	bpl.n	8007e8a <_printf_i+0x112>
 8007e78:	6923      	ldr	r3, [r4, #16]
 8007e7a:	6862      	ldr	r2, [r4, #4]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	bfde      	ittt	le
 8007e80:	2330      	movle	r3, #48	; 0x30
 8007e82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e8a:	ebac 0305 	sub.w	r3, ip, r5
 8007e8e:	6123      	str	r3, [r4, #16]
 8007e90:	f8cd 8000 	str.w	r8, [sp]
 8007e94:	463b      	mov	r3, r7
 8007e96:	aa03      	add	r2, sp, #12
 8007e98:	4621      	mov	r1, r4
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f7ff fef6 	bl	8007c8c <_printf_common>
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d14d      	bne.n	8007f40 <_printf_i+0x1c8>
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea8:	b005      	add	sp, #20
 8007eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007eae:	4839      	ldr	r0, [pc, #228]	; (8007f94 <_printf_i+0x21c>)
 8007eb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007eb4:	6813      	ldr	r3, [r2, #0]
 8007eb6:	6821      	ldr	r1, [r4, #0]
 8007eb8:	1d1d      	adds	r5, r3, #4
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6015      	str	r5, [r2, #0]
 8007ebe:	060a      	lsls	r2, r1, #24
 8007ec0:	d50b      	bpl.n	8007eda <_printf_i+0x162>
 8007ec2:	07ca      	lsls	r2, r1, #31
 8007ec4:	bf44      	itt	mi
 8007ec6:	f041 0120 	orrmi.w	r1, r1, #32
 8007eca:	6021      	strmi	r1, [r4, #0]
 8007ecc:	b91b      	cbnz	r3, 8007ed6 <_printf_i+0x15e>
 8007ece:	6822      	ldr	r2, [r4, #0]
 8007ed0:	f022 0220 	bic.w	r2, r2, #32
 8007ed4:	6022      	str	r2, [r4, #0]
 8007ed6:	2210      	movs	r2, #16
 8007ed8:	e7b7      	b.n	8007e4a <_printf_i+0xd2>
 8007eda:	064d      	lsls	r5, r1, #25
 8007edc:	bf48      	it	mi
 8007ede:	b29b      	uxthmi	r3, r3
 8007ee0:	e7ef      	b.n	8007ec2 <_printf_i+0x14a>
 8007ee2:	4665      	mov	r5, ip
 8007ee4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ee8:	fb02 3311 	mls	r3, r2, r1, r3
 8007eec:	5cc3      	ldrb	r3, [r0, r3]
 8007eee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	d1f5      	bne.n	8007ee4 <_printf_i+0x16c>
 8007ef8:	e7b9      	b.n	8007e6e <_printf_i+0xf6>
 8007efa:	6813      	ldr	r3, [r2, #0]
 8007efc:	6825      	ldr	r5, [r4, #0]
 8007efe:	6961      	ldr	r1, [r4, #20]
 8007f00:	1d18      	adds	r0, r3, #4
 8007f02:	6010      	str	r0, [r2, #0]
 8007f04:	0628      	lsls	r0, r5, #24
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	d501      	bpl.n	8007f0e <_printf_i+0x196>
 8007f0a:	6019      	str	r1, [r3, #0]
 8007f0c:	e002      	b.n	8007f14 <_printf_i+0x19c>
 8007f0e:	066a      	lsls	r2, r5, #25
 8007f10:	d5fb      	bpl.n	8007f0a <_printf_i+0x192>
 8007f12:	8019      	strh	r1, [r3, #0]
 8007f14:	2300      	movs	r3, #0
 8007f16:	6123      	str	r3, [r4, #16]
 8007f18:	4665      	mov	r5, ip
 8007f1a:	e7b9      	b.n	8007e90 <_printf_i+0x118>
 8007f1c:	6813      	ldr	r3, [r2, #0]
 8007f1e:	1d19      	adds	r1, r3, #4
 8007f20:	6011      	str	r1, [r2, #0]
 8007f22:	681d      	ldr	r5, [r3, #0]
 8007f24:	6862      	ldr	r2, [r4, #4]
 8007f26:	2100      	movs	r1, #0
 8007f28:	4628      	mov	r0, r5
 8007f2a:	f7f8 f959 	bl	80001e0 <memchr>
 8007f2e:	b108      	cbz	r0, 8007f34 <_printf_i+0x1bc>
 8007f30:	1b40      	subs	r0, r0, r5
 8007f32:	6060      	str	r0, [r4, #4]
 8007f34:	6863      	ldr	r3, [r4, #4]
 8007f36:	6123      	str	r3, [r4, #16]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f3e:	e7a7      	b.n	8007e90 <_printf_i+0x118>
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	462a      	mov	r2, r5
 8007f44:	4639      	mov	r1, r7
 8007f46:	4630      	mov	r0, r6
 8007f48:	47c0      	blx	r8
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	d0aa      	beq.n	8007ea4 <_printf_i+0x12c>
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	079b      	lsls	r3, r3, #30
 8007f52:	d413      	bmi.n	8007f7c <_printf_i+0x204>
 8007f54:	68e0      	ldr	r0, [r4, #12]
 8007f56:	9b03      	ldr	r3, [sp, #12]
 8007f58:	4298      	cmp	r0, r3
 8007f5a:	bfb8      	it	lt
 8007f5c:	4618      	movlt	r0, r3
 8007f5e:	e7a3      	b.n	8007ea8 <_printf_i+0x130>
 8007f60:	2301      	movs	r3, #1
 8007f62:	464a      	mov	r2, r9
 8007f64:	4639      	mov	r1, r7
 8007f66:	4630      	mov	r0, r6
 8007f68:	47c0      	blx	r8
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	d09a      	beq.n	8007ea4 <_printf_i+0x12c>
 8007f6e:	3501      	adds	r5, #1
 8007f70:	68e3      	ldr	r3, [r4, #12]
 8007f72:	9a03      	ldr	r2, [sp, #12]
 8007f74:	1a9b      	subs	r3, r3, r2
 8007f76:	42ab      	cmp	r3, r5
 8007f78:	dcf2      	bgt.n	8007f60 <_printf_i+0x1e8>
 8007f7a:	e7eb      	b.n	8007f54 <_printf_i+0x1dc>
 8007f7c:	2500      	movs	r5, #0
 8007f7e:	f104 0919 	add.w	r9, r4, #25
 8007f82:	e7f5      	b.n	8007f70 <_printf_i+0x1f8>
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1ac      	bne.n	8007ee2 <_printf_i+0x16a>
 8007f88:	7803      	ldrb	r3, [r0, #0]
 8007f8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f92:	e76c      	b.n	8007e6e <_printf_i+0xf6>
 8007f94:	08008e91 	.word	0x08008e91
 8007f98:	08008ea2 	.word	0x08008ea2

08007f9c <_open_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4c07      	ldr	r4, [pc, #28]	; (8007fbc <_open_r+0x20>)
 8007fa0:	4605      	mov	r5, r0
 8007fa2:	4608      	mov	r0, r1
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	6022      	str	r2, [r4, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	f7fc fba2 	bl	80046f4 <_open>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d102      	bne.n	8007fba <_open_r+0x1e>
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	b103      	cbz	r3, 8007fba <_open_r+0x1e>
 8007fb8:	602b      	str	r3, [r5, #0]
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	20000744 	.word	0x20000744

08007fc0 <_sbrk_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4c06      	ldr	r4, [pc, #24]	; (8007fdc <_sbrk_r+0x1c>)
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	4608      	mov	r0, r1
 8007fca:	6023      	str	r3, [r4, #0]
 8007fcc:	f7fa fad8 	bl	8002580 <_sbrk>
 8007fd0:	1c43      	adds	r3, r0, #1
 8007fd2:	d102      	bne.n	8007fda <_sbrk_r+0x1a>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	b103      	cbz	r3, 8007fda <_sbrk_r+0x1a>
 8007fd8:	602b      	str	r3, [r5, #0]
 8007fda:	bd38      	pop	{r3, r4, r5, pc}
 8007fdc:	20000744 	.word	0x20000744

08007fe0 <setbuf>:
 8007fe0:	2900      	cmp	r1, #0
 8007fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fe6:	bf0c      	ite	eq
 8007fe8:	2202      	moveq	r2, #2
 8007fea:	2200      	movne	r2, #0
 8007fec:	f000 b800 	b.w	8007ff0 <setvbuf>

08007ff0 <setvbuf>:
 8007ff0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ff4:	461d      	mov	r5, r3
 8007ff6:	4b51      	ldr	r3, [pc, #324]	; (800813c <setvbuf+0x14c>)
 8007ff8:	681e      	ldr	r6, [r3, #0]
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	460f      	mov	r7, r1
 8007ffe:	4690      	mov	r8, r2
 8008000:	b126      	cbz	r6, 800800c <setvbuf+0x1c>
 8008002:	69b3      	ldr	r3, [r6, #24]
 8008004:	b913      	cbnz	r3, 800800c <setvbuf+0x1c>
 8008006:	4630      	mov	r0, r6
 8008008:	f7ff fa3c 	bl	8007484 <__sinit>
 800800c:	4b4c      	ldr	r3, [pc, #304]	; (8008140 <setvbuf+0x150>)
 800800e:	429c      	cmp	r4, r3
 8008010:	d152      	bne.n	80080b8 <setvbuf+0xc8>
 8008012:	6874      	ldr	r4, [r6, #4]
 8008014:	f1b8 0f02 	cmp.w	r8, #2
 8008018:	d006      	beq.n	8008028 <setvbuf+0x38>
 800801a:	f1b8 0f01 	cmp.w	r8, #1
 800801e:	f200 8089 	bhi.w	8008134 <setvbuf+0x144>
 8008022:	2d00      	cmp	r5, #0
 8008024:	f2c0 8086 	blt.w	8008134 <setvbuf+0x144>
 8008028:	4621      	mov	r1, r4
 800802a:	4630      	mov	r0, r6
 800802c:	f7ff f9ae 	bl	800738c <_fflush_r>
 8008030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008032:	b141      	cbz	r1, 8008046 <setvbuf+0x56>
 8008034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008038:	4299      	cmp	r1, r3
 800803a:	d002      	beq.n	8008042 <setvbuf+0x52>
 800803c:	4630      	mov	r0, r6
 800803e:	f7ff fc33 	bl	80078a8 <_free_r>
 8008042:	2300      	movs	r3, #0
 8008044:	6363      	str	r3, [r4, #52]	; 0x34
 8008046:	2300      	movs	r3, #0
 8008048:	61a3      	str	r3, [r4, #24]
 800804a:	6063      	str	r3, [r4, #4]
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	061b      	lsls	r3, r3, #24
 8008050:	d503      	bpl.n	800805a <setvbuf+0x6a>
 8008052:	6921      	ldr	r1, [r4, #16]
 8008054:	4630      	mov	r0, r6
 8008056:	f7ff fc27 	bl	80078a8 <_free_r>
 800805a:	89a3      	ldrh	r3, [r4, #12]
 800805c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008060:	f023 0303 	bic.w	r3, r3, #3
 8008064:	f1b8 0f02 	cmp.w	r8, #2
 8008068:	81a3      	strh	r3, [r4, #12]
 800806a:	d05d      	beq.n	8008128 <setvbuf+0x138>
 800806c:	ab01      	add	r3, sp, #4
 800806e:	466a      	mov	r2, sp
 8008070:	4621      	mov	r1, r4
 8008072:	4630      	mov	r0, r6
 8008074:	f7ff fb90 	bl	8007798 <__swhatbuf_r>
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	4318      	orrs	r0, r3
 800807c:	81a0      	strh	r0, [r4, #12]
 800807e:	bb2d      	cbnz	r5, 80080cc <setvbuf+0xdc>
 8008080:	9d00      	ldr	r5, [sp, #0]
 8008082:	4628      	mov	r0, r5
 8008084:	f7ff fbec 	bl	8007860 <malloc>
 8008088:	4607      	mov	r7, r0
 800808a:	2800      	cmp	r0, #0
 800808c:	d14e      	bne.n	800812c <setvbuf+0x13c>
 800808e:	f8dd 9000 	ldr.w	r9, [sp]
 8008092:	45a9      	cmp	r9, r5
 8008094:	d13c      	bne.n	8008110 <setvbuf+0x120>
 8008096:	f04f 30ff 	mov.w	r0, #4294967295
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	f043 0302 	orr.w	r3, r3, #2
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	2300      	movs	r3, #0
 80080a4:	60a3      	str	r3, [r4, #8]
 80080a6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080aa:	6023      	str	r3, [r4, #0]
 80080ac:	6123      	str	r3, [r4, #16]
 80080ae:	2301      	movs	r3, #1
 80080b0:	6163      	str	r3, [r4, #20]
 80080b2:	b003      	add	sp, #12
 80080b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080b8:	4b22      	ldr	r3, [pc, #136]	; (8008144 <setvbuf+0x154>)
 80080ba:	429c      	cmp	r4, r3
 80080bc:	d101      	bne.n	80080c2 <setvbuf+0xd2>
 80080be:	68b4      	ldr	r4, [r6, #8]
 80080c0:	e7a8      	b.n	8008014 <setvbuf+0x24>
 80080c2:	4b21      	ldr	r3, [pc, #132]	; (8008148 <setvbuf+0x158>)
 80080c4:	429c      	cmp	r4, r3
 80080c6:	bf08      	it	eq
 80080c8:	68f4      	ldreq	r4, [r6, #12]
 80080ca:	e7a3      	b.n	8008014 <setvbuf+0x24>
 80080cc:	2f00      	cmp	r7, #0
 80080ce:	d0d8      	beq.n	8008082 <setvbuf+0x92>
 80080d0:	69b3      	ldr	r3, [r6, #24]
 80080d2:	b913      	cbnz	r3, 80080da <setvbuf+0xea>
 80080d4:	4630      	mov	r0, r6
 80080d6:	f7ff f9d5 	bl	8007484 <__sinit>
 80080da:	f1b8 0f01 	cmp.w	r8, #1
 80080de:	bf08      	it	eq
 80080e0:	89a3      	ldrheq	r3, [r4, #12]
 80080e2:	6027      	str	r7, [r4, #0]
 80080e4:	bf04      	itt	eq
 80080e6:	f043 0301 	orreq.w	r3, r3, #1
 80080ea:	81a3      	strheq	r3, [r4, #12]
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	f013 0008 	ands.w	r0, r3, #8
 80080f2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80080f6:	d01b      	beq.n	8008130 <setvbuf+0x140>
 80080f8:	f013 0001 	ands.w	r0, r3, #1
 80080fc:	bf18      	it	ne
 80080fe:	426d      	negne	r5, r5
 8008100:	f04f 0300 	mov.w	r3, #0
 8008104:	bf1d      	ittte	ne
 8008106:	60a3      	strne	r3, [r4, #8]
 8008108:	61a5      	strne	r5, [r4, #24]
 800810a:	4618      	movne	r0, r3
 800810c:	60a5      	streq	r5, [r4, #8]
 800810e:	e7d0      	b.n	80080b2 <setvbuf+0xc2>
 8008110:	4648      	mov	r0, r9
 8008112:	f7ff fba5 	bl	8007860 <malloc>
 8008116:	4607      	mov	r7, r0
 8008118:	2800      	cmp	r0, #0
 800811a:	d0bc      	beq.n	8008096 <setvbuf+0xa6>
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008122:	81a3      	strh	r3, [r4, #12]
 8008124:	464d      	mov	r5, r9
 8008126:	e7d3      	b.n	80080d0 <setvbuf+0xe0>
 8008128:	2000      	movs	r0, #0
 800812a:	e7b6      	b.n	800809a <setvbuf+0xaa>
 800812c:	46a9      	mov	r9, r5
 800812e:	e7f5      	b.n	800811c <setvbuf+0x12c>
 8008130:	60a0      	str	r0, [r4, #8]
 8008132:	e7be      	b.n	80080b2 <setvbuf+0xc2>
 8008134:	f04f 30ff 	mov.w	r0, #4294967295
 8008138:	e7bb      	b.n	80080b2 <setvbuf+0xc2>
 800813a:	bf00      	nop
 800813c:	2000030c 	.word	0x2000030c
 8008140:	08008e3c 	.word	0x08008e3c
 8008144:	08008e5c 	.word	0x08008e5c
 8008148:	08008e1c 	.word	0x08008e1c

0800814c <__sread>:
 800814c:	b510      	push	{r4, lr}
 800814e:	460c      	mov	r4, r1
 8008150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008154:	f000 fa7c 	bl	8008650 <_read_r>
 8008158:	2800      	cmp	r0, #0
 800815a:	bfab      	itete	ge
 800815c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800815e:	89a3      	ldrhlt	r3, [r4, #12]
 8008160:	181b      	addge	r3, r3, r0
 8008162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008166:	bfac      	ite	ge
 8008168:	6563      	strge	r3, [r4, #84]	; 0x54
 800816a:	81a3      	strhlt	r3, [r4, #12]
 800816c:	bd10      	pop	{r4, pc}

0800816e <__swrite>:
 800816e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008172:	461f      	mov	r7, r3
 8008174:	898b      	ldrh	r3, [r1, #12]
 8008176:	05db      	lsls	r3, r3, #23
 8008178:	4605      	mov	r5, r0
 800817a:	460c      	mov	r4, r1
 800817c:	4616      	mov	r6, r2
 800817e:	d505      	bpl.n	800818c <__swrite+0x1e>
 8008180:	2302      	movs	r3, #2
 8008182:	2200      	movs	r2, #0
 8008184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008188:	f000 fa50 	bl	800862c <_lseek_r>
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008196:	81a3      	strh	r3, [r4, #12]
 8008198:	4632      	mov	r2, r6
 800819a:	463b      	mov	r3, r7
 800819c:	4628      	mov	r0, r5
 800819e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081a2:	f000 b88d 	b.w	80082c0 <_write_r>

080081a6 <__sseek>:
 80081a6:	b510      	push	{r4, lr}
 80081a8:	460c      	mov	r4, r1
 80081aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ae:	f000 fa3d 	bl	800862c <_lseek_r>
 80081b2:	1c43      	adds	r3, r0, #1
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	bf15      	itete	ne
 80081b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80081ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081c2:	81a3      	strheq	r3, [r4, #12]
 80081c4:	bf18      	it	ne
 80081c6:	81a3      	strhne	r3, [r4, #12]
 80081c8:	bd10      	pop	{r4, pc}

080081ca <__sclose>:
 80081ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ce:	f000 b9c5 	b.w	800855c <_close_r>

080081d2 <strncmp>:
 80081d2:	b510      	push	{r4, lr}
 80081d4:	b16a      	cbz	r2, 80081f2 <strncmp+0x20>
 80081d6:	3901      	subs	r1, #1
 80081d8:	1884      	adds	r4, r0, r2
 80081da:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d103      	bne.n	80081ee <strncmp+0x1c>
 80081e6:	42a0      	cmp	r0, r4
 80081e8:	d001      	beq.n	80081ee <strncmp+0x1c>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1f5      	bne.n	80081da <strncmp+0x8>
 80081ee:	1a98      	subs	r0, r3, r2
 80081f0:	bd10      	pop	{r4, pc}
 80081f2:	4610      	mov	r0, r2
 80081f4:	e7fc      	b.n	80081f0 <strncmp+0x1e>

080081f6 <strspn>:
 80081f6:	b570      	push	{r4, r5, r6, lr}
 80081f8:	4603      	mov	r3, r0
 80081fa:	461a      	mov	r2, r3
 80081fc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008200:	b13d      	cbz	r5, 8008212 <strspn+0x1c>
 8008202:	1e4c      	subs	r4, r1, #1
 8008204:	e001      	b.n	800820a <strspn+0x14>
 8008206:	42ae      	cmp	r6, r5
 8008208:	d005      	beq.n	8008216 <strspn+0x20>
 800820a:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800820e:	2e00      	cmp	r6, #0
 8008210:	d1f9      	bne.n	8008206 <strspn+0x10>
 8008212:	1a18      	subs	r0, r3, r0
 8008214:	bd70      	pop	{r4, r5, r6, pc}
 8008216:	4613      	mov	r3, r2
 8008218:	e7ef      	b.n	80081fa <strspn+0x4>
	...

0800821c <__swbuf_r>:
 800821c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821e:	460e      	mov	r6, r1
 8008220:	4614      	mov	r4, r2
 8008222:	4605      	mov	r5, r0
 8008224:	b118      	cbz	r0, 800822e <__swbuf_r+0x12>
 8008226:	6983      	ldr	r3, [r0, #24]
 8008228:	b90b      	cbnz	r3, 800822e <__swbuf_r+0x12>
 800822a:	f7ff f92b 	bl	8007484 <__sinit>
 800822e:	4b21      	ldr	r3, [pc, #132]	; (80082b4 <__swbuf_r+0x98>)
 8008230:	429c      	cmp	r4, r3
 8008232:	d12a      	bne.n	800828a <__swbuf_r+0x6e>
 8008234:	686c      	ldr	r4, [r5, #4]
 8008236:	69a3      	ldr	r3, [r4, #24]
 8008238:	60a3      	str	r3, [r4, #8]
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	071a      	lsls	r2, r3, #28
 800823e:	d52e      	bpl.n	800829e <__swbuf_r+0x82>
 8008240:	6923      	ldr	r3, [r4, #16]
 8008242:	b363      	cbz	r3, 800829e <__swbuf_r+0x82>
 8008244:	6923      	ldr	r3, [r4, #16]
 8008246:	6820      	ldr	r0, [r4, #0]
 8008248:	1ac0      	subs	r0, r0, r3
 800824a:	6963      	ldr	r3, [r4, #20]
 800824c:	b2f6      	uxtb	r6, r6
 800824e:	4283      	cmp	r3, r0
 8008250:	4637      	mov	r7, r6
 8008252:	dc04      	bgt.n	800825e <__swbuf_r+0x42>
 8008254:	4621      	mov	r1, r4
 8008256:	4628      	mov	r0, r5
 8008258:	f7ff f898 	bl	800738c <_fflush_r>
 800825c:	bb28      	cbnz	r0, 80082aa <__swbuf_r+0x8e>
 800825e:	68a3      	ldr	r3, [r4, #8]
 8008260:	3b01      	subs	r3, #1
 8008262:	60a3      	str	r3, [r4, #8]
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	6022      	str	r2, [r4, #0]
 800826a:	701e      	strb	r6, [r3, #0]
 800826c:	6963      	ldr	r3, [r4, #20]
 800826e:	3001      	adds	r0, #1
 8008270:	4283      	cmp	r3, r0
 8008272:	d004      	beq.n	800827e <__swbuf_r+0x62>
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	07db      	lsls	r3, r3, #31
 8008278:	d519      	bpl.n	80082ae <__swbuf_r+0x92>
 800827a:	2e0a      	cmp	r6, #10
 800827c:	d117      	bne.n	80082ae <__swbuf_r+0x92>
 800827e:	4621      	mov	r1, r4
 8008280:	4628      	mov	r0, r5
 8008282:	f7ff f883 	bl	800738c <_fflush_r>
 8008286:	b190      	cbz	r0, 80082ae <__swbuf_r+0x92>
 8008288:	e00f      	b.n	80082aa <__swbuf_r+0x8e>
 800828a:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <__swbuf_r+0x9c>)
 800828c:	429c      	cmp	r4, r3
 800828e:	d101      	bne.n	8008294 <__swbuf_r+0x78>
 8008290:	68ac      	ldr	r4, [r5, #8]
 8008292:	e7d0      	b.n	8008236 <__swbuf_r+0x1a>
 8008294:	4b09      	ldr	r3, [pc, #36]	; (80082bc <__swbuf_r+0xa0>)
 8008296:	429c      	cmp	r4, r3
 8008298:	bf08      	it	eq
 800829a:	68ec      	ldreq	r4, [r5, #12]
 800829c:	e7cb      	b.n	8008236 <__swbuf_r+0x1a>
 800829e:	4621      	mov	r1, r4
 80082a0:	4628      	mov	r0, r5
 80082a2:	f000 f81f 	bl	80082e4 <__swsetup_r>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d0cc      	beq.n	8008244 <__swbuf_r+0x28>
 80082aa:	f04f 37ff 	mov.w	r7, #4294967295
 80082ae:	4638      	mov	r0, r7
 80082b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b2:	bf00      	nop
 80082b4:	08008e3c 	.word	0x08008e3c
 80082b8:	08008e5c 	.word	0x08008e5c
 80082bc:	08008e1c 	.word	0x08008e1c

080082c0 <_write_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4c07      	ldr	r4, [pc, #28]	; (80082e0 <_write_r+0x20>)
 80082c4:	4605      	mov	r5, r0
 80082c6:	4608      	mov	r0, r1
 80082c8:	4611      	mov	r1, r2
 80082ca:	2200      	movs	r2, #0
 80082cc:	6022      	str	r2, [r4, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	f7fc fb20 	bl	8004914 <_write>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d102      	bne.n	80082de <_write_r+0x1e>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	b103      	cbz	r3, 80082de <_write_r+0x1e>
 80082dc:	602b      	str	r3, [r5, #0]
 80082de:	bd38      	pop	{r3, r4, r5, pc}
 80082e0:	20000744 	.word	0x20000744

080082e4 <__swsetup_r>:
 80082e4:	4b32      	ldr	r3, [pc, #200]	; (80083b0 <__swsetup_r+0xcc>)
 80082e6:	b570      	push	{r4, r5, r6, lr}
 80082e8:	681d      	ldr	r5, [r3, #0]
 80082ea:	4606      	mov	r6, r0
 80082ec:	460c      	mov	r4, r1
 80082ee:	b125      	cbz	r5, 80082fa <__swsetup_r+0x16>
 80082f0:	69ab      	ldr	r3, [r5, #24]
 80082f2:	b913      	cbnz	r3, 80082fa <__swsetup_r+0x16>
 80082f4:	4628      	mov	r0, r5
 80082f6:	f7ff f8c5 	bl	8007484 <__sinit>
 80082fa:	4b2e      	ldr	r3, [pc, #184]	; (80083b4 <__swsetup_r+0xd0>)
 80082fc:	429c      	cmp	r4, r3
 80082fe:	d10f      	bne.n	8008320 <__swsetup_r+0x3c>
 8008300:	686c      	ldr	r4, [r5, #4]
 8008302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008306:	b29a      	uxth	r2, r3
 8008308:	0715      	lsls	r5, r2, #28
 800830a:	d42c      	bmi.n	8008366 <__swsetup_r+0x82>
 800830c:	06d0      	lsls	r0, r2, #27
 800830e:	d411      	bmi.n	8008334 <__swsetup_r+0x50>
 8008310:	2209      	movs	r2, #9
 8008312:	6032      	str	r2, [r6, #0]
 8008314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008318:	81a3      	strh	r3, [r4, #12]
 800831a:	f04f 30ff 	mov.w	r0, #4294967295
 800831e:	e03e      	b.n	800839e <__swsetup_r+0xba>
 8008320:	4b25      	ldr	r3, [pc, #148]	; (80083b8 <__swsetup_r+0xd4>)
 8008322:	429c      	cmp	r4, r3
 8008324:	d101      	bne.n	800832a <__swsetup_r+0x46>
 8008326:	68ac      	ldr	r4, [r5, #8]
 8008328:	e7eb      	b.n	8008302 <__swsetup_r+0x1e>
 800832a:	4b24      	ldr	r3, [pc, #144]	; (80083bc <__swsetup_r+0xd8>)
 800832c:	429c      	cmp	r4, r3
 800832e:	bf08      	it	eq
 8008330:	68ec      	ldreq	r4, [r5, #12]
 8008332:	e7e6      	b.n	8008302 <__swsetup_r+0x1e>
 8008334:	0751      	lsls	r1, r2, #29
 8008336:	d512      	bpl.n	800835e <__swsetup_r+0x7a>
 8008338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800833a:	b141      	cbz	r1, 800834e <__swsetup_r+0x6a>
 800833c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008340:	4299      	cmp	r1, r3
 8008342:	d002      	beq.n	800834a <__swsetup_r+0x66>
 8008344:	4630      	mov	r0, r6
 8008346:	f7ff faaf 	bl	80078a8 <_free_r>
 800834a:	2300      	movs	r3, #0
 800834c:	6363      	str	r3, [r4, #52]	; 0x34
 800834e:	89a3      	ldrh	r3, [r4, #12]
 8008350:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008354:	81a3      	strh	r3, [r4, #12]
 8008356:	2300      	movs	r3, #0
 8008358:	6063      	str	r3, [r4, #4]
 800835a:	6923      	ldr	r3, [r4, #16]
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	f043 0308 	orr.w	r3, r3, #8
 8008364:	81a3      	strh	r3, [r4, #12]
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	b94b      	cbnz	r3, 800837e <__swsetup_r+0x9a>
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008374:	d003      	beq.n	800837e <__swsetup_r+0x9a>
 8008376:	4621      	mov	r1, r4
 8008378:	4630      	mov	r0, r6
 800837a:	f7ff fa31 	bl	80077e0 <__smakebuf_r>
 800837e:	89a2      	ldrh	r2, [r4, #12]
 8008380:	f012 0301 	ands.w	r3, r2, #1
 8008384:	d00c      	beq.n	80083a0 <__swsetup_r+0xbc>
 8008386:	2300      	movs	r3, #0
 8008388:	60a3      	str	r3, [r4, #8]
 800838a:	6963      	ldr	r3, [r4, #20]
 800838c:	425b      	negs	r3, r3
 800838e:	61a3      	str	r3, [r4, #24]
 8008390:	6923      	ldr	r3, [r4, #16]
 8008392:	b953      	cbnz	r3, 80083aa <__swsetup_r+0xc6>
 8008394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008398:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800839c:	d1ba      	bne.n	8008314 <__swsetup_r+0x30>
 800839e:	bd70      	pop	{r4, r5, r6, pc}
 80083a0:	0792      	lsls	r2, r2, #30
 80083a2:	bf58      	it	pl
 80083a4:	6963      	ldrpl	r3, [r4, #20]
 80083a6:	60a3      	str	r3, [r4, #8]
 80083a8:	e7f2      	b.n	8008390 <__swsetup_r+0xac>
 80083aa:	2000      	movs	r0, #0
 80083ac:	e7f7      	b.n	800839e <__swsetup_r+0xba>
 80083ae:	bf00      	nop
 80083b0:	2000030c 	.word	0x2000030c
 80083b4:	08008e3c 	.word	0x08008e3c
 80083b8:	08008e5c 	.word	0x08008e5c
 80083bc:	08008e1c 	.word	0x08008e1c

080083c0 <__register_exitproc>:
 80083c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c4:	4d2c      	ldr	r5, [pc, #176]	; (8008478 <__register_exitproc+0xb8>)
 80083c6:	682c      	ldr	r4, [r5, #0]
 80083c8:	4607      	mov	r7, r0
 80083ca:	460e      	mov	r6, r1
 80083cc:	4691      	mov	r9, r2
 80083ce:	4698      	mov	r8, r3
 80083d0:	b934      	cbnz	r4, 80083e0 <__register_exitproc+0x20>
 80083d2:	4b2a      	ldr	r3, [pc, #168]	; (800847c <__register_exitproc+0xbc>)
 80083d4:	4c2a      	ldr	r4, [pc, #168]	; (8008480 <__register_exitproc+0xc0>)
 80083d6:	602c      	str	r4, [r5, #0]
 80083d8:	b113      	cbz	r3, 80083e0 <__register_exitproc+0x20>
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80083e0:	6863      	ldr	r3, [r4, #4]
 80083e2:	2b1f      	cmp	r3, #31
 80083e4:	dd3d      	ble.n	8008462 <__register_exitproc+0xa2>
 80083e6:	4b27      	ldr	r3, [pc, #156]	; (8008484 <__register_exitproc+0xc4>)
 80083e8:	b91b      	cbnz	r3, 80083f2 <__register_exitproc+0x32>
 80083ea:	f04f 30ff 	mov.w	r0, #4294967295
 80083ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083f2:	208c      	movs	r0, #140	; 0x8c
 80083f4:	f7ff fa34 	bl	8007860 <malloc>
 80083f8:	4604      	mov	r4, r0
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d0f5      	beq.n	80083ea <__register_exitproc+0x2a>
 80083fe:	2300      	movs	r3, #0
 8008400:	682a      	ldr	r2, [r5, #0]
 8008402:	6002      	str	r2, [r0, #0]
 8008404:	6043      	str	r3, [r0, #4]
 8008406:	6028      	str	r0, [r5, #0]
 8008408:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800840c:	b30f      	cbz	r7, 8008452 <__register_exitproc+0x92>
 800840e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8008412:	f7ff fa25 	bl	8007860 <malloc>
 8008416:	2800      	cmp	r0, #0
 8008418:	d0e7      	beq.n	80083ea <__register_exitproc+0x2a>
 800841a:	2300      	movs	r3, #0
 800841c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8008420:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8008424:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8008428:	6862      	ldr	r2, [r4, #4]
 800842a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 800842e:	2301      	movs	r3, #1
 8008430:	4093      	lsls	r3, r2
 8008432:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8008436:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 800843a:	431a      	orrs	r2, r3
 800843c:	2f02      	cmp	r7, #2
 800843e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8008442:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8008446:	bf02      	ittt	eq
 8008448:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 800844c:	4313      	orreq	r3, r2
 800844e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8008452:	6863      	ldr	r3, [r4, #4]
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	3302      	adds	r3, #2
 8008458:	6062      	str	r2, [r4, #4]
 800845a:	2000      	movs	r0, #0
 800845c:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8008460:	e7c5      	b.n	80083ee <__register_exitproc+0x2e>
 8008462:	2f00      	cmp	r7, #0
 8008464:	d0f5      	beq.n	8008452 <__register_exitproc+0x92>
 8008466:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800846a:	2800      	cmp	r0, #0
 800846c:	d1dc      	bne.n	8008428 <__register_exitproc+0x68>
 800846e:	4b05      	ldr	r3, [pc, #20]	; (8008484 <__register_exitproc+0xc4>)
 8008470:	2b00      	cmp	r3, #0
 8008472:	d0ba      	beq.n	80083ea <__register_exitproc+0x2a>
 8008474:	e7cb      	b.n	800840e <__register_exitproc+0x4e>
 8008476:	bf00      	nop
 8008478:	200005e8 	.word	0x200005e8
 800847c:	00000000 	.word	0x00000000
 8008480:	2000055c 	.word	0x2000055c
 8008484:	08007861 	.word	0x08007861

08008488 <__call_exitprocs>:
 8008488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8008558 <__call_exitprocs+0xd0>
 8008490:	9001      	str	r0, [sp, #4]
 8008492:	460f      	mov	r7, r1
 8008494:	46c3      	mov	fp, r8
 8008496:	f8d8 4000 	ldr.w	r4, [r8]
 800849a:	465e      	mov	r6, fp
 800849c:	f04f 0a01 	mov.w	sl, #1
 80084a0:	b914      	cbnz	r4, 80084a8 <__call_exitprocs+0x20>
 80084a2:	b003      	add	sp, #12
 80084a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a8:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
 80084ac:	6865      	ldr	r5, [r4, #4]
 80084ae:	3d01      	subs	r5, #1
 80084b0:	2d00      	cmp	r5, #0
 80084b2:	da15      	bge.n	80084e0 <__call_exitprocs+0x58>
 80084b4:	4b27      	ldr	r3, [pc, #156]	; (8008554 <__call_exitprocs+0xcc>)
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0f3      	beq.n	80084a2 <__call_exitprocs+0x1a>
 80084ba:	e9d4 2100 	ldrd	r2, r1, [r4]
 80084be:	2900      	cmp	r1, #0
 80084c0:	d146      	bne.n	8008550 <__call_exitprocs+0xc8>
 80084c2:	2a00      	cmp	r2, #0
 80084c4:	d044      	beq.n	8008550 <__call_exitprocs+0xc8>
 80084c6:	6032      	str	r2, [r6, #0]
 80084c8:	f1b9 0f00 	cmp.w	r9, #0
 80084cc:	d002      	beq.n	80084d4 <__call_exitprocs+0x4c>
 80084ce:	4648      	mov	r0, r9
 80084d0:	f7ff f9ce 	bl	8007870 <free>
 80084d4:	4620      	mov	r0, r4
 80084d6:	f7ff f9cb 	bl	8007870 <free>
 80084da:	6832      	ldr	r2, [r6, #0]
 80084dc:	4614      	mov	r4, r2
 80084de:	e7df      	b.n	80084a0 <__call_exitprocs+0x18>
 80084e0:	b147      	cbz	r7, 80084f4 <__call_exitprocs+0x6c>
 80084e2:	f1b9 0f00 	cmp.w	r9, #0
 80084e6:	d0e2      	beq.n	80084ae <__call_exitprocs+0x26>
 80084e8:	eb09 0285 	add.w	r2, r9, r5, lsl #2
 80084ec:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80084f0:	42ba      	cmp	r2, r7
 80084f2:	d1dc      	bne.n	80084ae <__call_exitprocs+0x26>
 80084f4:	6861      	ldr	r1, [r4, #4]
 80084f6:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 80084fa:	3901      	subs	r1, #1
 80084fc:	42a9      	cmp	r1, r5
 80084fe:	6882      	ldr	r2, [r0, #8]
 8008500:	bf0e      	itee	eq
 8008502:	6065      	streq	r5, [r4, #4]
 8008504:	2300      	movne	r3, #0
 8008506:	6083      	strne	r3, [r0, #8]
 8008508:	2a00      	cmp	r2, #0
 800850a:	d0d0      	beq.n	80084ae <__call_exitprocs+0x26>
 800850c:	6863      	ldr	r3, [r4, #4]
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	f1b9 0f00 	cmp.w	r9, #0
 8008514:	d006      	beq.n	8008524 <__call_exitprocs+0x9c>
 8008516:	f8d9 1100 	ldr.w	r1, [r9, #256]	; 0x100
 800851a:	fa0a fc05 	lsl.w	ip, sl, r5
 800851e:	ea1c 0f01 	tst.w	ip, r1
 8008522:	d108      	bne.n	8008536 <__call_exitprocs+0xae>
 8008524:	4790      	blx	r2
 8008526:	6862      	ldr	r2, [r4, #4]
 8008528:	9b00      	ldr	r3, [sp, #0]
 800852a:	429a      	cmp	r2, r3
 800852c:	d1b3      	bne.n	8008496 <__call_exitprocs+0xe>
 800852e:	6832      	ldr	r2, [r6, #0]
 8008530:	42a2      	cmp	r2, r4
 8008532:	d0bc      	beq.n	80084ae <__call_exitprocs+0x26>
 8008534:	e7af      	b.n	8008496 <__call_exitprocs+0xe>
 8008536:	f8d9 0104 	ldr.w	r0, [r9, #260]	; 0x104
 800853a:	f859 1025 	ldr.w	r1, [r9, r5, lsl #2]
 800853e:	ea1c 0f00 	tst.w	ip, r0
 8008542:	d102      	bne.n	800854a <__call_exitprocs+0xc2>
 8008544:	9801      	ldr	r0, [sp, #4]
 8008546:	4790      	blx	r2
 8008548:	e7ed      	b.n	8008526 <__call_exitprocs+0x9e>
 800854a:	4608      	mov	r0, r1
 800854c:	4790      	blx	r2
 800854e:	e7ea      	b.n	8008526 <__call_exitprocs+0x9e>
 8008550:	4626      	mov	r6, r4
 8008552:	e7c3      	b.n	80084dc <__call_exitprocs+0x54>
 8008554:	08007871 	.word	0x08007871
 8008558:	200005e8 	.word	0x200005e8

0800855c <_close_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4c06      	ldr	r4, [pc, #24]	; (8008578 <_close_r+0x1c>)
 8008560:	2300      	movs	r3, #0
 8008562:	4605      	mov	r5, r0
 8008564:	4608      	mov	r0, r1
 8008566:	6023      	str	r3, [r4, #0]
 8008568:	f7fc f98a 	bl	8004880 <_close>
 800856c:	1c43      	adds	r3, r0, #1
 800856e:	d102      	bne.n	8008576 <_close_r+0x1a>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	b103      	cbz	r3, 8008576 <_close_r+0x1a>
 8008574:	602b      	str	r3, [r5, #0]
 8008576:	bd38      	pop	{r3, r4, r5, pc}
 8008578:	20000744 	.word	0x20000744

0800857c <__sflags>:
 800857c:	780b      	ldrb	r3, [r1, #0]
 800857e:	2b72      	cmp	r3, #114	; 0x72
 8008580:	b530      	push	{r4, r5, lr}
 8008582:	d02c      	beq.n	80085de <__sflags+0x62>
 8008584:	2b77      	cmp	r3, #119	; 0x77
 8008586:	d007      	beq.n	8008598 <__sflags+0x1c>
 8008588:	2b61      	cmp	r3, #97	; 0x61
 800858a:	d10f      	bne.n	80085ac <__sflags+0x30>
 800858c:	f44f 7402 	mov.w	r4, #520	; 0x208
 8008590:	2301      	movs	r3, #1
 8008592:	f44f 7084 	mov.w	r0, #264	; 0x108
 8008596:	e003      	b.n	80085a0 <__sflags+0x24>
 8008598:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800859c:	2301      	movs	r3, #1
 800859e:	2008      	movs	r0, #8
 80085a0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80085a4:	b935      	cbnz	r5, 80085b4 <__sflags+0x38>
 80085a6:	4323      	orrs	r3, r4
 80085a8:	6013      	str	r3, [r2, #0]
 80085aa:	e002      	b.n	80085b2 <__sflags+0x36>
 80085ac:	2316      	movs	r3, #22
 80085ae:	6003      	str	r3, [r0, #0]
 80085b0:	2000      	movs	r0, #0
 80085b2:	bd30      	pop	{r4, r5, pc}
 80085b4:	2d62      	cmp	r5, #98	; 0x62
 80085b6:	d00c      	beq.n	80085d2 <__sflags+0x56>
 80085b8:	2d78      	cmp	r5, #120	; 0x78
 80085ba:	d00d      	beq.n	80085d8 <__sflags+0x5c>
 80085bc:	2d2b      	cmp	r5, #43	; 0x2b
 80085be:	d1ef      	bne.n	80085a0 <__sflags+0x24>
 80085c0:	f020 001c 	bic.w	r0, r0, #28
 80085c4:	f023 0303 	bic.w	r3, r3, #3
 80085c8:	f040 0010 	orr.w	r0, r0, #16
 80085cc:	f043 0302 	orr.w	r3, r3, #2
 80085d0:	e7e6      	b.n	80085a0 <__sflags+0x24>
 80085d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085d6:	e7e3      	b.n	80085a0 <__sflags+0x24>
 80085d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80085dc:	e7e0      	b.n	80085a0 <__sflags+0x24>
 80085de:	2400      	movs	r4, #0
 80085e0:	4623      	mov	r3, r4
 80085e2:	2004      	movs	r0, #4
 80085e4:	e7dc      	b.n	80085a0 <__sflags+0x24>
	...

080085e8 <_fstat_r>:
 80085e8:	b538      	push	{r3, r4, r5, lr}
 80085ea:	4c07      	ldr	r4, [pc, #28]	; (8008608 <_fstat_r+0x20>)
 80085ec:	2300      	movs	r3, #0
 80085ee:	4605      	mov	r5, r0
 80085f0:	4608      	mov	r0, r1
 80085f2:	4611      	mov	r1, r2
 80085f4:	6023      	str	r3, [r4, #0]
 80085f6:	f7fc fb85 	bl	8004d04 <_fstat>
 80085fa:	1c43      	adds	r3, r0, #1
 80085fc:	d102      	bne.n	8008604 <_fstat_r+0x1c>
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	b103      	cbz	r3, 8008604 <_fstat_r+0x1c>
 8008602:	602b      	str	r3, [r5, #0]
 8008604:	bd38      	pop	{r3, r4, r5, pc}
 8008606:	bf00      	nop
 8008608:	20000744 	.word	0x20000744

0800860c <_isatty_r>:
 800860c:	b538      	push	{r3, r4, r5, lr}
 800860e:	4c06      	ldr	r4, [pc, #24]	; (8008628 <_isatty_r+0x1c>)
 8008610:	2300      	movs	r3, #0
 8008612:	4605      	mov	r5, r0
 8008614:	4608      	mov	r0, r1
 8008616:	6023      	str	r3, [r4, #0]
 8008618:	f7fc faff 	bl	8004c1a <_isatty>
 800861c:	1c43      	adds	r3, r0, #1
 800861e:	d102      	bne.n	8008626 <_isatty_r+0x1a>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	b103      	cbz	r3, 8008626 <_isatty_r+0x1a>
 8008624:	602b      	str	r3, [r5, #0]
 8008626:	bd38      	pop	{r3, r4, r5, pc}
 8008628:	20000744 	.word	0x20000744

0800862c <_lseek_r>:
 800862c:	b538      	push	{r3, r4, r5, lr}
 800862e:	4c07      	ldr	r4, [pc, #28]	; (800864c <_lseek_r+0x20>)
 8008630:	4605      	mov	r5, r0
 8008632:	4608      	mov	r0, r1
 8008634:	4611      	mov	r1, r2
 8008636:	2200      	movs	r2, #0
 8008638:	6022      	str	r2, [r4, #0]
 800863a:	461a      	mov	r2, r3
 800863c:	f7fc fb22 	bl	8004c84 <_lseek>
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	d102      	bne.n	800864a <_lseek_r+0x1e>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	b103      	cbz	r3, 800864a <_lseek_r+0x1e>
 8008648:	602b      	str	r3, [r5, #0]
 800864a:	bd38      	pop	{r3, r4, r5, pc}
 800864c:	20000744 	.word	0x20000744

08008650 <_read_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4c07      	ldr	r4, [pc, #28]	; (8008670 <_read_r+0x20>)
 8008654:	4605      	mov	r5, r0
 8008656:	4608      	mov	r0, r1
 8008658:	4611      	mov	r1, r2
 800865a:	2200      	movs	r2, #0
 800865c:	6022      	str	r2, [r4, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	f7fc fa30 	bl	8004ac4 <_read>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d102      	bne.n	800866e <_read_r+0x1e>
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	b103      	cbz	r3, 800866e <_read_r+0x1e>
 800866c:	602b      	str	r3, [r5, #0]
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	20000744 	.word	0x20000744

08008674 <_init>:
 8008674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008676:	bf00      	nop
 8008678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800867a:	bc08      	pop	{r3}
 800867c:	469e      	mov	lr, r3
 800867e:	4770      	bx	lr

08008680 <_fini>:
 8008680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008682:	bf00      	nop
 8008684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008686:	bc08      	pop	{r3}
 8008688:	469e      	mov	lr, r3
 800868a:	4770      	bx	lr
